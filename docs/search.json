[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"book result three years spare time work passion open source R Shiny world. final development intended 2021 Q4 release R Series Chapman\n& Hall. author warmly thanks CRC Press allowing online version remain free accessible everyone.","code":""},{"path":"index.html","id":"is-this-book-for-me","chapter":"Welcome","heading":"Is this book for me?","text":"experienced Shiny user want learn underlying web technologies can quickly customize apps. Good new: basic knowledge HTML, CSS JavaScript plus mandatory.fulfill prerequisites, read book already happened ask one following questions:want know develop shiny apps professional look feel?ever wondered design new input widgets unleash interactivity?want better handle JS CSS apps?may develop mobile friendly template Shiny?may include React shiny apps?simply curious happens hood?","code":""},{"path":"index.html","id":"learning-objectives","chapter":"Welcome","heading":"Learning objectives","text":"book help :Understand Shiny deals classic web development standards main differences.Manipulate HTML tags R create custom layouts.Harness power CSS JavaScript quickly design apps standing pack.Discover steps import convert existing web frameworks like Bootstrap 4, framework7.Learn Shiny internally deals inputs.Learn less documented Shiny mechanisms (websockets, sessions, …).","code":""},{"path":"index.html","id":"book-structure","chapter":"Welcome","heading":"Book structure","text":"book organized seven parts:Part 1 demonstrates link Shiny classic web technologies like HTML, CSS JavaScript. necessary web development knowledge gradually introduced, able read book. explore web dependencies behind Shiny Bootstrap jQuery. dive htmltools (Cheng, Sievert, et al. 2021) package, providing functions create manipulate HTML tags R well manage web dependencies.Part 1 demonstrates link Shiny classic web technologies like HTML, CSS JavaScript. necessary web development knowledge gradually introduced, able read book. explore web dependencies behind Shiny Bootstrap jQuery. dive htmltools (Cheng, Sievert, et al. 2021) package, providing functions create manipulate HTML tags R well manage web dependencies.Part 2 focuses cascading stylesheet (CSS) Sass (Syntactically Awesome Style Sheets). provide reader basic CSS knowledge get Sass, powerful tool seamlessly alter Shiny apps style, reproducible manner. along part, showcase examples R community like fresh (Perrier Meyer 2020b) bslib (Sievert Cheng 2021), significantly beautify apps lines code.Part 2 focuses cascading stylesheet (CSS) Sass (Syntactically Awesome Style Sheets). provide reader basic CSS knowledge get Sass, powerful tool seamlessly alter Shiny apps style, reproducible manner. along part, showcase examples R community like fresh (Perrier Meyer 2020b) bslib (Sievert Cheng 2021), significantly beautify apps lines code.Part 3 contains chapters dedicated Shiny input system. part starts JavaScript hands , exposes Shiny works hood introducing websockets allows communication R JavaScript. explore Shiny input life cycle, created updated. expose JS techniques get rid unnecessary renderUI patterns may speed Shiny apps. part contains many hidden gems significantly quickly enhance apps.Part 3 contains chapters dedicated Shiny input system. part starts JavaScript hands , exposes Shiny works hood introducing websockets allows communication R JavaScript. explore Shiny input life cycle, created updated. expose JS techniques get rid unnecessary renderUI patterns may speed Shiny apps. part contains many hidden gems significantly quickly enhance apps.Part 4 focuses development new template Shiny demonstrating examples tablerDash (Granjon 2020) package. , may explored part RinteRface project. case study mobilizes knowledge acquired previous parts.Part 4 focuses development new template Shiny demonstrating examples tablerDash (Granjon 2020) package. , may explored part RinteRface project. case study mobilizes knowledge acquired previous parts.Part 5 introduces new opinionated package, charpente (Granjon Coene 2021), substantially reduce burden JavaScript management development Shiny extensions.Part 5 introduces new opinionated package, charpente (Granjon Coene 2021), substantially reduce burden JavaScript management development Shiny extensions.Part 6 dives mobile web development practical study involving rework shinyMobile (Granjon, Perrier, Rudolf 2021). give brief introduction progressive web application world patterns get started like service workers, web manifests,\noffline pages.Part 6 dives mobile web development practical study involving rework shinyMobile (Granjon, Perrier, Rudolf 2021). give brief introduction progressive web application world patterns get started like service workers, web manifests,\noffline pages.Part 7 exposes alternatives like React, taking examples reactR (Inc et al. 2021) package.Part 7 exposes alternatives like React, taking examples reactR (Inc et al. 2021) package.Parts sorted difficulty level, last one technical. However, mean reader\nmust read chapters. Given heterogeneous background community, people may focus JavaScript section, others read Sass part mobile development examples. patterns exposed book may apply\nclassic Shiny apps projects, necessarily meant extend Shiny per se, may need highly customized experience.\nBeyond aesthetic aspect, book tries expose best practices develop optimized shiny apps!end book, reader able entirely customize Shiny reasonable amount time.","code":""},{"path":"index.html","id":"welcome-code-structure","chapter":"Welcome","heading":"Code structure","text":"book side package containing necessary material run code without reload previous snippet.","code":"\nremotes::install_github(\n\"DivadNojnarg/outstanding-shiny-ui-code\"\n)\nlibrary(OSUICode)"},{"path":"index.html","id":"about-rinterface","chapter":"Welcome","heading":"About RinteRface","text":"RinteRface project initiative aiming provide one famous HTML templates Shiny. Everything started collaboration John Coene David Granjon early 2018 shinybulma (Coene Granjon 2021) officially release RinteRface November 2018 shinydashboardPlus (Granjon 2021d), bs4Dash (Granjon 2021a) line-packages.biggest RinteRface accomplishment probably work progress shinyMobile package, initially called {shinyF7}, collaboration dreamRs team.Since 2019, RinteRface involved various R related events like local R meetups conferences (Zurich R User Group, baselR, useR2019, satRdayNeuchatel2020, e-Rum2020, RPharma2020).RinteRface contributor Shiny Developers Series, hosted Eric Nantz, also known theRcast.RinteRface work awarded several times 2 latest shiny contests (2019 2020), contributions like:virtual lab teaching physiology (2019), Apps.Physiol plateform, fuelled bs4Dash hosted {CaPO4Sim} (Granjon 2021b)\nFIGURE 0.1: virtual patient simulator {CaPO4Sim}\n{deminR} (Devaux Granjon 2020), minesweeper R (2020), powered shinyMobile\nFIGURE 0.2: {deminR}, minesweeper R\nRinteRface grateful R community book sort acknowledgment!","code":""},{"path":"index.html","id":"acknowledgements","chapter":"Welcome","heading":"Acknowledgements","text":"’d like warmly thanks CRC reviewers: Emily Riederer, Barret Schloerke Eric Nantz valuable comments help.Howard Baek accepting test almost chapters. Howard perfect book target good knowledge Shiny beginner level web development.Many thanks Hadley Wickham general thoughts book organization. really helpful reorder content.grateful Douglas Robinson proof reading first book manuscript fixing many typos contained.special thanks friends John Victor contributing RinteRface.Thanks ThinkR team providing material support RinteRface workshops.RinteRface book won’t exist without amazing R community. Thanks valuable feedback.front cover designed owing amazing undraw open source illustration library. Many thanks Katerina Limpitsouni make possible.","code":""},{"path":"index.html","id":"packages","chapter":"Welcome","heading":"Packages","text":"book built R version 3.6.1 (2019-07-05) following packages:","code":""},{"path":"foreword.html","id":"foreword","chapter":"Foreword","heading":"Foreword","text":"Kenton Russel aka @timelyportfolioSince initial commit (https://github.com/rstudio/shiny/commit/e28b3da1badfecb34235e74a43aac4e8da1641bc) Shiny June 2012, project grown rapidly users around world across nearly every domain. 2021, strangely though, nearly zero comprehensive resources collecting scattered wisdom experience thousands Shiny users developers single definitive resource. , Hadley Wickham’s Mastering Shiny book (Hadley 2021) focuses providing solid background Shiny best practices, book addresses specific gap beginner advanced level, deeply customize enhance shiny applications, point looks indistinguishable classic web application. read early drafts, kept saying smile, “Yes, finally”. book fills void covering topics Internet search might yield useful results.Successful open source requires skillful developers, active engaged users, helpful supporters. R/Shiny community, David Granjon, PhD fulfills three roles prolific R package creator, educated thoughtful user domain expertise, educator (workshops, posts, forum responses). think anyone qualified write book Shiny, happy David spent time generously share wisdom experience excellent resource.","code":""},{"path":"web-intro.html","id":"web-intro","chapter":"1 Shiny and the Web","heading":"1 Shiny and the Web","text":"shiny (Chang et al. 2021) allows development web applications R minutes. Let’s face : quite mind blowing! may production ready app, still fully functional, working prototype. Believe , web application pure HTML, CSS JavaScript difficult, especially someone non-web developer background.first load shiny:","code":"\nlibrary(shiny)"},{"path":"web-intro.html","id":"shiny-generates-html-code-from-r","chapter":"1 Shiny and the Web","heading":"1.1 Shiny generates HTML code from R","text":"Let’s start little exercise:Copy paste code R console click enter.observe?Notice output format example HTML tag, opening tag <h1> closing tag <\/h1>. R developer, able generate HTML code R allows remain focused main task instead web development burdens.time, production Shiny app sometimes requires custom elements contained hidden Shiny’s core.Shiny app less customizable classic web app? ! hood, Shiny engine build HTML tags, R, meaning HTML elements available. may also include custom JavaScript code styles CSS. Chapter 2, shed light underlying mechanisms allow create HTML R code.Huumm … feel don’t believe … Ok fine … let show something!","code":"\nh1(\"Hello World\")"},{"path":"web-intro.html","id":"be-a-dj","chapter":"1 Shiny and the Web","heading":"1.2 Be a DJ","text":"see Figure 1.1 Shiny app. Yes, swear!\nFIGURE 1.1: Unleash dj\nstill convinced, look demonstration.Wait blue waveform appears player’s screen. click green play button stop start music (space key also supported). Besides, waveform interactive, thereby allowing browse current track. rotating part (central part jog wheel) indicates read position useful information.magic? hood, Shiny app consists :111 lines CSS.29 lines JavaScript code.2 png images (dj gear + rotating wheel).36 lines R code, including wavesurfer htmlWidget package display waveform.custom HTML tags.Inspired article.must acknowledge still far offering features original professional DJ gear fairly good start!noticed, acquire bit HTML, CSS JS knowledge reach level result. Guess ? exactly purpose book!ready become Shiny wizard?","code":"\n### RUN ### \n# OSUICode::run_example( \n#  \"intro/dj-system\" \n# ) "},{"path":"web-intro.html","id":"web-intro-html","chapter":"1 Shiny and the Web","heading":"1.3 HTML 101","text":"chapter provides short introduction three main web languages, namely HTML, CSS JavaScript. following content crucial understand chapter 2 HTML generation R.","code":""},{"path":"web-intro.html","id":"html-basics","chapter":"1 Shiny and the Web","heading":"1.3.1 HTML Basics","text":"HTML (Hypertext Markup Language) derived SGML (Standard Generalized markup Language). HTML file contains tags may divided two categories:Paired tags, text inserted opening closing tag.Self-closing tags.Tags may divided three categories, based role:Structure tags: constitute skeleton HTML page (<title><\/title>, <head><\/head>, <body><\/body>).Control tags: script, inputs buttons (). role include external resources, provide interactivity user.Formatting tags: control size, font wrapped text.Finally, distinguish block inline elements:Block elements may contain tags take full width (block inline). <div><\/div> commonly used block element. elements block printed top others.Inline elements (instance <span><\/span>, <><\/>) printed line. can contain block tags, instance <span><div><p>Hello World<\/p><\/div><\/span>, may contain nested inline tags like <><img/><\/>. previous element creates clickable image pointing specific location.Inline-block elements allow insert block element inline.Importantly, <div> <span> generic tags don’t semantic meaning, contrary <header> <footer>, allow structure HTML page. <div> span used whenever semantic block inline container may applied, respectively.","code":"<!-- paired-tags -->\n<p><\/p>\n<div><\/div>\n\n<!-- self-closing tags -->\n<iframe/>\n<img/>\n<input/>\n<br/>"},{"path":"web-intro.html","id":"tag-attributes","chapter":"1 Shiny and the Web","heading":"1.3.2 Tag attributes","text":"Attributes text elements allowing specify tag properties. instance link tag (<><\/>), actually expect just tag , target url open new page. previous examples, tags don’t attributes. Yet, exists large range attributes see two now (reason commonly used CSS JavaScript):class may shared multiple tags.id must unique.attributes widely used CSS JavaScript (see Chapter 10 jQuery selectors) apply custom style web page. Class attributes apply multiple elements, however id attribute restricted one item.Interestingly, another attribute category, know non-standard attributes like data-toggle. see later book Chapter 18.","code":"<div class=\"awesome-item\" id=\"myitem\"><\/div>\n<!-- the class awesome-item may be applied to multiple tags -->\n<span class=\"awesome-item\"><\/span>"},{"path":"web-intro.html","id":"simplest-html-template","chapter":"1 Shiny and the Web","heading":"1.3.3 The simplest HTML skeleton","text":"HTML page collection tags interpreted web browser step step. simplest HTML skeleton may defined follows:<html> main wrapper.<head> <body> two main children.\n<head> contains dependencies like styles JavaScript files (),\n<body> contains page content displayed screen. JavaScript files often added just end <body>.\n<head> contains dependencies like styles JavaScript files (),<body> contains page content displayed screen. JavaScript files often added just end <body>.body content displayed screen! W3C validation imposes least title tag head section lang attribute html tag!Let’s write famous Hello World HTML:order preview page web browser, need save snippet script hello-world.html double-click . open default web browser.Shiny app, demonstration purpose (static HTML enough user interaction required).outside, looks identical! sure ? Let’s meet Chapter 3 deeper look.","code":"<!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n  <!-- head content here -->\n    <title>A title<\/title>\n  <\/head>\n  <body>\n  <!-- body content here -->\n  <\/body>\n<\/html><!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n    <!-- head content here -->\n    <title>A title<\/title>\n  <\/head>\n  <body>\n    <p>Hello World<\/p>\n  <\/body>\n<\/html>\nui <- fluidPage(p(\"Hello World\"))\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)"},{"path":"web-intro.html","id":"about-the-document-object-model-dom","chapter":"1 Shiny and the Web","heading":"1.3.4 About the Document Object Model (DOM)","text":"DOM stands “Document Object Model” convenient representation HTML document. consider last Hello World example, associated DOM tree may inspected Figure 1.2.","code":""},{"path":"web-intro.html","id":"visualizing-the-dom-with-the-developer-tools","chapter":"1 Shiny and the Web","heading":"1.3.4.1 Visualizing the DOM with the developer tools","text":"developer tools crucial way work websites, particularly customize Shiny apps. shown Figure 1.2, example actions able perform: inspect HTML structure page, debug JavaScript code demonstrated 10.6, inspect served files (static assets like CSS, JS, images), run performances audit 25, inspect websocket activity (section 11) many .section, restrict description first panel (Elements) developer tools [^inspector]. feature available web browsers, however demonstration purposes, focus Chrome DevTools. may opened:right click selecting inspect.clicking ctrl + shift (Maj) + Windows, ⌥ + ⌘ + Mac.following:Open hello-world.html example Chrome.Right-click open HTML inspector (developer tools must enabled case).HTML inspector convenient tool explore structure current HTML page. left-hand side, DOM tree displayed clearly see <html> parent <head> <body>. <body> also one child, <p>. may preview style (CSS) associated selected element right panel well Event Listeners (JavaScript), discussed later book.\nFIGURE 1.2: Inspection DOM Hello World example\n","code":""},{"path":"web-intro.html","id":"web-inspector-101","chapter":"1 Shiny and the Web","heading":"1.3.4.2 Web Inspector 101","text":"following, enumerate key features inspector Elements tab. addition explore HTML structure, inspector allows :Dynamically change CSS run time.Debug JavaScript code (put break points, …).Run JavaScript code console.Monitor error warning may prevent app website properly working.Another important feature ability switch different devices, especially mobile platforms global performance audit Google LightHouse. book Colin Fay et al. details relevant elements Shiny app development.propose set quick exercises review important HTML inspector capabilities commonly needed Shiny app customization. consider app already defined :","code":"\nui <- fluidPage(p(\"Hello World\"))\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)"},{"path":"web-intro.html","id":"exercise-altering-the-dom-structure","chapter":"1 Shiny and the Web","heading":"1.3.4.2.1 Exercise: Altering the DOM structure","text":"Run Hello World app, right click text element select inspect.Notice done similarly clicking top left corner Inspect icon (Command + maj + C Mac) hovering Hello World text.see result similar Figure 1.3, Inspect icon blue. selected element highlighted white box displays main CSS properties like text-color, font-size, margins, well accessibility parameters.\nFIGURE 1.3: Inspection p element Hello World example\nElements panel, double click <p> <\/p> tags edit current text. Press enter finished.Let’s add children p tag. Right click select Edit HTML option. may enter valid HTML code inside. Don’t forget rules relative inline block tags (inline tags contain block tags!!!).depicted Figure 1.4, done right click p tag display options like:Add/edit attribute. may try add class class=\"awesome-text\" id id=\"-text\".Delete current tag (delete key well).Copy element nested elements.copy outside HTML (ignore nested elements).Extract CSS selector JavaScript path (code select element): body > div > p document.querySelector(\"body > div > p\"), respectively. 2 features extremely handy save time. Try copy paste document.querySelector(\"body > div > p\") JavaScript console bottom inspector window. returns selected HTML element, shown Figure 1.5! Amazing isn’t ?Hide element.Force specific state. instance buttons may active, inactive. talk Chapter 6.2.4.4.1.\nFIGURE 1.4: Modifications p element Hello World example\n\nFIGURE 1.5: Extract JavaScript path select p element\nWhenever looking specific tag complex page, search tag option game changer (Ctrl + F Windows, command + F within Elements tab Mac). See Figure 1.6.\nFIGURE 1.6: Search element “awesome-text” class\nFinally, inspector toolkit allows reorder DOM elements rather intuitive drag drop feature. invite reader take time experiment features crucial next chapters, particularly 6.","code":""},{"path":"web-intro.html","id":"preliminary-introduction-to-css-and-javascript","chapter":"1 Shiny and the Web","heading":"1.3.5 Preliminary introduction to CSS and JavaScript","text":"introduce section, propose look first website, early 90’s (August 1991 exactly). aesthetic point view (see Figure 1.7), far can observe today shown Figure 1.8.\nFIGURE 1.7: World wide web website\n\nFIGURE 1.8: RinteRface website: https://rinterface.com\ncan explain difference? One main reason absence CSS (Cascading Style Sheet) since first CSS release appeared December 1996, five years later first web site publication. CSS allows deeply customize appearance web page changing colors, fonts, margins much . acknowledge, role JavaScript demonstrated previous example. Yet impact important CSS, now impossible dissociate HTML, CSS JavaScript.","code":""},{"path":"web-intro.html","id":"html-and-css","chapter":"1 Shiny and the Web","heading":"1.3.5.1 HTML and CSS","text":"CSS (Cascading Style Sheets) changes style HTML tags targeting specific classes ids. instance, want p tags red color use:include CSS HTML page, use <style> tag follows:may update hello-world.html script run web-browser see difference. example may slight, shows may control look feel display. development context, css files may big better include external files.Let’s build shiny app similar things. reminder, may use tags$style include small pieces CSS app:prepared! chapter 6, ’ll dive CSS expose best practices.","code":"p {\n  color: red;\n}<!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n    <style type=\"text/css\">\n      p {\n        color: red;\n      }\n    <\/style>\n    <title>A title<\/title>\n  <\/head>\n  <body>\n    <p>Hello World<\/p>\n  <\/body>\n<\/html>\nui <- fluidPage(\n  tags$style(\"p { color: red;}\"),\n  p(\"Hello World\")\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)"},{"path":"web-intro.html","id":"html-and-javascript","chapter":"1 Shiny and the Web","heading":"1.3.5.2 HTML and JavaScript","text":"JavaScript game changer give life web apps. object oriented programming language allowing interact HTML elements.following example, defined changeColor function targets element hello id change color property green. HTML element onClick attribute triggers changeColor function time button clicked.lines code, can change color text beginning!see process dramatically different Shiny app. wrap custom JavaScript tags$script function, :already familiar JS, Chapter 10 provides basic knowledge start customizing shiny apps.","code":"<!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n    <style type=\"text/css\">\n      p {\n        color: red;\n      }\n    <\/style>\n    <script language=\"javascript\">\n      // displays an alert \n      alert('Click on the Hello World text!');\n      // change text color\n      function changeColor(color){\n        document.getElementById('hello').style.color = color;\n      }\n    <\/script>\n    <title>A title<\/title>\n  <\/head>\n  <body>\n    <!-- onclick attributes applies the JavaScript \n    function changeColor define above -->\n    <p id=\"hello\" onclick=\"changeColor('green')\">Hello World<\/p>\n  <\/body>\n<\/html>\nui <- fluidPage(\n  tags$script(\n    \"alert('Click on the Hello World text!');\n     // change text color\n     function changeColor(color){\n       document.getElementById('hello').style.color = 'green';\n     }\n    \"\n  ),\n  p(id = \"hello\", onclick=\"changeColor('green')\", \"Hello World\")\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)"},{"path":"web-intro.html","id":"summary","chapter":"1 Shiny and the Web","heading":"1.4 Summary","text":"demonstrated , developing shiny app basically building website R completely compatible web languages, HTML, CSS JavaScript. remainder book presents robust tools concepts extend Shiny.","code":""},{"path":"htmltools-overview.html","id":"htmltools-overview","chapter":"2 Mastering {htmltools}","heading":"2 Mastering {htmltools}","text":"htmltools (Cheng, Sievert, et al. 2021) R package designed :Generate HTML tags R.Handle web dependencies (see chapter 4).Historically, htmltools extracted shiny (Chang et al. 2021) able extend , developing custom HTML tags, importing extra dependencies web. ’s , packages many common functions!ultimate goal htmltools manipulate, combine rearrange tags order create flexible rich HTML structures R. believe example heavily relies htmltools (Figure 2.1)?\nFIGURE 2.1: shinyRPG built htmltools\nwant try example, showcase code:","code":"\nremotes::install_github(\"RinteRface/shinyRPG\")\nlibrary(shinyRPG)\nshinyRPGDemo()"},{"path":"htmltools-overview.html","id":"writing-html-tags-from-r","chapter":"2 Mastering {htmltools}","heading":"2.1 Writing HTML Tags from R","text":"htmltools provides necessary functions write HTML tags introduced Chapter 1.3. R, even convenient raw HTML since opening/closing tag, simple function call instead:Inside function call, named elements become attributes, whereas unnamed elements become children. cases, tags may empty attributes like <input disabled>. case,\ncorresponding R code input(disabled = NA).Pro tip: Since tag functions produce shiny tags, HTML elements, calling tag inside document render tag instead printing code. Sometimes, particularly book, want see code output. case, use following code:may find another example .","code":"\nlibrary(htmltools)\ntag <- div(\"Hello World\")\ntag#> <div>Hello World<\/div>\nlibrary(knitr)\nlibrary(htmltools)\nregisterS3method(\n  \"knit_print\", \"shiny.tag\",\n  getS3method(\"print\", \"shiny.tag\")\n)\nregisterS3method(\n  \"knit_print\", \"shiny.tag.list\",\n  getS3method(\"print\", \"shiny.tag.list\")\n)"},{"path":"htmltools-overview.html","id":"notations","chapter":"2 Mastering {htmltools}","heading":"2.2 Notations","text":"type htmltools::tags$ R console, suggested common available HTML tags, thereby making fairly easy switch HTML R, shown Figure 2.2\nFIGURE 2.2: htmltools tags builder\nHowever, convenience, commonly used tags like p, h1, h2, h3, h4, h5, h6, , br, div, span, pre, code, img, strong, em, hr, …\naccessible simple function call like:Therefore, whether use tags$<TAG_NAME <TAG_NAME> depends tag exported default. Since nav exported, write:building custom templates, writing lot tags! might seem\nmuch work always write tags$<TAG_NAME>. exists function called withTags(), wrapping code function allows code like , much\neasier write read:gather multiple tags together, choose tagList() list(), although HTML output :first shiny.tag.list class addition list. golem (Fay et al. 2021) allows test R object tag list. case, using list cause test fail.","code":"\n# good\nh1(\"This is a title\")\n\n# correct but not necessary\ntags$h1(\"This is a title\")\n# correct\ntags$nav(\"This is the navigation\")\n\n# fail\ntry(nav(\"This is the navigation\"))\n# Better\nwithTags(\n  nav(div(), ul(li(), li()))\n)\n\n# instead of \ntags$nav(div(), tags$ul(tags$li(), tags$li()))\n# good\ntag_list_1 <- tagList(\n  p(\"Some text\"),\n  div(\"Content\")\n)\n\nstr(tag_list_1)#> List of 2\n#>  $ :List of 3\n#>   ..$ name    : chr \"p\"\n#>   ..$ attribs : Named list()\n#>   ..$ children:List of 1\n#>   .. ..$ : chr \"Some text\"\n#>   ..- attr(*, \"class\")= chr \"shiny.tag\"\n#>  $ :List of 3\n#>   ..$ name    : chr \"div\"\n#>   ..$ attribs : Named list()\n#>   ..$ children:List of 1\n#>   .. ..$ : chr \"Content\"\n#>   ..- attr(*, \"class\")= chr \"shiny.tag\"\n#>  - attr(*, \"class\")= chr [1:2] \"shiny.tag.list\" \"list\"\n# correct but not optimal\ntag_list_2 <- list(\n  p(\"Some text\"),\n  div(\"Content\")\n)\n\nstr(tag_list_2)#> List of 2\n#>  $ :List of 3\n#>   ..$ name    : chr \"p\"\n#>   ..$ attribs : Named list()\n#>   ..$ children:List of 1\n#>   .. ..$ : chr \"Some text\"\n#>   ..- attr(*, \"class\")= chr \"shiny.tag\"\n#>  $ :List of 3\n#>   ..$ name    : chr \"div\"\n#>   ..$ attribs : Named list()\n#>   ..$ children:List of 1\n#>   .. ..$ : chr \"Content\"\n#>   ..- attr(*, \"class\")= chr \"shiny.tag\""},{"path":"htmltools-overview.html","id":"adding-new-tags","chapter":"2 Mastering {htmltools}","heading":"2.3 Adding new tags","text":"may define extra HTML tags tag() function:Good practice check whether created tag line HTML validation rules. want check web page, particularly Shiny generated HTML page, W3C online validation tool. careful , following rule cause HTML code invalid. default, Shiny complies recommendations, suggest careful exotic template.","code":"\ncustomTag <- tag(\n  \"test\", \n  list(class = \"test\", p(\"Custom Tag\"))\n)\nstr(customTag)#> List of 3\n#>  $ name    : chr \"test\"\n#>  $ attribs :List of 1\n#>   ..$ class: chr \"test\"\n#>  $ children:List of 1\n#>   ..$ :List of 3\n#>   .. ..$ name    : chr \"p\"\n#>   .. ..$ attribs : Named list()\n#>   .. ..$ children:List of 1\n#>   .. .. ..$ : chr \"Custom Tag\"\n#>   .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n#>  - attr(*, \"class\")= chr \"shiny.tag\"#> <test class=\"test\">\n#>   <p>Custom Tag<\/p>\n#> <\/test>"},{"path":"htmltools-overview.html","id":"alternative-way-to-write-tags","chapter":"2 Mastering {htmltools}","heading":"2.4 Alternative way to write tags","text":"htmltools comes HTML() function can feed raw HTML. , code give exactly output:Internally, classes different:, able use tags related functions, next parts.\nTherefore, strongly recommend using R mixing HTML R.Interestingly, want convert raw HTML R code, Shiny App developed Alan\nDipert RStudio, namely html2R, shown Figure 2.3. Non standard attributes (like data-toggle) correctly processed solutions. save precious time! recent approach developed section 22 internally used develop RinteRface templates.\nFIGURE 2.3: Illustration html2R App\nconverting HTML R functions, ’s possible easily parameterize generated tag.\nreuse later code. also allows maintain one single code base (R), much simpler long run code reviewed people non familiar HTML.","code":"\nHTML(\"<div>Blabla<\/div>\")\ndiv(\"Blabla\")\nclass(HTML(\"<div>Blabla<\/div>\"))#> [1] \"html\"      \"character\"\nclass(div(\"Blabla\"))#> [1] \"shiny.tag\""},{"path":"htmltools-overview.html","id":"playing-with-tags","chapter":"2 Mastering {htmltools}","heading":"2.5 Playing with tags","text":"becoming htmltools wizard, let’s learn shiny tags fundamentals.","code":""},{"path":"htmltools-overview.html","id":"tags-structure","chapter":"2 Mastering {htmltools}","heading":"2.5.1 Tags structure","text":"shiny tag defined :name span, div, h1 …, accessed tag$name.attributes, can accessed tag$attribs.Children, can accessed tag$children.class, namely shiny.tag.instance, tag following structure:output :modify class second child?working? assigning myTag$children[[2]] second_children, second_children$attribs$class <- \"adult\" modifies class copy original object. Thus :","code":"\n# create the tag\nmyTag <- div(\n  class = \"divclass\", \n  id = \"first\",\n  h1(\"My first child!\"),\n  span(class = \"child\", id = \"baby\", \"Crying\")\n)\n# access its name\n# myTag$name\n# access its attributes (id and class)\n# myTag$attribs\n# access children (returns a list of 2 elements)\n# myTag$children\n# access its class\nstr(myTag)#> List of 3\n#>  $ name    : chr \"div\"\n#>  $ attribs :List of 2\n#>   ..$ class: chr \"divclass\"\n#>   ..$ id   : chr \"first\"\n#>  $ children:List of 2\n#>   ..$ :List of 3\n#>   .. ..$ name    : chr \"h1\"\n#>   .. ..$ attribs : Named list()\n#>   .. ..$ children:List of 1\n#>   .. .. ..$ : chr \"My first child!\"\n#>   .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n#>   ..$ :List of 3\n#>   .. ..$ name    : chr \"span\"\n#>   .. ..$ attribs :List of 2\n#>   .. .. ..$ class: chr \"child\"\n#>   .. .. ..$ id   : chr \"baby\"\n#>   .. ..$ children:List of 1\n#>   .. .. ..$ : chr \"Crying\"\n#>   .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n#>  - attr(*, \"class\")= chr \"shiny.tag\"#> <div class=\"divclass\" id=\"first\">\n#>   <h1>My first child!<\/h1>\n#>   <span class=\"child\" id=\"baby\">Crying<\/span>\n#> <\/div>\nsecond_children <- myTag$children[[2]]\nsecond_children$attribs$class <- \"adult\"\n# This is not working ...\nmyTag$children[[2]]$attribs$class <- \"adult\"\nmyTag#> <div class=\"divclass\" id=\"first\">\n#>   <h1>My first child!<\/h1>\n#>   <span class=\"adult\" id=\"baby\">Crying<\/span>\n#> <\/div>"},{"path":"htmltools-overview.html","id":"htmltools-shinyRPG","chapter":"2 Mastering {htmltools}","heading":"2.5.2 Practical examples: shinyRPG","text":"give concrete example customize tags real life. exists \nnice RPG HTML template, rpgui. provides\nnecessary elements get started developing nice RPG looking user interfaces, depicted Figure 2.4.\nFIGURE 2.4: rpgui select input\nfollowing, consider select input, exactly \nstructure original shiny tag. However, convenient reuse shiny function\nlimit amount work. therefore start write custom input:According rpgui documentation, select tag composed following HTML elements:Adding label tag top slider, like get:compare rpgSelect function:shown output, exactly matching:outer div class.label class.input tag wrapped inside div container. .input tag rpgui-dropdown rpgui-list class,\ndepending size value.fix first problem target outer tag (selectTag), tag returned rpgSelect function. second row cleans label class. third row removes extra outer div keeps children, corresponding input tag. last instruction ensure set appropriate class, depending size value:complete code given Appendix .1.1, yields:","code":"\nrpgSelect <- function(inputId, label, choices, selected = NULL,\n                      multiple = FALSE, size = NULL) {\n  shiny::selectInput(\n    inputId,\n    label,\n    choices,\n    selected,\n    multiple,\n    selectize = FALSE,\n    width = NULL,\n    size\n  )\n}<select class=\"rpgui-dropdown\">\n    <option value=\"option1\">option1<\/option>\n    <option value=\"option2\">option2<\/option>\n    ...\n<\/select><div>\n  <label id=\"variable-label\" for=\"variable\">Variable:<\/label>\n  <select \n    id=\"variable\" \n    class=\"rpgui-dropdown\">\n    <option value=\"cyl\" selected>Cylinders<\/option>\n    <option value=\"am\">Transmission<\/option>\n    <option value=\"gear\">Gears<\/option>\n  <\/select>\n<\/div>\nrpgSelect(\n  \"variable\", \n  \"Variable:\",\n  c(\"Cylinders\" = \"cyl\",\n    \"Transmission\" = \"am\",\n    \"Gears\" = \"gear\")\n)#> <div class=\"form-group shiny-input-container\">\n#>   <label class=\"control-label\" id=\"variable-label\" for=\"variable\">Variable:<\/label>\n#>   <div>\n#>     <select id=\"variable\" class=\"form-control\"><option value=\"cyl\" selected>Cylinders<\/option>\n#> <option value=\"am\">Transmission<\/option>\n#> <option value=\"gear\">Gears<\/option><\/select>\n#>   <\/div>\n#> <\/div>\n# Modify tag\nselectTag$attribs$class <- NULL\n# Clean extra label class\nselectTag$children[[1]]$attribs$class <- NULL\n# Remove extra outer div\nselectTag$children[[2]] <- selectTag$children[[2]]$children[[1]]\n\n# Add good class for rppgui binding\nselectTag$children[[2]]$attribs$class <- if (is.null(size)) {\n  \"rpgui-dropdown\"\n} else {\n  \"rpgui-list\"\n}\nrpgSelect(\n  \"variable\", \n  \"Variable:\",\n  c(\"Cylinders\" = \"cyl\",\n    \"Transmission\" = \"am\",\n    \"Gears\" = \"gear\")\n)#> <div>\n#>   <label id=\"variable-label\" for=\"variable\">Variable:<\/label>\n#>   <select id=\"variable\" class=\"rpgui-dropdown\"><option value=\"cyl\" selected>Cylinders<\/option>\n#> <option value=\"am\">Transmission<\/option>\n#> <option value=\"gear\">Gears<\/option><\/select>\n#> <\/div>"},{"path":"htmltools-overview.html","id":"useful-functions-for-tags","chapter":"2 Mastering {htmltools}","heading":"2.5.3 Useful functions for tags","text":"shown previous shinyRPG example, adding class id tag may done :two lines code, believe , complex examples, might much worse, thereby significantly impairing code readability.\nFortunately, htmltools provides powerful functions overcome issue. Let’s review .","code":"\ntag$attribs$class <- \"class\"\ntag$attribs$id <- \"id\""},{"path":"htmltools-overview.html","id":"add-attributes","chapter":"2 Mastering {htmltools}","heading":"2.5.3.1 Add attributes","text":"tagAppendAttributes() adds new attribute current tag. instance, assuming created div without id attribute:can pass many attributes want, including non-standard attributes data-toggle (see Bootstrap 3 tabs instance):reminder, even though correct, classic approach requires two steps:","code":"\nmyTag <- div(\"A tag\")\nmyTag <- tagAppendAttributes(myTag, id = \"myid\")\nmyTag#> <div id=\"myid\">A tag<\/div>\nmyTag <- tagAppendAttributes(\n  myTag, \n  `data-toggle` = \"tabs\", \n  class = \"myclass\"\n)\nmyTag#> <div id=\"myid\" data-toggle=\"tabs\" class=\"myclass\">A tag<\/div>\nmyTag$attribs[[\"data-toggle\"]] <- \"newValue\"\nmyTag$attribs$class <- \"newClass\"\n\nmyTag#> <div id=\"myid\" data-toggle=\"newValue\" class=\"newClass\">A tag<\/div>"},{"path":"htmltools-overview.html","id":"check-if-tag-has-specific-attribute","chapter":"2 Mastering {htmltools}","heading":"2.5.3.2 Check if tag has specific attribute","text":"tagHasAttribute() checks tag specific attribute:familiar %>%, also works:practice, function useful testing tag elements shown chapter 21.","code":"\n# I want to know if div has a class\nmyTag <- div(class = \"myclass\")\ntagHasAttribute(myTag, \"class\")#> [1] TRUE\nmyTag %>% tagHasAttribute(\"class\")#> [1] TRUE"},{"path":"htmltools-overview.html","id":"get-all-attributes","chapter":"2 Mastering {htmltools}","heading":"2.5.3.3 Get all attributes","text":"tagGetAttribute() gets targeted attribute’s value, exists, otherwise NULL:","code":"\nmyTag <- div(class = \"test\")\n# returns the class\ntagGetAttribute(myTag, \"class\")#> [1] \"test\"\n# returns NULL\ntagGetAttribute(myTag, \"id\")#> NULL"},{"path":"htmltools-overview.html","id":"set-childchildren","chapter":"2 Mastering {htmltools}","heading":"2.5.3.4 Set child/children","text":"tagSetChildren() creates children given tag. instance:tagSetChildren() removes existing children. see another set functions add children conserving existing ones.","code":"\nmyTag <- div(\n  class = \"parent\", \n  id = \"father\", \n  \"Father!\"\n)\nchild <- span(\"Daughter\")\nmyTag <- tagSetChildren(myTag, child)\n\nmyTag#> <div class=\"parent\" id=\"father\">\n#>   <span>Daughter<\/span>\n#> <\/div>"},{"path":"htmltools-overview.html","id":"add-child-or-children","chapter":"2 Mastering {htmltools}","heading":"2.5.3.5 Add child or children","text":"tagAppendChild() tagAppendChildren() add tags existing tag.\nWhereas tagAppendChild() takes one tag, can pass list tags tagAppendChildren().","code":"\nmyTag <- div(class = \"parent\", \"A tag\", \"Child 1\")\notherTag <- span(\"Child 2\")\nmyTag <- tagAppendChild(myTag, otherTag)\n\nmyTag#> <div class=\"parent\">\n#>   A tag\n#>   Child 1\n#>   <span>Child 2<\/span>\n#> <\/div>"},{"path":"htmltools-overview.html","id":"build-your-own-functions","chapter":"2 Mastering {htmltools}","heading":"2.5.3.6 Build your own functions","text":"might wonder tagRemoveChild tagRemoveAttributes.\nLet’s look tagAppendChild:write tagRemoveChild, tag target n position remove list children:defining tagRemoveChild, choose [ instead [[ allow select multiple list elements. Also notice function raises error provided tag children.tagAppendChild() able insert specific position. draft tagInsertChild building top base R append function:htmltools 0.5.2, new tagInsertChildren function.","code":"\ntagAppendChild <- function (tag, child) {\n  tag$children[[length(tag$children) + 1]] <- child\n  tag\n}\nmyTag <- div(class = \"parent\", span(\"Hey!\"))\n\n# we create the tagRemoveChild function\ntagRemoveChild <- function(tag, n) {\n  # check if the list is empty\n  if (length(tag$children) == 0) {\n    stop(paste(tag$name, \"does not have any children!\"))\n  }\n  tag$children[n] <- NULL\n  tag\n}\nmyTag <- tagRemoveChild(myTag, 1)\n\nmyTag#> <div class=\"parent\"><\/div>\ntagInsertChild <- function(tag, child, position) {\n  tag$children <- append(tag$children, list(child), position - 1)\n  tag\n}\n\nres1 <- tagInsertChild(p(span(\"hello\")), a(), 1)\nres2 <- tagInsertChild(p(span(\"hello\")), a(), 2)\n\nres1#> <p>\n#>   <a><\/a>\n#>   <span>hello<\/span>\n#> <\/p>\nres2#> <p>\n#>   <span>hello<\/span>\n#>   <a><\/a>\n#> <\/p>"},{"path":"htmltools-overview.html","id":"other-functions","chapter":"2 Mastering {htmltools}","heading":"2.5.4 Other functions","text":"golem package written thinkr contains neat functions edit tags.Particularly, tagRemoveAttributes:","code":"\ntagRemoveAttributes <- function(tag, ...) {\n  attrs <- as.character(list(...))\n  for (i in seq_along(attrs)) {\n    tag$attribs[[ attrs[i] ]] <- NULL\n  }\n  tag\n}\nmyTag <- div(class = \"test\", id = \"coucou\", \"Hello\")\nmyTag <- tagRemoveAttributes(myTag, \"class\", \"id\")\n\nmyTag#> <div>Hello<\/div>"},{"path":"htmltools-overview.html","id":"conditionally-set-attributes","chapter":"2 Mastering {htmltools}","heading":"2.5.5 Conditionally set attributes","text":"Sometimes, want set attributes specific conditions.Calling my_button() give:example fail style=\"color: \" clean. may use conditions:, call my_button(\"blue\") my_button():example, style won’t available color specified.","code":"\nmy_button <- function(color = NULL) {\n  tags$button( \n    style = paste(\"color:\", color),\n    p(\"Hello\")\n  )\n}#> <button style=\"color: \">\n#>   <p>Hello<\/p>\n#> <\/button>\nmy_button <- function(color = NULL) {\n  tags$button( \n    style = if (!is.null(color)) paste(\"color:\", color),\n    p(\"Hello\")\n  )\n}\nmy_button(\"blue\")#> <button style=\"color: blue\">\n#>   <p>Hello<\/p>\n#> <\/button>\nmy_button()#> <button>\n#>   <p>Hello<\/p>\n#> <\/button>"},{"path":"htmltools-overview.html","id":"using","chapter":"2 Mastering {htmltools}","heading":"2.5.6 Using %>%","text":"lot manipulation tag, don’t need create intermediate\nobjects, good idea use %>% magrittr:overall easier follow read.","code":"\nmyTag <- div(class = \"cl\", h1(\"Hello\")) %>% \n  tagAppendAttributes(id = \"myid\") %>%\n  tagAppendChild(p(\"some extra text here!\"))\n\nmyTag"},{"path":"htmltools-overview.html","id":"programmatically-create-children-elements","chapter":"2 Mastering {htmltools}","heading":"2.5.7 Programmatically create children elements","text":"Assume want create tag five children inside:structure correct imagine create 1000 span() fancier tag. previous approach consistent DRY programming concept. lapply() function useful (purrr map() family):","code":"\nmyTag <- div(\n  span(1),\n  span(2),\n  span(3),\n  span(4),\n  span(5)\n)\n\nmyTag\n# base R\ndiv(lapply(1:5, function(i) span(i)))\n# purrr + %>%\nmap(1:5, function(i) span(i)) %>% div()#> <div>\n#>   <span>1<\/span>\n#>   <span>2<\/span>\n#>   <span>3<\/span>\n#>   <span>4<\/span>\n#>   <span>5<\/span>\n#> <\/div>"},{"path":"htmltools-overview.html","id":"htmltools-modern","chapter":"2 Mastering {htmltools}","heading":"2.6 Modern {htmltools}","text":"section requires basic CSS knowledge, particularly CSS selectors. Please read Chapter 6 going .htmltools 0.5.2, new tagQuery() function makes manipulating shiny tags real pleasure, addition efficient. know like jQuery (Chapter 10.5), API really similar. don’t know jQuery yet, problem, ’ll see later book!preliminary example, want modify third span element example:new htmltools approach leverages tagQuery():may notice, first approach may lead poorly written code soon \ntag structure gets complex. may easily end things like tag$children[[1]]$children[[2]]$children[[1]]$attribs$class nearly impossible maintain.\nsecond approach much human readable, even though necessarily shorter example.\nbiggest advantage always depends overall tag structure. exercise, may wrap span elements inside another div parent:code still works, previous one require updated.Another reason prefer new tagQuery() API substantial performance gains. Interestingly, hood, older htmltools functions like tagAppendChildren() tagAppendAttributes() call tagQuery() API .cssSelector provided. practice,\none can achieve multiple modifications single tagQuery() call, requires combination multiple tagAppendChildren()/tagAppendAttributes() reach result, thereby leading less performance.ready become tag witcher?","code":"\nspans <- div(div(p(), lapply(1:5, function(i) span(i))))\nspans$children[[1]]$children[[2]][[3]]$attribs$class <- \"test\" \n\nspans#> <div>\n#>   <div>\n#>     <p><\/p>\n#>     <span>1<\/span>\n#>     <span>2<\/span>\n#>     <span class=\"test\">3<\/span>\n#>     <span>4<\/span>\n#>     <span>5<\/span>\n#>   <\/div>\n#> <\/div>\nspans <- div(div(p(), lapply(1:5, function(i) span(i))))\nspans <- tagQuery(spans)$\n  find(\"span\")$\n  filter(function(x, i) i == 3)$\n  addAttrs(\"class\" = \"amazing-tag\")$\n  allTags()\n\nspans#> <div>\n#>   <div>\n#>     <p><\/p>\n#>     <span>1<\/span>\n#>     <span>2<\/span>\n#>     <span class=\"amazing-tag\">3<\/span>\n#>     <span>4<\/span>\n#>     <span>5<\/span>\n#>   <\/div>\n#> <\/div>\nspans <- div(div(p(), div(lapply(1:5, function(i) span(i)))))\nspans <- tagQuery(spans)$\n  find(\"span\")$\n  filter(function(x, i) i == 3)$\n  addAttrs(\"class\" = \"amazing-tag\")$\n  allTags()\n\nspans#> <div>\n#>   <div>\n#>     <p><\/p>\n#>     <div>\n#>       <span>1<\/span>\n#>       <span>2<\/span>\n#>       <span class=\"amazing-tag\">3<\/span>\n#>       <span>4<\/span>\n#>       <span>5<\/span>\n#>     <\/div>\n#>   <\/div>\n#> <\/div>"},{"path":"htmltools-overview.html","id":"basics","chapter":"2 Mastering {htmltools}","heading":"2.6.1 Basics","text":"tagQuery() accepts tag list tags input returns data structure containing:$allTags(): tags.$selectedTags(): selected tags, default $allTags().example:shown , returned result shiny tag. Instead, R6 class methods handle tags.","code":"\ntag_query <- tagQuery(div(p()))\nclass(tag_query)#> [1] \"shiny.tag.query\"\ntag_query#> `$allTags()`:\n#> <div>\n#>   <p><\/p>\n#> <\/div>\n#> \n#> `$selectedTags()`: `$allTags()`"},{"path":"htmltools-overview.html","id":"query-tags","chapter":"2 Mastering {htmltools}","heading":"2.6.2 Query tags","text":"table summarizing available query methods. Note time writing, tagQuery() support simple CSS selectors. instance, data-... selectors covered, well ,, + ~. However, ’ll see many options work around.According Figure 2.5, $children() selects direct descendants, $find() slightly powerful drills level deeper. $filter() convenient subset selected tags, instance, depending specific attribute. dedicated section (2.6.4) covers $resetSelected() essentially reset current selection root tag. Whereas $parent() allow go step step returning time direct ancestor, $parents() returns ancestors. need even specific, $closest(cssSelector) goes finds matching cssSelector. Note , cssSelector = NULL, $closest() equivalent call $selectedTags().\nFIGURE 2.5: tagQuery API: overview query methods.\nLet’s consider example consisting tabset panel three tabs. menu items one challenging elements handle building custom Shiny template new tagQuery() literally make breeze handle. detailed case study available section 18.2.4.1.select third tab content element?Note provided anonymous R function $filter(), x tag index, allowing us drill third tab data-value = 3.exercise, give two minutes find classic htmltools equivalent. don’t manage, means new tagQuery() system rather convenient.","code":"\ntemp_tabs <- lapply(1:3, function(i) {\n  tabPanel(i, paste(\"Tab\", i))\n})\ntabs <- bs4Dash::tabsetPanel(.list = temp_tabs)\n\ntabs#> <div class=\"tabbable\">\n#>   <ul class=\"nav nav-tabs\" data-tabsetid=\"2071\">\n#>     <li class=\"nav-item\">\n#>       <a href=\"#\" data-toggle=\"tab\" data-value=\"1\" class=\"nav-link active\" data-target=\"#tab-2071-1\">1<\/a>\n#>     <\/li>\n#>     <li class=\"nav-item\">\n#>       <a href=\"#\" data-toggle=\"tab\" data-value=\"2\" class=\"nav-link\" data-target=\"#tab-2071-2\">2<\/a>\n#>     <\/li>\n#>     <li class=\"nav-item\">\n#>       <a href=\"#\" data-toggle=\"tab\" data-value=\"3\" class=\"nav-link\" data-target=\"#tab-2071-3\">3<\/a>\n#>     <\/li>\n#>   <\/ul>\n#>   <div class=\"tab-content\" data-tabsetid=\"2071\">\n#>     <div class=\"tab-pane active\" data-value=\"1\" id=\"tab-2071-1\">Tab 1<\/div>\n#>     <div class=\"tab-pane\" data-value=\"2\" id=\"tab-2071-2\">Tab 2<\/div>\n#>     <div class=\"tab-pane\" data-value=\"3\" id=\"tab-2071-3\">Tab 3<\/div>\n#>   <\/div>\n#> <\/div>\ntagQuery(tabs)$\n  find(\"div.tab-pane\")$ # div element with tab-pane class\n  filter(function(x, i) tagGetAttribute(x, \"data-value\") == 3)#> [[1]]\n#> <div class=\"tab-pane\" data-value=\"3\" id=\"tab-2071-3\">Tab 3<\/div>"},{"path":"htmltools-overview.html","id":"modify-tags","chapter":"2 Mastering {htmltools}","heading":"2.6.3 Modify tags","text":"shown preliminary example, main interest querying tag ultimately modify . tagQuery() exposes methods modify attributes, children query selection.","code":""},{"path":"htmltools-overview.html","id":"playing-with-attributes","chapter":"2 Mastering {htmltools}","heading":"2.6.3.1 Playing with attributes","text":"shown Figure 2.6, currently two main methods alter tag attributes, namely $addAttrs() (equivalent tagAppendAttributes) $removeAttrs(), even though specific methods exists, instance $addClass(), $removeClass() $toggleClass().\nFIGURE 2.6: tagQuery API: modify tag attributes.\nBootstrap 4 allows apply fade transition tabs, provided tabs fade class. seamlessly tagQuery():","code":"\ntagQuery(tabs)$\n  find(\".tab-pane\")$\n  addClass(\"fade\")#> [[1]]\n#> <div class=\"tab-pane active fade\" data-value=\"1\" id=\"tab-2071-1\">Tab 1<\/div>\n#> \n#> [[2]]\n#> <div class=\"tab-pane fade\" data-value=\"2\" id=\"tab-2071-2\">Tab 2<\/div>\n#> \n#> [[3]]\n#> <div class=\"tab-pane fade\" data-value=\"3\" id=\"tab-2071-3\">Tab 3<\/div>"},{"path":"htmltools-overview.html","id":"altering-tagchildrensiblings","chapter":"2 Mastering {htmltools}","heading":"2.6.3.2 Altering tag/children/siblings","text":"listed methods alter current tag children, depicted Figure 2.7.\nFIGURE 2.7: tagQuery API: alter tags children.\nGoing back previous tabs example, like include icon tab title. leverage $prepend() method, selecting elements part tab navigation:Result shown Figure 2.8.\nFIGURE 2.8: tagQuery API action: customized Shiny tabsetPanel.\n","code":"\n# Add extra item to tabs at the end\nnew_tabs <- tagQuery(tabs)$\n  find(\"a\")$\n  prepend(icon(\"flag\"))\n\nnew_tabs$selectedTags()#> [[1]]\n#> <a href=\"#\" data-toggle=\"tab\" data-value=\"1\" class=\"nav-link active\" data-target=\"#tab-2071-1\">\n#>   <i class=\"fa fa-flag\" role=\"presentation\" aria-label=\"flag icon\"><\/i>\n#>   1\n#> <\/a>\n#> \n#> [[2]]\n#> <a href=\"#\" data-toggle=\"tab\" data-value=\"2\" class=\"nav-link\" data-target=\"#tab-2071-2\">\n#>   <i class=\"fa fa-flag\" role=\"presentation\" aria-label=\"flag icon\"><\/i>\n#>   2\n#> <\/a>\n#> \n#> [[3]]\n#> <a href=\"#\" data-toggle=\"tab\" data-value=\"3\" class=\"nav-link\" data-target=\"#tab-2071-3\">\n#>   <i class=\"fa fa-flag\" role=\"presentation\" aria-label=\"flag icon\"><\/i>\n#>   3\n#> <\/a>\nui <- fluidPage(new_tabs$allTags())\nserver <- function(input, output, session) {}\nshinyApp(ui, server)"},{"path":"htmltools-overview.html","id":"htmtools-chain-queries","chapter":"2 Mastering {htmltools}","heading":"2.6.4 Chain tag queries","text":"One strength tagQuery() API ability chain methods, classic htmltools syntax might repetitive heavy. $resetSelected() allows reset tag selection root tag given operation, thereby making possible chain multiple queries different purposes. overall flow human readable step step approach, similarly tidyverse ggplot grammar. Let’s combine previous examples:","code":"\n# add fade class to all panels\ntagQuery(tabs)$\n  find(\".tab-pane\")$\n  addClass(\"fade\")$\n  removeClass(\"active\")$\n  filter(function(x, i) tagGetAttribute(x, \"data-value\") == 3)$\n  addClass(\"active\")$\n  resetSelected()$\n  # new operation: add icon before each nav link title\n  find(\"a\")$\n  prepend(icon(\"flag\"))$\n  # Here the next operation use the same target\n  # We don't need to reset the scope\n  removeClass(\"active\")$\n  # Select third nav link\n  filter(function(x, i) tagGetAttribute(x, \"data-value\") == 3)$\n  # Make it active\n  addClass(\"active\")$\n  allTags()#> <div class=\"tabbable\">\n#>   <ul class=\"nav nav-tabs\" data-tabsetid=\"2071\">\n#>     <li class=\"nav-item\">\n#>       <a href=\"#\" data-toggle=\"tab\" data-value=\"1\" class=\"nav-link\" data-target=\"#tab-2071-1\">\n#>         <i class=\"fa fa-flag\" role=\"presentation\" aria-label=\"flag icon\"><\/i>\n#>         1\n#>       <\/a>\n#>     <\/li>\n#>     <li class=\"nav-item\">\n#>       <a href=\"#\" data-toggle=\"tab\" data-value=\"2\" class=\"nav-link\" data-target=\"#tab-2071-2\">\n#>         <i class=\"fa fa-flag\" role=\"presentation\" aria-label=\"flag icon\"><\/i>\n#>         2\n#>       <\/a>\n#>     <\/li>\n#>     <li class=\"nav-item\">\n#>       <a href=\"#\" data-toggle=\"tab\" data-value=\"3\" class=\"nav-link active\" data-target=\"#tab-2071-3\">\n#>         <i class=\"fa fa-flag\" role=\"presentation\" aria-label=\"flag icon\"><\/i>\n#>         3\n#>       <\/a>\n#>     <\/li>\n#>   <\/ul>\n#>   <div class=\"tab-content\" data-tabsetid=\"2071\">\n#>     <div class=\"tab-pane fade\" data-value=\"1\" id=\"tab-2071-1\">Tab 1<\/div>\n#>     <div class=\"tab-pane fade\" data-value=\"2\" id=\"tab-2071-2\">Tab 2<\/div>\n#>     <div class=\"tab-pane fade active\" data-value=\"3\" id=\"tab-2071-3\">Tab 3<\/div>\n#>   <\/div>\n#> <\/div>"},{"path":"htmltools-overview.html","id":"specific-cases","chapter":"2 Mastering {htmltools}","heading":"2.6.5 Specific cases","text":"situations previous methods won’t work. want modify \ntabs content Tab tab . common mistake proceed follows:may think add text corresponding panel item methods like $append() $prepend() able add element(s) one multiple target(s). actually adds three new children selected panel. case content index specific, utilize $(). takes anonymous function input, two parameters, x tag current index. Inside function, may edit tag depending index return modified structure:","code":"\ntagQuery(tabs)$\n  find(\".tab-pane\")$\n  empty()$\n  append(lapply(1:3, function(i) paste(\"This is tab\", i)))#> [[1]]\n#> <div class=\"tab-pane active\" data-value=\"1\" id=\"tab-2071-1\">\n#>   This is tab 1\n#>   This is tab 2\n#>   This is tab 3\n#> <\/div>\n#> \n#> [[2]]\n#> <div class=\"tab-pane\" data-value=\"2\" id=\"tab-2071-2\">\n#>   This is tab 1\n#>   This is tab 2\n#>   This is tab 3\n#> <\/div>\n#> \n#> [[3]]\n#> <div class=\"tab-pane\" data-value=\"3\" id=\"tab-2071-3\">\n#>   This is tab 1\n#>   This is tab 2\n#>   This is tab 3\n#> <\/div>\ntagQuery(tabs)$\n  find(\".tab-pane\")$\n  empty()$\n  each(function(x, i) {\n    # replace text\n    x <- tagAppendChildren(x, paste(\"This is tab\", i))\n    # return edited tag\n    x\n  })#> [[1]]\n#> <div class=\"tab-pane active\" data-value=\"1\" id=\"tab-2071-1\">This is tab 1<\/div>\n#> \n#> [[2]]\n#> <div class=\"tab-pane\" data-value=\"2\" id=\"tab-2071-2\">This is tab 2<\/div>\n#> \n#> [[3]]\n#> <div class=\"tab-pane\" data-value=\"3\" id=\"tab-2071-3\">This is tab 3<\/div>"},{"path":"htmltools-overview.html","id":"htmltools-shinyRPG-rework","chapter":"2 Mastering {htmltools}","heading":"2.6.6 Practice","text":"Let’s rewrite shinyRPG select (see 2.5.2) input using new tagQuery() API. reminder, function given .1. new approach described leverages almost tagQuery() API tools. first remove outer div class label class $removeAttrs(). two steps don’t need reset since label child outer div. next step, targeting select element requires use $siblings() catch div parent followed $children(), capture select (interestingly, also reset selection $resetSelected() apply $find()). add custom class $addClass(). finally go back parent outer div $resetSelected() apply $() replace inner div children.complete code may found .1.2.","code":"\ntagQuery(selectTag)$\n  removeAttrs(\"class\")$ # remove outer div class\n  find(\".control-label\")$\n  removeAttrs(\"class\")$ # remove class from child label\n  siblings()$ # go down to the div \n  children()$ # go down to the select tag\n  addClass(selectClass)$ # add class to child select\n  resetSelected()$# go back to div parent\n  each(function(x, i) {\n    x$children[[2]] <- x$children[[2]]$children\n  })$ # replace div parent \n  allTags()"},{"path":"htmltools-overview.html","id":"alter-tag-rendering-with-render-hooks","chapter":"2 Mastering {htmltools}","heading":"2.6.7 Alter tag rendering with render hooks","text":"","code":""},{"path":"htmltools-overview.html","id":"simple-hooks","chapter":"2 Mastering {htmltools}","heading":"2.6.7.1 Simple hooks","text":"section, ’ll see probably one advanced htmltools feature, recently introduced 0.5.2. conditionally render tag, instance depending different conditions like external options, specific theme version, …?Assume want design development specific tags, appear Shiny dev mode:create custom tag .renderHook parameter available htmltools tag element, providing special function, namely __ render hook__, called upon tag rendering:Note tag already existing hook, tagAddRenderHook() adds another hook current list. option controls whether erase existing hooks (replace).hooks list accessible :convenient remove edit hooks. Figure 2.9 summarizes main mechanisms.\nFIGURE 2.9: Alter tags rendering: htmltools hooks.\nLet’s try Shiny app dev mode enabled:disable dev mode:result shown Figure 2.10.\nFIGURE 2.10: tagAddRenderHook action. Left: Shiny dev mode enabled; right: Shiny dev mode disabled.\nChapter 9.3.3 ’ll discuss another use case, theme-dependent rendering, instance, render tag differently whether Shiny Bootstrap 3 Bootstrap 4 mode.","code":"\ndevmode(TRUE)\ngetOption(\"shiny.devmode\")#> [1] TRUE\ncssStyle <- \"color:red; border-style:dashed; border-color:blue;\"\ncustomTag <- span(\"\", .renderHook = function(x) {\n  if (getOption(\"shiny.devmode\")) {\n    tagAppendAttributes(x, style = cssStyle)\n  } \n})\n\ncustomTag#> <span style=\"color:red; border-style:dashed; border-color:blue;\"><\/span>\ncustomTag <- tagAddRenderHook(customTag, function(x) {\n  if (getOption(\"shiny.devmode\")) {\n    tagAppendChildren(x, \"UNDER REWORK\")\n  } \n})\ncustomTag$.renderHooks#> [[1]]\n#> function(x) {\n#>   if (getOption(\"shiny.devmode\")) {\n#>     tagAppendAttributes(x, style = cssStyle)\n#>   } \n#> }\n#> \n#> [[2]]\n#> function(x) {\n#>   if (getOption(\"shiny.devmode\")) {\n#>     tagAppendChildren(x, \"UNDER REWORK\")\n#>   } \n#> }\n# Remove first hook\n# customTag$.renderHooks[[1]] <- NULL\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(customTag),\n    mainPanel(customTag)\n  )\n)\nserver <- function(input, output, session) {}\nshinyApp(ui, server)\ndevmode(devmode = FALSE)\ngetOption(\"shiny.devmode\")\nshinyApp(ui, server)"},{"path":"htmltools-overview.html","id":"htmltools-nested-renderhooks","chapter":"2 Mastering {htmltools}","heading":"2.6.7.2 Nested hooks","text":"practice, rarely one render hook handle. Shiny elements composed\nmain wrappers nested tags. instance, nav elements like tabsetPanel() tabPanel() , , perfect example.handle render hooks nested elements? Let’s see simple example.\nfirst consider main wrapper, namely my_wrapper_tag(). function creates single div wrapper inside included items, generated another function. render hook, simulate impact \ntheme_version option. capture passed items list apply tagQuery() edit given\nelement targeted specific class, using $() loop items add id attribute. store query result new item variable replace old items newly generated ones main wrapper $empty() $append(). Note commented row, discuss later.next step design nested item function. tag consists \nsimple div element class. render hook, get theme version\ndepending result, add child item $append().\nNote new-child class. one targeted one level upper my_wrapper_tag().test :code seem work expected since child items get new id attribute,\ncontrary specified my_wrapper_tag() render hook. problem ?basically resolve issue. top level render hook, newly added item yet available. check , can put browser() just tagQuery() flow inside my_wrapper_tag():run tagQuery(items)$find(\".new-child\") capture output:see, tagQuery() manage find newly inserted element new-child class lower level render hook. inspect str(items[[1]]):get confirmation child item available htmltools, even appears code output:workaround manually resolve sub items .tags(), converts\narbitrary element part tag structure. Therefore, uncomment items <- lapply(items, .tags) my_wrapper_tag(), obtain:confirming structure now correctly processed. Running my_wrapper_tag(my_nested_tag(), my_nested_tag()) yields:exactly want! real life case study available later book section 9.3.3.3.","code":"\nmy_wrapper_tag <- function(...) {\n  wrapper <- tags$div(class = \"parent\", ...)\n  items <- list(...)\n  \n  tagAddRenderHook(wrapper, function(x) {\n    version <- getOption(\"theme_version\")\n    if (!is.null(version)) {\n      if (version == \"4\") {\n        # resolve sub items\n        # items <- lapply(items, as.tags)\n        # INSERT BROWSER TO DEBUG\n        new_items <- tagQuery(items)$\n          find(\".new-child\")$\n          each(function(x, i) {\n            tagAppendAttributes(x, id = i)\n          })$\n          allTags()\n        \n        x <- tagQuery(x)$\n          # replace accordion items processed above\n          empty()$\n          append(new_items)$\n          allTags()\n      } \n    }\n    x\n  })\n}\nmy_nested_tag <- function() {\n  wrapper <- tags$div(class = \"nested\")\n  \n  tagAddRenderHook(wrapper, function(x) {\n    version <- getOption(\"theme_version\")\n    if (!is.null(version)) {\n      x <- if (version == \"4\") {\n        new_child <- tags$div(class = \"new-child\")\n        \n        tagQuery(x)$\n          append(new_child)$\n          allTags()\n      } \n    }\n    x\n  })\n}\n# Define external option to mimic arbitrary change\noptions(\"theme_version\" = \"4\")\nmy_wrapper_tag(my_nested_tag(), my_nested_tag())#> <div class=\"parent\">\n#>   <div class=\"nested\">\n#>     <div class=\"new-child\"><\/div>\n#>   <\/div>\n#>   <div class=\"nested\">\n#>     <div class=\"new-child\"><\/div>\n#>   <\/div>\n#> <\/div>\nmy_wrapper_tag <- function(...) {\n  # start\n  # ...\n  \n  # TO DEBUG\n  browser()\n  \n  new_items <- tagQuery(items)$\n    find(\".new-child\")$\n    each(function(x, i) {\n      tagAppendAttributes(x, id = i)\n    })$\n    allTags()\n  \n  # ...\n  # end\n}`$allTags()`:\n<div class=\"nested\">\n  <div class=\"new-child\"><\/div>\n<\/div>\n<div class=\"nested\">\n  <div class=\"new-child\"><\/div>\n<\/div>\n\n`$selectedTags()`: (Empty selection)# str(items[[1]])\nList of 4\n $ name        : chr \"div\"\n $ attribs     :List of 1\n  ..$ class: chr \"nested\"\n $ children    : list()\n $ .renderHooks:List of 1\n  ..$ :function (x)  \n  .. ..- attr(*, \"srcref\")= 'srcref' \n  int [1:8] 4 31 20 5 31 5 4 20\n  .. .. ..- attr(*, \"srcfile\")=Classes 'srcfilecopy', \n  'srcfile' <environment: 0x7fcbf889aba8> \n - attr(*, \"class\")= chr \"shiny.tag\"<!-- items[[1]] -->\n<div class=\"nested\">\n  <div class=\"new-child\"><\/div>\n<\/div># str(items[[1]])\nList of 4\n $ name        : chr \"div\"\n $ attribs     :List of 1\n  ..$ class: chr \"nested\"\n $ children    :List of 1\n  ..$ :List of 3\n  .. ..$ name    : chr \"div\"\n  .. ..$ attribs :List of 1\n  .. .. ..$ class: chr \"new-child\"\n  .. ..$ children: list()\n  .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n $ .renderHooks: list()\n - attr(*, \"class\")= chr \"shiny.tag\"<!-- RUN: my_wrapper_tag(my_nested_tag(), my_nested_tag()) -->\n\n<div class=\"parent\">\n  <div class=\"nested\">\n    <div class=\"new-child\" id=\"1\"><\/div>\n  <\/div>\n  <div class=\"nested\">\n    <div class=\"new-child\" id=\"2\"><\/div>\n  <\/div>\n<\/div>"},{"path":"web-dependencies.html","id":"web-dependencies","chapter":"3 Discover Shiny dependencies","heading":"3 Discover Shiny dependencies","text":"","code":""},{"path":"web-dependencies.html","id":"introduction","chapter":"3 Discover Shiny dependencies","heading":"3.1 Introduction","text":"Shiny creates HTML code us, enough design beautiful working app user interactions. shown earlier, modern websites apps lot CSS JavaScript hood. Let’s explore elements following exercise.simplest Shiny layout fluidPage(). shinyapp predefined RStudio snippet creates basic app skeleton (type shinyapp new script console RStudio IDE, Figure 3.1).\nFIGURE 3.1: shinyapp code snippet\nadd text inside remove session parameter server function, \ndon’t need :first glance, page contains text. Wait … sure ? Let’s run example open HTML inspector introduced 1.3. Results displayed Figure 3.2.\nFIGURE 3.2: Shiny dependencies ({shiny} 1.6.0)\nClick “Open Browser”.Open HTML inspector.Locate <head> tag.Uncollapse search script containing application/html-dependencies.List dependencies.According head section (delimited <head><\/head>), Shiny three main dependencies:jQuery.shiny (custom JavaScript CSS).Bootstrap (JavaScript CSS).shiny 1.6.0, json2 needed anymore appear list.","code":"\nlibrary(shiny)\nui <- fluidPage(\n  p(\"Hello World\")\n)\n\nserver <- function(input, output) {}\nshinyApp(ui, server)"},{"path":"web-dependencies.html","id":"bootstrap","chapter":"3 Discover Shiny dependencies","heading":"3.2 Bootstrap","text":"According gitstar ranking, unofficial GitHub star ranking website, Bootstrap comes 7th place (144563 stars) 22th place repositories organization, respectively. first released 2011 welcome fifth version months. provides plug play layout interactive elements tabs, navigation bars, tooltips, popovers many input (forms), rather convenient since avoids writing large amount CSS/JavaScript bring complexity. first release Shiny shipped Bootstrap 2. Shiny currently relies Bootstrap 3 since v0.11, lot efforts made provide Bootstrap 4 compatibility, essentially bslib R package.One great advantage using Bootstrap responsiveness design can work either desktop mobile, even though advanced user likely prefer specialized libraries like Framework7 onsenUI develop native looking apps, shown Chapter 23.Bootstrap 3 relies grid layout system allows efficiently organize content row columns. instance fluidRow() column() Shiny functions leverage Bootstrap grid control elements displayed page.Shiny attach Bootstrap dependencies? well known fluidPage() layout actually hiding lower level function, bootstrapPage(). latter also called many high level layout functions instance fixedPage(), fillPage() navbarPage(). simply attaches bootstraplib well Bootstrap compatible theme css files one can pass shinythemes package.shiny 1.6.0 end user use new theming tools, bslib, described chapter 9.interested reader look following script.","code":""},{"path":"web-dependencies.html","id":"jquery-dom-manipulation","chapter":"3 Discover Shiny dependencies","heading":"3.3 jQuery, DOM manipulation","text":"jQuery allows perform DOM manipulation, interacting HMTL elements, user-friendly manner pure JavaScript. step, might familiar JavaScript jQuery. Don’t worry! Chapter 10 exposes basics. comparison select button HTML element technologies. sure ’ll notice jQuery1 intuitive JavaScript.Javascript:jQuery:Interestingly, {jquerylib} provides support shiny shipping necessary content. Nowadays, many websites frameworks (like Bootstrap 5) tend avoid jQuery gain performance. Yet, Shiny’s JS code still use won’t removed time soon.","code":"// select the button\nvar btn = document.getElementById('mybutton');\n// event\nbtn.addEventListener('click', function() {\n  alert('You clicked me!'); // action\n});$('#mybutton').on('click', function() {\n  alert('You clicked me!');\n});"},{"path":"web-dependencies.html","id":"custom-dependencies","chapter":"3 Discover Shiny dependencies","heading":"3.4 Custom dependencies","text":"last dependency contains custom JS CSS code necessary Shiny work, :Fine tune layout.Register input/output handle every single input/output action. Detailed mechanisms \nstudied Chapter 12 13.Initialize control R/JS communication, shown Chapter 11.2.1.Handle alerts/modals/notifications.…Chapters 10.6.3, 12, 15 20 showcase important elements custom files.","code":""},{"path":"web-dependencies.html","id":"exercise","chapter":"3 Discover Shiny dependencies","heading":"3.5 Exercise","text":"following exercise, consider slightly complex app slider well plot output.Run app runExample(\"01_hello\").Open HTML inspector.Delete bootstrap.min.css ion.rangeSlider.cssdependencies\nremoving corresponding DOM element.happened application’s UI?sum , libraries necessary make Shiny ! Importantly, Shiny loads necessary . instance, shown , necessary include slider dependencies least one slider app, eventually improves app performances.Chapter 4, explore tools manage HTML dependencies. Chapters 20.4.1 15, study special case insert dependencies runtime.","code":""},{"path":"htmltools-dependencies.html","id":"htmltools-dependencies","chapter":"4 Dependency utilities","heading":"4 Dependency utilities","text":"creating new template, import custom HTML dependencies available shiny. Fortunately, problem htmltools (Cheng, Sievert, et al. 2021)!","code":""},{"path":"htmltools-dependencies.html","id":"the-dirty-approach","chapter":"4 Dependency utilities","heading":"4.1 The dirty approach","text":"Let’s consider following example. Since Bootstrap one popular HTML/CSS/JS framework develop websites web apps, want include Bootstrap 4 card shiny app. case study taken RStudio Community question. naive approach include HTML code directly app code. approach dirty since easily re-usable others. my_card() creates card structure:Shiny app example:\nFIGURE 4.1: Attempt display Bootstrap 4 card without dependencies\ndepicted Figure 4.1, nothing displayed expected since shiny (Chang et al. 2021) contain Bootstrap 4 dependencies. Don’t panic! load necessary css display card (required, include javascript well). use either includeCSS(), tags$head(tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"custom.css\")), described shiny documentation . Web development best practice recommend point external file rather including CSS head inline CSS (see chapter 6). example, use CDN (content delivery network) local file www/ folder:card may seem ugly least displayed shown Figure 4.2.\nFIGURE 4.2: Bootstrap 4 card within simple app\n","code":"\nlibrary(shiny)\n# we create the card function before\nmy_card <- function(...) {\n  withTags(\n    div(\n      class = \"card border-success mb-3\",\n      div(class = \"card-header bg-transparent border-success\"),\n      div(\n        class = \"card-body text-success\",\n        h3(class = \"card-title\", \"title\"),\n        p(class = \"card-text\", ...)\n      ),\n      div(\n        class = \"card-footer bg-transparent border-success\",\n        \"footer\"\n      )\n    )\n  )\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"htmltools/deps/card/ex1\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\nlibrary(OSUICode)\n\nshinyApp(\n  ui = fluidPage(\n    fluidRow(\n      column(\n        width = 6,\n        align = \"center\",\n        br(),\n        my_card(\"Card Content\")\n      )\n    )\n  ),\n  server = function(input, output) {}\n)\n### RUN ### \n# OSUICode::run_example( \n#  \"htmltools/deps/card/ex2\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\nlibrary(OSUICode)\n\nbs4_cdn <- \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/\"\nbs4_css <- paste0(bs4_cdn, \"css/bootstrap.min.css\")\n\nshinyApp(\n  ui = fluidPage(\n    # load the css code\n    tags$head(\n      tags$link(\n        rel = \"stylesheet\",\n        type = \"text/css\",\n        href = bs4_css\n      )\n    ),\n    fluidRow(\n      column(\n        width = 6,\n        align = \"center\",\n        br(),\n        my_card(\"Card Content\")\n      )\n    )\n  ),\n  server = function(input, output) {}\n)"},{"path":"htmltools-dependencies.html","id":"the-clean-approach","chapter":"4 Dependency utilities","heading":"4.2 The clean approach","text":"best approach consists leveraging htmlDependency() attachDependencies() functions htmltools.\nhtmlDependency() takes following main parameters:name.version (useful remember version built upon).path dependency (can CDN local folder).script stylesheet respectively pass css scripts.pointing CDN use local files, crucial wrap newly created dependency function since path determined run time package builds. means developing package dependencies, forgetting step might prevent users get dependency working machine (differences Unix Windows OS paths clearly good example).create card tag give Bootstrap 4 dependency attachDependencies() function.recent version htmltools, may simply use tagList(tag, deps) instead. Importantly, attachDependencies() append parameter FALSE default. Ensure set TRUE want keep already attached dependencies!finally run app:approach, can develop package custom dependencies people\nuse need add custom elements shiny.","code":"\n# handle dependency\nbs4_cdn <- \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/\"\nbs4_card_dep <- function() {\n  htmlDependency(\n    name = \"bs4_card\",\n    version = \"1.0\",\n    src = c(href = bs4_cdn),\n    stylesheet = \"css/bootstrap.min.css\"\n  )\n}\n# create the card\nmy_card <- function(...) {\n  cardTag <- my_card(...)\n\n  # attach dependencies (old way)\n  # htmltools::attachDependencies(cardTag, bs4_card_dep())\n\n  # simpler way\n  tagList(cardTag, bs4_card_dep())\n\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"htmltools/deps/card/ex3\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\nlibrary(OSUICode)\n\nui <- fluidPage(\n  title = \"Hello Shiny!\",\n  fluidRow(\n    column(\n      width = 6,\n      align = \"center\",\n      br(),\n      my_card_with_deps(\"Card Content\")\n    )\n  )\n)\n\nshinyApp(ui, server = function(input, output) { })"},{"path":"htmltools-dependencies.html","id":"htmldeps-import","chapter":"4 Dependency utilities","heading":"4.3 Importing HTML dependencies from other packages","text":"shinydashboard (Chang Borges Ribeiro 2018) package helps design dashboards shiny. following, like integrate box component classic Shiny App (without dashboard layout). However, try include box tag, notice nothing displayed since shiny shinydashboard dependencies. htmltools contains function, namely findDependencies() looks dependencies attached tag. going , let’s define basic dashboard skeleton:numerous details associated shinydashboard go .\ninterested learning , please check package website. key point main wrapper function dashboardPage(). fluidPage() another wrapper function already familiar . apply findDependencies() dashboard_ui:space reasons, printed first dependency output dashboard_deps list containing four dependencies:Font Awesome handles icons. Interestingly, dependency provided dashboardHeader, especially shiny::icon(\"bars\") collapses left sidebar.Bootstrap main HTML/CSS/JS template. Importantly,\nplease note version 3.3.7, whereas current 4.5.2.AdminLTE dependency containing HTML/CSS/JS related admin template.\nclosely linked Bootstrap 3.shinydashboard, CSS javascript necessary dashboard work properly. practice,\nintegrating custom HTML templates shiny usually work box many reasons modifications necessary. instance, list changes optimize AdminLTE shiny. major consequences template maintenance upgrading another AdminLTE version require modify elements hand. may understand template maintainers quite often reluctant upgrade dependencies might brake whole package, quite easily., attach dependencies box() tagList(), shown . Notice custom box() contain parameters official shinydashboard version, actually ok time. better contrast body, add custom color background,\ndepicted Figure 4.3:\nFIGURE 4.3: AdminLTE2 box inside classic shiny app\nnow limitless possibilities! Interestingly, approach basis shinyWidgets useBs4Dash() function related tools.","code":"\nlibrary(shinydashboard)\ndashboard_ui <- dashboardPage(\n  dashboardHeader(),\n  dashboardSidebar(),\n  dashboardBody()\n)\nlibrary(htmltools)\ndashboard_deps <- findDependencies(dashboard_ui)\ndashboard_deps[[1]]#> List of 10\n#>  $ name      : chr \"font-awesome\"\n#>  $ version   : chr \"5.13.0\"\n#>  $ src       :List of 1\n#>   ..$ file: chr \"www/shared/fontawesome\"\n#>  $ meta      : NULL\n#>  $ script    : NULL\n#>  $ stylesheet: chr [1:2] \"css/all.min.css\" \"css/v4-shims.min.css\"\n#>  $ head      : NULL\n#>  $ attachment: NULL\n#>  $ package   : chr \"shiny\"\n#>  $ all_files : logi TRUE\n#>  - attr(*, \"class\")= chr \"html_dependency\"\nmy_dashboard_box <- function(title, status) {\n  tagList(\n    box(title = title, status = status), \n    dashboard_deps\n  )\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"htmltools/deps/dashboard\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\nlibrary(OSUICode)\n\nui <- fluidPage(\n  tags$style(\"body { background-color: gainsboro; }\"),\n  titlePanel(\"Shiny with a box\"),\n  my_dashboard_box(title = \"My box\", status = \"danger\"),\n)\nserver <- function(input, output) {}\nshinyApp(ui, server)"},{"path":"htmltools-dependencies.html","id":"suppress-dependencies","chapter":"4 Dependency utilities","heading":"4.4 Suppress dependencies","text":"rare cases, may need remove existing conflicting dependency. suppressDependencies() function allows users perform task. instance, shiny.semantic built top \nsemantic ui compatible Bootstrap, latter dropped list, illustrated Figure 4.4.\nFIGURE 4.4: Deletion Bootstrap inside semanticPage\n, remove AdminLTE2 dependency\nshinydashboard page nothing displayed (expected):","code":"\n### RUN ### \n# OSUICode::run_example( \n#  \"htmltools/deps/remove-deps\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\nlibrary(shinydashboard)\n\nshinyApp(\n  ui = dashboardPage(\n    dashboardHeader(),\n    dashboardSidebar(),\n    dashboardBody(suppressDependencies(\"AdminLTE\")),\n    title = \"Dashboard example\"\n  ),\n  server = function(input, output) { }\n)"},{"path":"htmltools-dependencies.html","id":"resolve-dependencies","chapter":"4 Dependency utilities","heading":"4.5 Resolve dependencies","text":"Imagine situation like use last version Font Awesome icons, currently 5.15.1 according jsdelivr. recall shiny already provides version 5.13.0 icon() function. Including another version probably cause conflicts like avoid case. htmltools resolveDependencies() tool removes redundant dependencies, keeping dependency higher version names identical:Combining findDependencies(), suppressDependencies() resolveDependencies() gives great power successfully manage dependencies!","code":"\njsdelivr_cdn <- \"https://cdn.jsdelivr.net/npm/@fortawesome/\"\nft_aws <- paste0(jsdelivr_cdn, \"fontawesome-free@5.15.1/\")\nnew_icon_dep <- htmlDependency(\n  name = \"font-awesome\",\n  version = \"5.15.1\",\n  src = c(href = ft_aws),\n  stylesheet = \"css/all.min.css\"\n)\n\nicon_deps <- list(\n  new_icon_dep,\n  findDependencies(shiny::icon(\"th\"))[[1]]\n)\n\nresolveDependencies(icon_deps)#> [[1]]\n#> List of 10\n#>  $ name      : chr \"font-awesome\"\n#>  $ version   : chr \"5.15.1\"\n#>  $ src       :List of 1\n#>   ..$ href: chr \"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.1/\"\n#>  $ meta      : NULL\n#>  $ script    : NULL\n#>  $ stylesheet: chr \"css/all.min.css\"\n#>  $ head      : NULL\n#>  $ attachment: NULL\n#>  $ package   : NULL\n#>  $ all_files : logi TRUE\n#>  - attr(*, \"class\")= chr \"html_dependency\""},{"path":"htmltools-dependencies.html","id":"insert-custom-script-in-the-head","chapter":"4 Dependency utilities","heading":"4.6 Insert Custom script in the head","text":"shinydashboardPlus, users can fine tune dashboard behavior simple option parameter passed dashboardPage(). sidebarExpandOnHover capability, consists expanding sidebar hovering , part options, yet exposed shinydashboard. hood, options gathered list, converted JSON eventually generate JavaScript configuration file. now, saw two ways include scripts stylesheets. include arbitrary script (defined fly user app starts) dependency?htmlDependency() head parameter allowing pass lines HTML insert document head. can easily imagine giving string containing script. , first construct options list. , create dependency: notice since src mandatory, give value use script stylesheet arguments.invite reader run example involving shinydashboardPlus, open HTML inspector look head.According AdminLTE documentation, global options must passed loading app.min.js script. Creating “dummy” dependency allowed us , shown Figure 4.5.\nFIGURE 4.5: Insert arbitrary script head\n","code":"\noptions <- list(\n  sidebarExpandOnHover = TRUE,\n  boxWidgetSelectors = list(\n    remove = '[data-widget=\"remove\"]'\n  )\n)\n\nconfig_script <- function(options) {\n  htmlDependency(\n    \"options\",\n    as.character(utils::packageVersion(\"shinydashboardPlus\")),\n    src = c(file = system.file(\n      \"shinydashboardPlus-2.0.0\",\n      package = \"shinydashboardPlus\")\n    ),\n    head = if (!is.null(options)) {\n      paste0(\n        \"<script>var AdminLTEOptions = \",\n        jsonlite::toJSON(\n          options,\n          auto_unbox = TRUE,\n          pretty = TRUE\n        ),\n        \";<\/script>\"\n      )\n    }\n  )\n}\n\n# show the script\nprint(HTML(config_script(options)$head))#> <script>var AdminLTEOptions = {\n#>   \"sidebarExpandOnHover\": true,\n#>   \"boxWidgetSelectors\": {\n#>     \"remove\": \"[data-widget=\\\"remove\\\"]\"\n#>   }\n#> };<\/script>\n### RUN ### \n# OSUICode::run_example( \n#  \"htmltools/deps/custom\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(shinydashboardPlus)\n\noptions <- list(\n  sidebarExpandOnHover = TRUE,\n  boxWidgetSelectors = list(\n    remove = '[data-widget=\"remove\"]'\n  )\n)\n\nshinyApp(\n  ui = dashboardPage(\n    options = options,\n    header = dashboardHeader(),\n    sidebar = dashboardSidebar(),\n    body = dashboardBody(),\n    controlbar = dashboardControlbar(),\n    title = \"DashboardPage\"\n  ),\n  server = function(input, output) { }\n)"},{"path":"web-applications.html","id":"web-applications","chapter":"5 Web application concepts","heading":"5 Web application concepts","text":"chapter, discuss fundamental concepts underlying web applications, like client-server model,\nHTTP protocol web servers, showing Shiny integrates system differences\nclassic web standards. chapter may significantly ease understanding part 3.","code":""},{"path":"web-applications.html","id":"the-client-server-model","chapter":"5 Web application concepts","heading":"5.1 The client-server model","text":"Shiny app web application like web applications,\nfollows server-client model consists :client sends requests server network.server composed hardware software elements treats client request.network inside flow requests server client. done\nHyperText Transfer protocol (HTTP).time client sends request, processed server, provides answer closes connection,\ntreating request. practice, get web page, client emits many requests, one get page one request per JS/CSS/image assets. example, try run following R console open developer tools:network tab, notice many files (nothing shown, reload web browser tab), actually correspond requests made client server, Figure 5.1. also get current answer status, 200 OK HTTP status, size time needed treat request. Nowadays, exists mechanisms like web browser caching speed request treatment. Don’t believe time visit shiny app, requests answered server. Actually, assets recovered web browser cache, takes significantly less time, although sometimes misleading. sure already found situation , updating shiny app style, still get old design. time caching issue resetting Chrome’s cache solves problem.\nFIGURE 5.1: Request flow client server shiny app start.\n","code":"\nlibrary(shiny)\nui <- fluidPage()\nserver <- function(input, output, session) {}\nshinyApp(ui, server)"},{"path":"web-applications.html","id":"web-applications-http","chapter":"5 Web application concepts","heading":"5.2 About HTTP requests","text":"inspect first request Figure 5.1, obtain Figure 5.2. HTTP request composed :method indicates intentions.\nmostly use GET ask something POST, submit something.url, corresponding path targeted element. , nothing specified path, server try get main HTML page, also called index.html.\nFIGURE 5.2: Details HTTP request\nHTTP protocol unidirectional, , may see phone call \nallowed one question, thereby terminating call.httr (Wickham 2020) allows HTTP request directly R like:","code":"\nlibrary(httr)\nres <- GET(\"https://www.google.com\")"},{"path":"web-applications.html","id":"structure-of-an-url","chapter":"5 Web application concepts","heading":"5.3 Structure of an URL","text":"url (uniform resource locator) defines unique location content access server. general structure \nfollowing:PROTOCOL (scheme) communication protocol, HTTP HTTPS (encrypted HTTP). HOST IP adress domain name, may bought. instance google.com owned domain name. PORT indicates program use access specified resources (80 443 default HTTP HTTPS values, respectively). PATH location resource server. instance, run basic Shiny app enter http://127.0.0.1:<PORT>/shared/jquery.min.js (replace PORT value), ’ll see jQuery.min.js code, actually needed Shiny. QUERY place add extra parameters, following key/value notation like ?key1=value1&.... Shiny app, query parameters may retrieved parseQueryString() altered updateQueryString().","code":"<PROTOCOL>://<HOST>:<PORT>/<PATH>?<QUERY>#<ANCHOR>"},{"path":"web-applications.html","id":"web-app-file-structure","chapter":"5 Web application concepts","heading":"5.4 Web app files structure","text":"substantial differences Shiny classic web applications regarding project file structure.\nweb applications composed least index.html file, well optional\npages assets (extra CSS JS files, images), don’t exactly find file structure Shiny.\nbasic Shiny app folder mostly composed :app.R ui.R/server.RA www folder containing assets like JS, CSS, images.index.html file? actually created fly run shinyApp(). detailed processes \nmentioned later chapter.","code":""},{"path":"web-applications.html","id":"serving-web-apps","chapter":"5 Web application concepts","heading":"5.5 Serving web apps","text":"order expose app rest world, host somewhere, web server.\nserver actually corresponds :hardware layer, namely machine virtual machine able run programs. servers running\nLinux. actually pretty straightforward set server thanks many solutions like digitalocean amazon web service, also known (AWS).software layer, programs necessary treat client requests. probably know Apache nginx, common solutions.Shiny app served? Shiny context, need software able run R scripts, thereby preventing us relying classic hosting strategies. RStudio developed multiple solutions, famous likely shiny server:Shiny server open source.Shiny server pro.RStudio Connect.shinyapps.io.can see Shiny server improved web server. Indeed, addition run Rmd documents (R markdown) shiny apps, able interpret classic HTML files. excellent guide developed Dean Attali set server available .Another noticeable difference web servers shiny server running port, default 3838 latter (instead classic 80), although entirely customizable configuration file.","code":""},{"path":"web-applications.html","id":"about-httpuv","chapter":"5 Web application concepts","heading":"5.6 About {httpuv}","text":"addition shiny server layer, able run R code start app server result user request, Shiny relies httpuv (Cheng Chang 2021) fires web server app directly R, making possible handle HTTP requests also R JS communication, covered later chapter 11.","code":""},{"path":"web-applications.html","id":"shiny-app-lifecycle","chapter":"5 Web application concepts","heading":"5.7 Shiny app lifecycle","text":"Whenever user (client) accesses shiny app web browser, series events occurs (Figure 5.3):client sends HTTP CONNECT request server (Shiny server) containing path\ntargeted app.shiny server starts targeted app runApp().hood, runApp():Calls shinyApp() returns shiny app object composed server function UI.\nUI formatted function returning HTTP response, requested httpuv. Section 5.7.1 explains process details.Calls startApp creates HTTP websocket (WS) handlers. WS handlers responsible controlling WS behavior app starts, message received client app closes. WS necessary allow communication R JS, shown Chapter 11.Calls startServer httpuv, starts HTTP server opens server websocket connection.R code contain errors, server returns Shiny UI HTML code client.HTML code received interpreted client web browser.HTML page rendered. exact mirror initially provided ui.R code.\nFIGURE 5.3: Shiny App lifecycle\nreturned HTML contains necessary JavaScript subsequently open client websocket connection start dialog R JS. discussed Chapter 11.","code":""},{"path":"web-applications.html","id":"build-shiny-ui","chapter":"5 Web application concepts","heading":"5.7.1 Building the UI","text":"stated 5.4, Shiny app file structure follow web development standards. Particularly, index.html file.definitely makes Shiny wonderful ability write R code produce HTML. Although convenient R users, moment R code become HTML, since web browsers just able process R files.Shiny must provide string containing HTML code later given httpuv server displayed end user, request successful. Moreover, must valid HTML template, shown chapter 1.3.3, case use top level UI shiny function like fluidPage():output, miss <!DOCTYPE html> indicating web browser \ndocument HTML load appropriate interpreter. Additionally, html, head body \nprovided fluidPage().Shiny create appropriate HTML template? steps heavily relies htmltools, particularly renderDocument() function. documented chapter 2, ’s mainly , theory, quite unlikely ’ll ever use functions, unless try develop another web framework R, built top httpuv, like {ambriorix} {fiery}. Another use case argonR allows design Bootstrap 4 HTML templates, top argon design system.hood, shinyApp() many things, particularly creating valid HTTP response template httpuv, internal shiny:::uiHttpHandler function.2 conversion R HTML achieved shiny:::renderPage. First, provided UI R code wrapped tags$body(), yet done. reminder fluidPage create body tag, required produce valid HTML template. result given htmlTemplate() fill following boilerplate, part Shiny package:assume UI built follows, applying htmlTemplate() yields:output shown (body content cropped space reasons):may wonder headContent() . inserts string <!-- HEAD_CONTENT --> inside head tag \nshiny knows insert dependencies, mandatory JS CSS assets. , necessary dependencies like jQuery, Bootstrap shiny css/javascript files (shiny:::shinyDependencies) added UI head renderDocument(). renderDocument() three steps process:Convert R shiny tags HTML renderTags(). tag, renderTags() returns list \nfour elements: head content, singletons, list dependencies HTML string.Treat dependencies resolveDependencies() remove conflicts, shown Chapter 4.5.Process dependencies createWebDependency(), make sure dependency can served HTTP.Convert dependencies R code HTML renderDependencies() insert \ntemplate head, replacing <!-- HEAD_CONTENT --> string.instance, call renderTags() shiny icon():renderDependencies() tag dependency:Let’s apply renderDocument() previous template:final HTML output shown (body content cropped save space).\nLook head tag dependencies correctly inserted.final step return HTTP response containing HTML string. shiny 1.6.0, httpResponse function exported default:","code":"\nfluidPage(p())#> <div class=\"container-fluid\">\n#>   <p><\/p>\n#> <\/div><!DOCTYPE html>\n<html{{ if (isTRUE(nzchar(lang))) paste0(\" lang=\\\"\", lang, \"\\\"\") }}>\n  <head>\n  {{ headContent() }}\n  <\/head>\n  {{ body }}\n<\/html>\nui <- fluidPage(\n  textInput(\"caption\", \"Caption\", \"Data Summary\"),\n  verbatimTextOutput(\"value\")\n)\n\nui <- htmlTemplate(\n  system.file(\"template\", \"default.html\", package = \"shiny\"), \n  lang = \"en\", \n  body = tags$body(ui), \n  document_ = TRUE\n)<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <!-- HEAD_CONTENT -->\n  <\/head>\n  <body>\n    <div class=\"container-fluid\">\n      <!-- Body content -->\n    <\/div>\n  <\/body>\n<\/html>\nlibrary(htmltools)\nres <- renderTags(icon(\"cogs\"))\nstr(res)#> List of 4\n#>  $ head        : 'html' chr \"\"\n#>   ..- attr(*, \"html\")= logi TRUE\n#>  $ singletons  : chr(0) \n#>  $ dependencies:List of 1\n#>   ..$ :List of 9\n#>   .. ..$ name      : chr \"font-awesome\"\n#>   .. ..$ version   : chr \"5.13.0\"\n#>   .. ..$ src       :List of 1\n#>   .. .. ..$ file: chr \"/Library/Frameworks/R.framework/Versions/3.6/Resources/library/shiny/www/shared/fontawesome\"\n#>   .. ..$ meta      : NULL\n#>   .. ..$ script    : NULL\n#>   .. ..$ stylesheet: chr [1:2] \"css/all.min.css\" \"css/v4-shims.min.css\"\n#>   .. ..$ head      : NULL\n#>   .. ..$ attachment: NULL\n#>   .. ..$ all_files : logi TRUE\n#>   .. ..- attr(*, \"class\")= chr \"html_dependency\"\n#>  $ html        : 'html' chr \"<i class=\\\"fa fa-cogs\\\" role=\\\"presentation\\\" aria-label=\\\"cogs icon\\\"><\/i>\"\n#>   ..- attr(*, \"html\")= logi TRUE\nrenderDependencies(res$dependencies)#> <link href=\"/Library/Frameworks/R.framework/Versions/3.6/Resources/library/shiny/www/shared/fontawesome/css/all.min.css\" rel=\"stylesheet\" />\n#> <link href=\"/Library/Frameworks/R.framework/Versions/3.6/Resources/library/shiny/www/shared/fontawesome/css/v4-shims.min.css\" rel=\"stylesheet\" />\nhtml <- renderDocument(\n  ui,\n  deps = c(\n    list(\n      htmlDependency(\n        \"jquery\", \n        \"3.5.1\", \n        c(href = \"shared\"), \n        script = \"jquery.min.js\"\n      )\n    ), \n    shiny:::shinyDependencies() # Shiny JS + CSS\n  ),\n  processDep = createWebDependency\n)#> shiny devmode - Using full shiny javascript file. To use the minified version, call `options(shiny.minified = TRUE)`\n#> This message is displayed once every 8 hours.<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; \n    charset=utf-8\"/>\n    <script type=\"application/shiny-singletons\"><\/script>\n    <script type=\"application/html-dependencies\">jquery[3.5.1];\n    shiny-css[1.6.0];shiny-javascript[1.6.0];\n    bootstrap[3.4.1]<\/script>\n    <script src=\"shared/jquery.min.js\"><\/script>\n    <link href=\"shared/shiny.min.css\" rel=\"stylesheet\" />\n    <script src=\"shared/shiny.min.js\"><\/script>\n    <meta name=\"viewport\" content=\"width=device-width, \n    initial-scale=1\" />\n    <link href=\"shared/bootstrap/css/bootstrap.min.css\" \n    rel=\"stylesheet\" />\n    <link href=\"shared/bootstrap/accessibility/css/\n    bootstrap-accessibility.min.css\" rel=\"stylesheet\" />\n    <script src=\"shared/bootstrap/js/bootstrap.min.js\"><\/script>\n    <script src=\"shared/bootstrap/accessibility/js\n    /bootstrap-accessibility.min.js\"><\/script>\n  <\/head>\n  <body>\n    <div class=\"container-fluid\">\n      <!-- Body content -->\n    <\/div>\n  <\/body>\n<\/html>\nhttpResponse(\n  status = 200,\n  content = enc2utf8(paste(collapse = \"\\n\", html))\n)#> $status\n#> [1] 200\n#> \n#> $content_type\n#> [1] \"text/html; charset=UTF-8\"\n#> \n#> $content\n#> [1] \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n  <meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=utf-8\\\"/>\\n  <script type=\\\"application/shiny-singletons\\\"><\/script>\\n  <script type=\\\"application/html-dependencies\\\">jquery[3.5.1];shiny-css[1.6.0];shiny-javascript[1.6.0];bootstrap[3.4.1]<\/script>\\n<script src=\\\"shared/jquery.min.js\\\"><\/script>\\n<link href=\\\"shared/shiny.min.css\\\" rel=\\\"stylesheet\\\" />\\n<script src=\\\"shared/shiny.js\\\"><\/script>\\n<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n<link href=\\\"shared/bootstrap/css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\" />\\n<link href=\\\"shared/bootstrap/accessibility/css/bootstrap-accessibility.min.css\\\" rel=\\\"stylesheet\\\" />\\n<script src=\\\"shared/bootstrap/js/bootstrap.min.js\\\"><\/script>\\n<script src=\\\"shared/bootstrap/accessibility/js/bootstrap-accessibility.min.js\\\"><\/script>\\n<\/head>\\n<body>\\n  <div class=\\\"container-fluid\\\">\\n    <div class=\\\"form-group shiny-input-container\\\">\\n      <label class=\\\"control-label\\\" id=\\\"caption-label\\\" for=\\\"caption\\\">Caption<\/label>\\n      <input id=\\\"caption\\\" type=\\\"text\\\" class=\\\"form-control\\\" value=\\\"Data Summary\\\"/>\\n    <\/div>\\n    <pre class=\\\"shiny-text-output noplaceholder\\\" id=\\\"value\\\"><\/pre>\\n  <\/div>\\n<\/body>\\n<\/html>\\n\"\n#> \n#> $headers\n#> $headers$`X-UA-Compatible`\n#> [1] \"IE=edge,chrome=1\"\n#> \n#> \n#> attr(,\"class\")\n#> [1] \"httpResponse\""},{"path":"web-applications.html","id":"serving-html-with-httpuv","chapter":"5 Web application concepts","heading":"5.7.2 Serving HTML with {httpuv}","text":"UI processed, Shiny makes available end users leveraging httpuv, provides tools set HTTP server. main function startServer requires host, port app. run shiny app locally, default host localhost 127.0.0.1 port randomly chosen shinyApp runApp, even though may fix . important element app httpuv expects list functions like:call, handle client HTTP request return server HTTP response. Depending context,\nShiny may return different responses like 403 (unauthorized), 404 (found) 200 (OK).onHeaders request contains headers. instance, may required authentication.staticPaths serve assets, especially CSS JS files.valid call function template containing previously processed HTML UI defined :invoke startServer:Now, browse 127.0.0.1:8080, see text input. However, opening HTML inspector shows many errors, due fact forgot serve static assets, located inst/www/shared folder shiny package. Let’s adding staticPaths component app:response may inspecting directly R (ideally within another R session) httr GET request:Keep mind Shiny much things setup server just highlighted important steps.\ncode crashes since HTML page returned client tries connect server websocket, yet exist.","code":"\napp <- list()\napp$call <- function(req) {\n  list(\n    status = 200L,\n    headers = list(\n      'Content-Type' = 'text/html'\n    ),\n    body = html\n  )\n}\nlibrary(httpuv)\ns <- startServer(\n  \"127.0.0.1\",\n  8080,\n  app\n)\ns$stop() # stop the server before running it again!\napp$staticPaths <- list(shared = system.file(\n  package = \"shiny\", \n  \"www\", \n  \"shared\"\n))\ns <- startServer(\n  \"127.0.0.1\",\n  8080,\n  app\n)\nGET(\"http://127.0.0.1:8080\")\n\n## Response [http://127.0.0.1:8080]\n##  Date: 2021-03-04 23:41\n##  Status: 200\n##  Content-Type: text/html\n##  Size: 5 B"},{"path":"web-applications.html","id":"summary-1","chapter":"5 Web application concepts","heading":"5.8 Summary","text":"far good! hopefully now better understand shiny app, served differences classic web apps.","code":""},{"path":"beautify-css.html","id":"beautify-css","chapter":"6 CSS for Shiny","heading":"6 CSS for Shiny","text":"previous part, saw create, manipulate HTML tags\nshiny htmltools, well importing external web dependencies, especially CSS files. however far enough develop apps stand pack. introduced 1.3.5.1, CSS web language allowing deep customization appearance. part aims providing acceptable overview CSS capabilities shiny context, \nmay start seamlessly customize apps times.","code":""},{"path":"beautify-css.html","id":"how-to-include-css","chapter":"6 CSS for Shiny","heading":"6.1 How to include CSS?","text":"three ways include CSS web page:Point external file <link rel=\"stylesheet\" href=\"style.css\"/>.Insert style head. recommended complex projects since hard maintain.Insert style tag level, style attribute, also known inline CSS,\nrecommended since hard maintain.advise follow first method much can modify CSS one place!\nend day, CSS script look like example:methods apply shiny:External CSS file tags$link(rel = \"stylesheet\", type=\"text/css\", href=\"www/style.css\").Internal CSS tags$head(tags$style(\"p {color: red;}\")).Inline CSS p(style = \"color:red;\", \"Red text\").However, correctly followed previous part HTML dependencies, best way Shiny create dependency, attach tag:Following method, make file accessible server, thereby easing debugging process. apply method? Well, make lot sense tiny CSS modifications, use one three methods listed . Moreover, also fine external dependency don’t need\ndebug modify code.","code":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"stylesheet\" href=\"style.css\" />\n    <title>CSS<\/title>\n    <style type=\"text/css\">\n      p {\n        color: red;  \n      }\n    <\/style>\n  <\/head>\n\n  <body>\n    <p style=\"color: red\">Hello World<\/p>\n    <p>Some text<\/p>\n    <div>Plop<\/div>\n  <\/body>\n<\/html>tag1 {\n  property1: value1;\n  property2: value2;\n}\n\ntag2 {\n  property1: value1;\n}\ncss_dep <- function() {\n  htmlDependency(\n    name = \"css dep\",\n    version = \"1.0\",\n    src = path_to_css,\n    stylesheet = filename\n  )\n}\n\ntagList(tag, css_dep)"},{"path":"beautify-css.html","id":"css-selectors","chapter":"6 CSS for Shiny","heading":"6.2 CSS selectors","text":"CSS selectors define elements apply CSS rules. , review common patterns.","code":""},{"path":"beautify-css.html","id":"basics-1","chapter":"6 CSS for Shiny","heading":"6.2.1 Basics","text":"apply CSS, select tag, choose property want change give value:instance, set color blue p tag, :Now, apply property multiple tags? separate tags comma, also called grouping selector:See example Shiny app:","code":"selector {\n  property: value;\n}p {\n  color: red;  \n}p, div {\n  color: red;  \n}\n### RUN ### \n# OSUICode::run_example( \n#  \"css/selector-basics\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nui <- fluidPage(\n  tags$style(\n    \"p, div {\n      color: red;\n    }\"\n  ),\n  p(\"Hello World\"),\n  div(\"A block\")\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"select-by-class-id","chapter":"6 CSS for Shiny","heading":"6.2.2 Select by class, id","text":"method shown applies selected tags. necessarily want probably like filter. first add class first p tag. Best practice give meaningful name:CSS side, prefix class .:style unique elements, may use id:another example, result shown Figure 6.1:second p tag selected.\nFIGURE 6.1: Select class id\n","code":"<p class=\"first-p\"><\/p>.first-p {\n  color: red;  \n}#element {\n  color: red;\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"css/selector-class-id\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nui <- fluidPage(\n  tags$style(\n    \".first-p {\n      color: red;\n    }\n    #element {\n      color: red;\n    }\n    \"\n  ),\n  p(class = \"first-p\", \"Hello World\"),\n  p(\"Another text\"),\n  div(id = \"element\", \"A block\")\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"apply-css-to-single-elements","chapter":"6 CSS for Shiny","heading":"6.2.3 Apply CSS to single elements","text":"Let’s consider following example:change color World word? select whole p element, apply \nwhole tag. exists specific tags like div span can apply. stated chapter 1.3, span may used inside containers surround words:","code":"<p>Hello World! What's up?<\/p><p>Hello <span class=\"custom\">World<\/span>! What's up?<\/p>.custom {\n  color: red;\n}"},{"path":"beautify-css.html","id":"advanced-selectors","chapter":"6 CSS for Shiny","heading":"6.2.4 Advanced selectors","text":"now, ’ve seen select element tag name, class id. Yet, enough. select tag?","code":"<a data-toggle=\"dropdown\">Tag<\/a>"},{"path":"beautify-css.html","id":"select-nested-tags","chapter":"6 CSS for Shiny","heading":"6.2.4.1 Select nested tags","text":"consider two HTML tags. want first element red text.\ncan’t select class .nav-link also style second element!idea select first tag, li, select ’s child :Shiny navbarPage template composed navigation items li , may easily modify:\nFIGURE 6.2: Style nav link elements\n’ll notice tabsetPanel() tabs also modified, exactly wanted, shown Figure 6.2. main difference navbarPage() tabsetPanel() class held menu wrapper ul:nav navbar-nav navbarPage nav nav-tabs tabsetPanel().\nisolate navbarPage() tabs, improve previous selector:, ’ll look link elements inside container navbar-nav class.final result depicted Figure 6.3.\nFIGURE 6.3: Style specific navbar nav link elements\n","code":"<li class=\"nav-item\">\n  <a class=\"nav-link\" href=\"#\">Link<\/a>\n<\/li>\n\n<a class=\"nav-link\" href=\"#\">Link<\/a>li a {\n  color: red;\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"css/selector-nested/ex1\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nui <- navbarPage(\n  \"App Title\",\n  tabPanel(\n    \"Plot\",\n    tags$style(\n      \"li a {\n        font-size: 20px;\n        font-weight: bold;\n      }\n    \"\n    ),\n    tabsetPanel(\n      tabPanel(\"Plot\"),\n      tabPanel(\"Summary\"),\n      tabPanel(\"Table\")\n    )\n  ),\n  tabPanel(\"Summary\"),\n  tabPanel(\"Table\")\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)\nnavbarPage(tabPanel(\"test\"))#> <nav class=\"navbar navbar-default navbar-static-top\" role=\"navigation\">\n#>   <div class=\"container-fluid\">\n#>     <div class=\"navbar-header\">\n#>       <span class=\"navbar-brand\">\n#>         <div class=\"tab-pane\" title=\"test\" data-value=\"test\"><\/div>\n#>       <\/span>\n#>     <\/div>\n#>     <ul class=\"nav navbar-nav\" data-tabsetid=\"6726\"><\/ul>\n#>   <\/div>\n#> <\/nav>\n#> <div class=\"container-fluid\">\n#>   <div class=\"tab-content\" data-tabsetid=\"6726\"><\/div>\n#> <\/div>\ntabsetPanel(tabPanel(\"test\"))#> <div class=\"tabbable\">\n#>   <ul class=\"nav nav-tabs\" data-tabsetid=\"1827\">\n#>     <li class=\"nav-item\">\n#>       <a href=\"#\" data-toggle=\"tab\" data-value=\"test\" class=\"nav-link active\" data-target=\"#tab-1827-1\">test<\/a>\n#>     <\/li>\n#>   <\/ul>\n#>   <div class=\"tab-content\" data-tabsetid=\"1827\">\n#>     <div class=\"tab-pane active\" data-value=\"test\" id=\"tab-1827-1\"><\/div>\n#>   <\/div>\n#> <\/div>.navbar-nav li a {\n  font-size: 20px;\n  font-weight: bold;\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"css/selector-nested/ex2\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nui <- navbarPage(\n  \"App Title\",\n  tabPanel(\n    \"Plot\",\n    tags$style(\n      \".navbar-nav li a {\n        font-size: 20px;\n        font-weight: bold;\n      }\n    \"\n    ),\n    tabsetPanel(\n      tabPanel(\"Plot\"),\n      tabPanel(\"Summary\"),\n      tabPanel(\"Table\")\n    )\n  ),\n  tabPanel(\"Summary\"),\n  tabPanel(\"Table\")\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"select-by-attributes","chapter":"6 CSS for Shiny","heading":"6.2.4.2 Select by attributes","text":"select attribute, use tag[attribute]CSS code selects tags data-toggle attribute:following code, select first tag:reason exactly match dropdown value!less specific:* checks whether word dropdown position. may use ^ $ like regular expressions check value starts ends specified word, respectively.","code":"<a data-toggle=\"dropdown\">Tag<\/a>\n<a data-toggle=\"my dropdown\">Tag<\/a>\n<a data-toggle=\"whatever\">Tag<\/a>a[data-toggle] {\n  color: red;\n}a[data-toggle=\"dropdown\"] {\n  color: red;\n}a[data-toggle*=\"dropdown\"] {\n  color: red;\n}"},{"path":"beautify-css.html","id":"other-selectors","chapter":"6 CSS for Shiny","heading":"6.2.4.3 Other selectors","text":"","code":""},{"path":"beautify-css.html","id":"direct-descendants","chapter":"6 CSS for Shiny","heading":"6.2.4.4 Direct descendants","text":"Let’s consider navbarPage() nested navigation. accomplished navbarMenu() function:resulting HTML code follow:two ul menus multiple li inside. Applying previous CSS selector depicted Figure 6.4 selects links.\nFIGURE 6.4: Style navbar nav link elements\nwant select direct children outer menu, meaning exclude inner menu links? Using child combinator >, can select direct children descendant contain grand-children.Result displayed Figure 6.5:\nFIGURE 6.5: Style direct children navbar nav link elements\nWell, want even specific get first nav link element?\nintroduce pseudo classes.","code":"\nnavbarPage(\n  \"App Title\",\n  tabPanel(\"Plot\"),\n  navbarMenu(\n    \"More\",\n    tabPanel(\"Summary\"),\n    \"----\",\n    \"Section header\",\n    tabPanel(\"Table\")\n  )\n)<ul class=\"nav navbar-nav\" data-tabsetid=\"5879\">\n  <li class=\"active\">\n    <a href=\"#tab-5879-1\" data-toggle=\"tab\" data-value=\"Plot\">\n      Plot\n    <\/a>\n  <\/li>\n  <li class=\"dropdown\">\n    <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" \n    data-value=\"More\">\n      More\n      <b class=\"caret\"><\/b>\n    <\/a>\n    <ul class=\"dropdown-menu\" data-tabsetid=\"7141\">\n      <li>\n        <a href=\"#tab-7141-1\" data-toggle=\"tab\" \n        data-value=\"Summary\">Summary<\/a>\n      <\/li>\n      <li class=\"divider\"><\/li>\n      <li class=\"dropdown-header\">Section header<\/li>\n      <li>\n        <a href=\"#tab-7141-4\" data-toggle=\"tab\" \n        data-value=\"Table\">Table<\/a>\n      <\/li>\n    <\/ul>\n  <\/li>\n<\/ul>.navbar-nav > li > a {\n  font-size: 20px;\n  font-weight: bold;\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"css/selector-descendant\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nui <- navbarPage(\n  \"App Title\",\n  tabPanel(\n    \"Plot\",\n    tags$style(\n      HTML(\n        \".navbar-nav > li > a {\n          font-size: 20px;\n          font-weight: bold;\n        }\n        \"\n      )\n    )\n  ),\n  navbarMenu(\n    \"More\",\n    tabPanel(\"Summary\"),\n    \"----\",\n    \"Section header\",\n    tabPanel(\"Table\")\n  )\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"css-pseudo-classes","chapter":"6 CSS for Shiny","heading":"6.2.4.4.1 Pseudo-classes","text":"pseudo class starts : symbol. instance, :active styles active links button:disabled applies disabled buttons.exists many pseudo class types, particularly structural ones. useful select specific children like element:first-child. Going back navbarPage() example, refine CSS selector adding :first-child li element want select first item:expected, first link styled, demonstrated Figure 6.6.\nFIGURE 6.6: Style first navbar nav link element\n","code":"a:active {\n\n}\n\nbutton:disabled {\n\n}\n\ncheckbox:checked {\n\n}.navbar-nav > li:first-child > a {\n  font-size: 20px;\n  font-weight: bold;\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"css/selector-pseudoclass\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nui <- navbarPage(\n  \"App Title\",\n  tabPanel(\n    \"Plot\",\n    tags$style(\n      HTML(\n        \".navbar-nav > li:first-child > a {\n          font-size: 20px;\n          font-weight: bold;\n        }\n        \"\n      )\n    )\n  ),\n  navbarMenu(\n    \"More\",\n    tabPanel(\"Summary\"),\n    \"----\",\n    \"Section header\",\n    tabPanel(\"Table\")\n  )\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"css-pseudoelements","chapter":"6 CSS for Shiny","heading":"6.2.4.4.2 Pseudo-elements","text":"Pseudo elements preceded ::. famous ones ::::, respectively apply selected element.instance .navbar-nav > li:first-child > ::insert element first navbar link.exercise, may change ::::notice emoji behave example.\nFIGURE 6.7: Add pseudo-element\n","code":"a::before {\n\n}\n\na::after {\n\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"css/selector-pseudoelement\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nui <- navbarPage(\n  \"App Title\",\n  tabPanel(\n    \"Plot\",\n    tags$style(\n      HTML(\n        \".navbar-nav > li:first-child > a {\n            font-size: 20px;\n            font-weight: bold;\n          }\n          .navbar-nav > li:first-child > a::before {\n            content: '✌️'\n          }\n        \"\n      )\n    )\n  ),\n  navbarMenu(\n    \"More\",\n    tabPanel(\"Summary\"),\n    \"----\",\n    \"Section header\",\n    tabPanel(\"Table\")\n  )\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"best-practices","chapter":"6 CSS for Shiny","heading":"6.3 Best practices","text":"","code":""},{"path":"beautify-css.html","id":"dry-principle","chapter":"6 CSS for Shiny","heading":"6.3.1 DRY principle","text":"DRY stands “Don’t repeat ”. methodology applies structural languages like R JavaScript also declarative languages like CSS. example badly managed CSS code. .class-1 .class-2 color border radius. padding font size change. type code follow DRY rule increases risk contradictory CSS properties.gather common properties one generic class:HTML side, add classes generic specific like:even concrete example, take look bulma button:Notice easy predict style button. large take maximum width. sure meaningful seeing .class1!","code":".class-1{\n  color: #33BEFF;\n  padding: 10px 16px;\n  font-size: 12px;\n  border-radius: 3px;\n}\n\n.class-2{\n  color: #33BEFF;\n  padding: 5px 10px;\n  font-size: 12px;\n  border-radius: 3px;\n}.generic {\n  color: #33BEFF;\n  border-radius: 3px;\n}\n\n.specific-1 {\n  padding: 10px 16px;\n  font-size: 18px;\n}\n\n.specific2 {\n  padding: 5px 10px;\n  font-size: 12px;\n}<div class=\"generic specific-1\">My element<\/div>\n<div class=\"generic specific-2\">My element<\/div><button class=\"button is-large is-fullwidth\">Large<\/button>"},{"path":"beautify-css.html","id":"selector-specificity","chapter":"6 CSS for Shiny","heading":"6.3.2 Selector specificity","text":"happens case multiple different selectors target element? style really applied? Consider following example:following CSS rules:Can guess element text color? Well, obvious. must understand web browsers apply rules select specific rules:Inline style specific. style directly attached HTML tag.id applies unique objects.class, pseudoclasses, attributes.elements pseudo-elements.Going back previous example, specific selector #element, therefore text color red. happens case equality? last written selector applied:second selector applied tag. apply class1, must move class2 style definition.Best practice keep lowest specificity possible, thereby making .class first choice.","code":"<div id=\"element\" class=\"myclass\">Some text<\/div>#element {\n  color: red;\n}\n\n.myclass {\n  color: blue;\n}\n\ndiv {\n  color: green;\n}<div class=\"class1 class2\">Some text<\/div>.class1 {\n  color: blue;\n}\n\n.class2 {\n  color: red;\n}"},{"path":"beautify-css.html","id":"block-element-modified-bem","chapter":"6 CSS for Shiny","heading":"6.3.3 Block element modified (BEM)","text":"BEM methodology help write meaningful CSS, easier manage.\nblock standalone entity self explanatory name like header, checkbox. elements part block standalone like menu items.\nmodifier indicates specific state element, instance button disabled, active, … general scheme defined :Following methodology guaranties documented meaningful classes.","code":".block__element--modifier {\n/* rules */\n}"},{"path":"beautify-css.html","id":"modify-css-with-the-html-inspector","chapter":"6 CSS for Shiny","heading":"6.4 Modify CSS with the HTML inspector","text":"","code":""},{"path":"beautify-css.html","id":"add-inline-properties","chapter":"6 CSS for Shiny","heading":"6.4.1 Add inline properties","text":"Run following app:Right click p element open inspector. Styles tab, notice element.style section. define inline new CSS rules selected item.Right click p element open inspector. Styles tab, notice element.style section. define inline new CSS rules selected item.Let’s add 2 rules clicking inside element.style container:Let’s add 2 rules clicking inside element.style container:border-style: dashed. Indicates want box dashed borderborder-color: .... set border colorAfter typing enter, inline CSS automatically added tag element.probably noticed auto suggestion feature typing property, shown Figure 6.8, particularly handy learning CSS.\nFIGURE 6.8: Edit CSS Chrome DevTools\n","code":"\nui <- fluidPage(\n  tags$style(\"p { color: red;}\"),\n  p(\"Hello World\")\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"view-local-changes","chapter":"6 CSS for Shiny","heading":"6.4.2 View local changes","text":"Whenever playing around web page style shiny app, may good overview changes satisfied new design.Run previous shiny app example open inspectorIn Styles tab, add new CSS properties first p element set rulesOnce done press enter click file name located top-right corner property boxThis opens Sources tab. left sidebar, right click file name (index) select Local ModificationsThis opens Git like diff panel called Changes can review change see previous values. refresh page, loose every local change, unless persistent authoring feature active.\nFIGURE 6.9: Review CSS changes\nget deeper understanding different CSS options please refer Google documentation.","code":""},{"path":"beautify-css.html","id":"css-in-action","chapter":"6 CSS for Shiny","heading":"6.5 CSS in action","text":"review commonly used CSS properties text styling, shadows, color background color, …","code":""},{"path":"beautify-css.html","id":"text-styling","chapter":"6 CSS for Shiny","heading":"6.5.1 Text Styling","text":"","code":""},{"path":"beautify-css.html","id":"fonts","chapter":"6 CSS for Shiny","heading":"6.5.1.1 Fonts","text":"Fonts control text appearance may changed :practice, enter multiple font values, case end user \nfont. last values composed generic polices like serif monospace.\ninstance, Bootstrap 3 utilizes default sans-serif police. neat tool inspect current text fonts HTML inspector CSS Overview tab, shown Figure 6.10.\nFIGURE 6.10: Overview font properties\nCustom fonts may downloaded @font-face prerequisites make render properly:file format must correctly handled end user web browsers. currently .ttf (work almost web browser), .woff (work almost web browser), .svg (iPhone iPad), .eot (IE ) .otf (don’t work IE).files downloaded may take time.fonts open source.Importantly, font files must accessible CSS file called . another example, code means fonts folder located one level CSS file:Chapters 9 8 exposes convenient methods seamlessly\nhandle Shiny app’s font.","code":"tag {\n  font-family: mypolice1, mypolice2, ..., serif;\n}@font-face {\n  font-family: 'customPolice';\n  src: url('customPolice.ttf'),\n       url('customPolice.woff');\n}@font-face {\n  font-family: 'Framework7 Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url(\"../fonts/Framework7Icons-Regular.eot\");\n  src: url(\"../fonts/Framework7Icons-Regular.woff2\") format(\"woff2\"),\n       url(\"../fonts/Framework7Icons-Regular.woff\") format(\"woff\"),\n       url(\"../fonts/Framework7Icons-Regular.ttf\") format(\"truetype\");\n}"},{"path":"beautify-css.html","id":"size","chapter":"6 CSS for Shiny","heading":"6.5.1.2 Size","text":"change text size, use font-size property. , two choices:Relative size (first choice) like small, medium, …\nmay also find notations like 1em (default size), 1.8em bigger 0.5em smaller; well percentages.Absolute size: 16px, 20px, …following example, second h1 tag smaller default one, p:","code":"\n### RUN ### \n# OSUICode::run_example( \n#  \"css/font-size\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nui <- fluidPage(\n  tags$style(\n    \".smaller--h1 {\n      font-size: 0.75em;\n    }\n    .smaller--p {\n      font-size: 80%;\n    }\n    \"\n  ),\n  h1(\"Default <h1>\"),\n  h1(class = \"smaller--h1\", \"Smaller <h1>\"),\n  p(\"Normal <p>\"),\n  p(class = \"smaller--p\", \"Smaller <p>\")\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"alignement","chapter":"6 CSS for Shiny","heading":"6.5.1.3 Alignement","text":"job text-align accepts four values (left, center, right justify). Importantly, work inline tags like span!","code":""},{"path":"beautify-css.html","id":"other-styling-properties","chapter":"6 CSS for Shiny","heading":"6.5.1.4 Other styling properties","text":"can also put text bold, italic using font-style: italic font-weight: bold, respectively.","code":""},{"path":"beautify-css.html","id":"colors","chapter":"6 CSS for Shiny","heading":"6.5.2 Colors","text":"already mentioned property previous examples. CSS, four ways apply colors text background:Using hexadecimal notation (HEX). instance #FFFFFF corresponds white color. Given color code, unless already know , result quite hard predict. guess result #4b0082?Using rgb code. ever followed art courses, classic system uses painting, mixing colors. rgb stands red, green blue. scale goes 0 255 (256 choices), gives weight color! 255? Since 256256256 gives 16 millions color, maximum number colors actual screen can display.Using hsl convention. hsl stands hue, saturation lightness. Saturation lightness expressed percentage 0 100. hue goes red (0) 360 (sort red) time incrementing 15. yellow color 60.Using color name like ghostwhite, maroon, red…rgb hsl give unlimited number possibilities, HTML color names infinite.\nmany tools allowing get codes like, notably color pickers:https://html-color.codes/https://www.w3schools.com/colors/colors_picker.asp","code":""},{"path":"beautify-css.html","id":"text-color","chapter":"6 CSS for Shiny","heading":"6.5.2.1 Text color","text":"Given methods listed , use color property change text color. obvious colors like red, necessary use rgb convention.","code":"p {\n  color: red;\n}"},{"path":"beautify-css.html","id":"background-color","chapter":"6 CSS for Shiny","heading":"6.5.2.2 Background color","text":"backgound-color property necessary apply given color background. change page background color, target body tag, also target tag like p.","code":""},{"path":"beautify-css.html","id":"borders-and-shadows","chapter":"6 CSS for Shiny","heading":"6.5.3 Borders and shadows","text":"effects may applied text block elements. easiest way set border leverage border property accepts three parameters:border width px.border color valid CSS color like rgb(), red, …border type, corresponds border style (none, solid,\ndotted, dashed, double, groove, ridge, inset outset). practice, mostly use solid.exists properties border-radius controls shape corners top left bottom left. higher value rounded corner.reason, want fine tune border position, four properties: border-top, border-bottom, border-left border-right.Finally, shadows controlled two properties:text-shadow applies shadow text element (rarely used).box-shadow styling blocks.instance:box-shadow property takes four main parameters:horizontal offset px.vertical offset px.blur radius value px. higher blurred.shadow color.remember shinydashboard box imported inside simple shiny app Chapter 4.3? box included {OSUICode} side package. Let’s add border shadows:box class styled follows shown Figure 6.11:\nFIGURE 6.11: {shinydashboard} box style\nborder-radius 3px indicates box slightly rounded corners.\ntop solid border color gray well tiny shadow.\nLet’ increase border-radius 10px, change top border border-left orange color slightly increased thickness:like increase shadow effect mouse hover, reasonable values. proceed leverage pseudo format elements like :hover:easiest way modify shadow style directly inside HTML inspector, demonstrated Figure 6.12. Next property text, button open shadow editor. click , opens box input control shadow offset, blur spread parameter. leave effect outside box, outset unchanged. change color, click color widget next rgb value opens Figure 6.13.\nFIGURE 6.12: Box shadow shape tools\n\nFIGURE 6.13: Box shadow color tools\nfinally include new CSS rule inside previous app. Optionally, may change\ncolor text header white, improve contrast box background (See Figure 6.14):\nFIGURE 6.14: Improved box shadow hover\n","code":"block {\n  box-shadow: 2px 2px 0px black;\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"css/custom-box/start\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\nlibrary(OSUICode)\nlibrary(shinyWidgets)\n\nui <- fluidPage(\n  useShinydashboard(),\n  br(),\n  box2(\n    title = \"Box with border\",\n    background = \"blue\",\n    height = \"400px\"\n  )\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server).box {\n  border-radius: 3px;\n  border-top: 3px solid #d2d6de;\n  box-shadow: 0 1px 1px rgb(0 0 0 / 10%);\n}.box {\n  border-radius: 10px;\n  border-left: 6px solid #e28810;\n  box-shadow: 0 1px 1px rgb(0 0 0 / 10%);\n}.box:hover {\n  box-shadow: 0px 8px 8px 0px rgb(0, 0, 0, 0.2);\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"css/custom-box/end\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\nlibrary(OSUICode)\nlibrary(shinyWidgets)\n\nui <- fluidPage(\n  useShinydashboard(),\n  tags$style(\n    \".box {\n      border-top: none;\n      border-radius: 10px;\n      border-left: 6px solid #e28810;\n      box-shadow: 0 1px 1px rgb(0 0 0 / 10%);\n    }\n    .box:hover {\n      box-shadow: 0px 8px 8px 0px rgb(0, 0, 0, 0.2);\n    }\n    .box-header {\n      color: #fff;\n    }\n    \"\n  ),\n  br(),\n  box2(\n    title = \"Box with border\",\n    background = \"blue\",\n    height = \"400px\"\n  )\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"css-animations","chapter":"6 CSS for Shiny","heading":"6.5.4 Animations","text":"Properly utilized, CSS animations powerful way highlight specific part app, without line JavaScript code. instance, assume application requires click run button filling parameters. may want indicate user can click . However, recommend play animation add disable option, might cause frustration people visit app quite frequently.create animation, one leverage @keyframes rule. basically describes happens animation. instance:Alternatively, may also use percentages, flexible may introduce multiple\nchanges. percentage calculated based overall animation duration, , animation lasts 4 seconds, 50% corresponds 2s:try simple Shiny app, simply change text color black red:Nothing happens. spot ?\nforgot attach animation element. may use animation super property multiple properties shown :want keep last state animation active, use animation-fill-mode: forwards;.\nalso may want give time user open page playing animation, especially later short duration. Therefore, often advised specify delay animation-delay.Let’s try .close section, propose create simple Shiny app calculates sum 2 numbers. relies run button update result. goal make blink one seconds app starts, 3 seconds. first design animation, calling blink. decide utilize background-color property fills button green. add effect button border, also leverage box-shadow. Finally, change button text color white, improve color contrast. animation consists one steps, , 50% animation, apply green background add box shadow element. exercise, may add steps extra colors smoother transition. code found .apply animation delay second, cycle lasts one second, repeated three times:Notice fourth parameter corresponds animation-timing-function property. controls animation speed curve. Passing linear value ensures smoother transition using default ease. whole code shown .","code":"@keyframes animation {\n  from {property: value;}\n  to {property: new_value;}\n}@keyframes my-animation {\n  0%   {property: value1;}\n  25%  {property: value2;}\n  50%  {property: value3;}\n  /* ... */\n  100% {property: value4;}\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"css/animations/basic-broken\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nui <- fluidPage(\n  tags$head(\n    tags$style(\n      \"@keyframes my-animation {\n          from {color: auto;}\n          to {color: red;}\n        }\n        h1 {\n          color: grey;\n        }\n      \"\n    )\n  ),\n  h1(\"Hello World\")\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)element {\n  animation: name, duration, delay, count, ...;\n  /* OR */\n  animation-name: ...,\n  animation-duration: ...,\n  /* ... */\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"css/animations/basic\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nui <- fluidPage(\n  tags$head(\n    tags$style(\n      \"@keyframes my-animation {\n          from {color: grey;}\n          to {color: red;}\n      }\n      h1 {\n        color: grey;\n        animation: my-animation 3s 2s forwards;\n      }\n      \"\n    )\n  ),\n  h1(\"Hello World\")\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)@keyframes blink {\n  50% {\n    background-color: #16a520;\n    box-shadow: 0 0 10px 2px #16a520;\n    color: white;\n  }\n}.blink-green {\n  animation: blink 1s 1s 3 linear;\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"css/animations/blink\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nui <- fluidPage(\n  tags$head(\n    tags$style(\n      \"@keyframes blink {\n          50% {\n            background-color: #16a520;\n            box-shadow: 0 0 10px 2px #16a520;\n            color: white;\n          }\n        }\n        .blink-green {\n          animation: blink 1s 1s 3 linear;\n        }\n      \"\n    )\n  ),\n  numericInput(\"number_1\", \"Number 1\", 1),\n  numericInput(\"number_2\", \"Number 2\", 1),\n  actionButton(\"calculate\", \"Click\", class = \"blink-green\"),\n  textOutput(\"sum\")\n)\n\nserver <- function(input, output) {\n  output$sum <- renderText({\n    input$calculate\n    isolate({\n      input$number_1 + input$number_2\n    })\n  })\n}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"layout","chapter":"6 CSS for Shiny","heading":"6.5.5 Layout","text":"mentioned section 1.3, exists block inline tags. block elements displayed , inline elements added next others, shown Figure 6.15.\nFIGURE 6.15: Inline block elements\nCSS allows deep customization block elements like setting width, height margin. Let’s review .","code":""},{"path":"beautify-css.html","id":"style-blocks","chapter":"6 CSS for Shiny","heading":"6.5.5.1 Style blocks","text":"shown Figure 6.16, block tag may seen box. CSS allows set internal external margins. Internal margins, also called padding, space block border content, directions. External margins also known margin spaces blocks directions. block also defined width height well optional minimal width height. Width height may set either using absolute unites (px) relative unites(%) minimal values always absolute. Minimal values useful case end user resizes windows.corresponding CSS properties found :Padding margins called CSS super properties. Indeed, setting padding: 10px guarantees 10px directions. need custom values, specify directions:exists shortcut margin: 5px 0 5px 2 means 5px top, 0 px right, 5 px bottom 2px left. remember good order, clockwise (top, right, bottom, left). Specifying 2 values margin: 5px 2.5px means 5px top bottom, 2.5px left right. obviously applies padding!\nFIGURE 6.16: Blocks layout\nUsing margin allows center block margin: auto applied combination given width.happens content inside block bigger block ?\napply overflow super property acts either horizontally vertically. vertical overflow, choose overflow-y. overflow property four possible values:visible shows content.hidden hides content goes outside block.scroll shows scrolling bars directions see hidden content.auto let web browser decide.Let’s apply newly acquired knowledge simple shiny app.Well, ? better combining fluidRow column! Indeed, two functions part grid system built top flexbox. Let’s talk next section.","code":".block {\n  width: 50%; /* % also work and will be relative size*/\n  height: 200px;\n  min-width: 200px;\n}.block {\n  padding: 10px;\n  margin-top: 10px;\n  margin-left: 5px;\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"css/layout/blocks\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nui <- fluidPage(\n  tags$style(\n    \".block {\n      border-color: #00000;\n      border-style: solid;\n      background-color: lightblue;\n      text-align: center;\n      margin: 10px;\n      min-height: 200px;\n      width: 200px;\n    }\n\n    span, a {\n      background-color: orange;\n    }\n    \"\n  ),\n  div(\n    class = \"block\",\n    \"Block 1\",\n    br(),\n    span(\"Inline text 1\"), span(\"Inline text 2\")\n  ),\n  div(\n    class = \"block\",\n    \"Block 2\",\n    br(),\n    lapply(1:2, a, href = \"https://www.google.com/\", \"Link\")\n  ),\n  div(\n    class = \"block\",\n    \"Block 3\",\n    lapply(1:5, span, \"Inline text\")\n  )\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"flexbox","chapter":"6 CSS for Shiny","heading":"6.5.5.2 Flexbox","text":"flexbox (“flexible boxes”) model game changer layout development allows seamlessly:Align items container.Ensure items fill space.first step define main container give flex value display property:done, define direction, flex-direction four choices, shown Figure 6.17:rowrow-reversecolumncolumn-reverse\nFIGURE 6.17: Flexbox directions\nexample involving shiny. first define container CSS display: flex flex-direction: row set flexbox display. also add border better see container limits:, define style container elements, p tags. give width height better see blocks. child given background color :nth-child(n) pseudo class. exercise, may try replace flex-direction four values see blocks move main container:flex-wrap property may useful control blocks arranged:nowrap (default) put items row.wrap put items multiple lines top bottom.wrap-reverse put items multiple lines bottom top.Interestingly, flex-wrap flex-direction may merged flex-flow: direction wrap mode.Items may aligned either principal axis defined container CSS secondary axis, called cross-axis:justify-content may take following values flex-start (default), flex-end, center, space-, space-around space-evenly.align-items whose values can stretch (default), flex-start, flex-end, center baseline.justify-content align-items applied container level individual items! Whenever container multiple line, result flex-wrap: wrap flex-flow: ... wrap, use align-content align cross-axis (flex-start, flex-end, center, stretch default, space-, space-around).flexbox mono dimensional system.","code":".container {\n  display: flex;\n}.container {\n  display: flex;\n  flex-direction: row;\n  border: red dashed 2px;\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"css/layout/flexbox\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nui <- fluidPage(\n  tags$style(\n    \".container {\n      display: flex;\n      flex-direction: row-reverse;\n      border: red dashed 2px;\n    }\n\n    p {\n      width: 200px;\n      height: 200px;\n      text-align: center;\n      color: white;\n      font-size: 50px;\n    }\n\n    .container  :nth-child(1) {\n      background-color: green;\n    }\n    .container  :nth-child(2) {\n      background-color: orange;\n    }\n    .container  :nth-child(3) {\n      background-color: purple;\n    }\n    \"\n  ),\n  div(\n    class = \"container\",\n    p(\"A\"),\n    p(\"B\"),\n    p(\"C\")\n  )\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"beautify-css.html","id":"grid-model","chapter":"6 CSS for Shiny","heading":"6.5.5.3 Grid model","text":"mentioned , fluidRow column leverage Bootstrap grid system, uses flexbox. unfortunately rather complex scope book.","code":""},{"path":"beautify-css.html","id":"responsive-design-media-queries","chapter":"6 CSS for Shiny","heading":"6.5.6 Responsive design: media queries","text":"beginning web, smart phones tablets. websites\nmostly designed display fix computer screens. Everything changed now, leads several problems non responsive sites.Media queries convenient solve issue. allow setup rules depending\nvarious conditions. structure defined follows:instance, assuming want increase text size, mobile devices:stands screen sizes second request target devices width\n480px, .shiny app give:shown Figure 6.18, developer tools responsive mode,\ncan enable clicking blue button next Elements tabs.\nresponsive mode lets define viewport dimensions, height width web browser page, test media queries. set width 480 text size appears increased. may try 481px see text becomes smaller. careful, responsive mode tool display web browser navigation bars, status bar (bar containing battery icon various indicators). sure select ... icon enable show media queries show rulers options. media query option provides better visualization media query range versus current screen width, ruler helps fine tune design.\nFIGURE 6.18: HTML inspector responsive mode\nLet’s consider another example, involving shiny::modalDialog. function displays\nBootstrap 3 modal, whose design partly controlled media queries. run app open developer tools:corresponding CSS rules located Bootstrap (3) CSS file:first query fixes width 600px modals .modal-dialog class (default), long screen size least 768px. Moreover, modal modal-sm class, width set 300px. Finally, soon screen width higher equal 992 px, modals .modal-lg class width set 900px.Figure 6.19 illustrates modal responsiveness.\nFIGURE 6.19: Responsive modal. Top: first media query fullfilled, width 600px. Bottom: First media query met, width set auto\nFigure 6.20, changed modal size s l (top bottom, respectively).\nFIGURE 6.20: Changed modal size. Top: small modal screensize least 768px. Bottom: large modal screen size least 992px.\nstrong implications modal size mobiles. long screen size \nlower 768px, size parameter ignored!","code":"@media rule1 {\n  /* CSS */\n}\n\n/* We may combine rules */\n\n@media rule1 and rule 2 and ... {\n  /* CSS */\n}@media all and (max-device-width: 480px) {\n  p {\n    font-size: 1.5em;\n  }\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"css/media-queries/basic\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nui <- fluidPage(\n  tags$style(\n    \"@media all and (max-device-width: 480px) {\n      p {\n        font-size: 1.5em;\n      }\n    }\n    \"\n  ),\n  p(\"Hello World\")\n)\n\nserver <- function(input, output) {}\nshinyApp(ui, server)\n### RUN ### \n# OSUICode::run_example( \n#  \"css/media-queries/modal\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nshinyApp(\n  ui = fluidPage(\n    actionButton(\"show\", \"Show modal dialog\")\n  ),\n  server = function(input, output) {\n    observeEvent(input$show, {\n      showModal(\n        modalDialog(\n          title = \"Important message\",\n          \"This is an important message!\"\n        )\n      )\n    })\n  }\n)@media (min-width: 768px) {\n  .modal-dialog {\n    width: 600px;\n    margin: 30px auto;\n  }\n  .modal-content {\n    -webkit-box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\n  }\n  .modal-sm {\n    width: 300px;\n  }\n}\n@media (min-width: 992px) {\n  .modal-lg {\n    width: 900px;\n  }\n}"},{"path":"beautify-sass.html","id":"beautify-sass","chapter":"7 Introduction to Sass","heading":"7 Introduction to Sass","text":"One main problem CSS handle growing number files code repetition. Nowadays, web developers mainly use CSS pre processors like Sass, stands “Syntactically Awesome Style Sheets”, providing access variables, mathematical operators, functions loops, thereby reducing code complexity extending possibilities. RStudio developed {sass} package (Cheng, Mastny, et al. 2021), makes possible use Sass Shiny apps Rmarkdown documents.","code":""},{"path":"beautify-sass.html","id":"getting-started-with-sass","chapter":"7 Introduction to Sass","heading":"7.1 Getting started with Sass","text":"use Sass terminal, leverage sass package features work R.\ninstall sass, run:main function sass(), whose input parameter accepts:R string like { color: pink}.named list().file passed sass_file(), imports sass_import().complex structures.Note R code objects seamlessly converted Sass variable. convenience, using named lists remaining book.","code":"\ninstall.packages(\"sass\")\n# OR\nremotes::install_github(\"rstudio/sass\")\nlibrary(sass)\n# with a string\nsass(input = \".element-class { color: pink;}\")\n# with named list\nsass(list(color = \"pink\", \".element-class { color: $color;}\"))#> /* CSS */\n#> .element-class {\n#>   color: pink;\n#> }"},{"path":"beautify-sass.html","id":"variables","chapter":"7 Introduction to Sass","heading":"7.1.1 Variables","text":"Let us consider following example, two different classes color:Shouldn’t easier? Imagine hundreds elements color.\nhappens case color changes? update properties hand?let Sass variable $color:can quickly solve problem. sass, define one variable holding color well \ntwo rules, obtain:Add default! tag variable definition, want\nlet others modify , \"$color: purple !default;\".","code":".class-1{\n  color: #33BEFF;\n}\n\n.class-2{\n  background-color: #33BEFF;\n}$color: purple;\n.class-1{\n  color: $color;\n}\n.class-2{\n  background-color: $color;\n}\nrule1 <- \".class-1{ color: $color; }\"\nrule2 <- \".class-2{ background-color: $color; }\"\nsass(input = list(color = \"purple\", rule1, rule2))#> /* CSS */\n#> .class-1 {\n#>   color: purple;\n#> }\n#> \n#> .class-2 {\n#>   background-color: purple;\n#> }"},{"path":"beautify-sass.html","id":"partials-and-modules","chapter":"7 Introduction to Sass","heading":"7.1.2 Partials and Modules","text":"best practice save useful code snippets one place, reuse \nanytime anywhere. Sass allows define partials, like _partial.css, leading\nunderscore, avoids converted CSS. Partials subsequently called\n@import <PARTIAL_NAME> (may also find @use, latter handled\nLibSass, fuelssass), thereby significantly reducing code duplication.Modules pieces Sass files later converted CSS, reducing file size minimum.\nexample bootstrap.scss file:easier read maintain original bootstrap.css 10717 lines code!\npractice, often end main Sass file compile follows:","code":"/*!\n * Bootstrap v5.0.0-beta1 (https://getbootstrap.com/)\n ...\n*/\n\n// scss-docs-start import-stack\n// Configuration\n@import \"functions\";\n@import \"variables\";\n@import \"mixins\";\n@import \"utilities\";\n\n// Layout & components\n@import \"root\";\n@import \"reboot\";\n...\n\n// Helpers\n@import \"helpers\";\n\n// Utilities\n@import \"utilities/api\";\n// scss-docs-end import-stack\nsass(sass_file(\"main.scss\"))"},{"path":"beautify-sass.html","id":"mixins-and-functions","chapter":"7 Introduction to Sass","heading":"7.1.3 Mixins and Functions","text":"Another great advantage Sass ability generate reusable units code, also known\nmixins functions.","code":""},{"path":"beautify-sass.html","id":"mixins","chapter":"7 Introduction to Sass","heading":"7.1.3.1 Mixins","text":"make 90 degrees rotation CSS, write:already tedious. Mixins allow encapsulate logic reusable unit:mixin starts @mixin keyword followed name parameters.\ncalled @include <MIXIN_NAME(PARMS)>, similar function declaration, excepts \nmust return CSS rule.","code":".element {\n  -webkit-transform: rotate(90deg);\n  -ms-transform: rotate(90deg);\n  transform: rotate(90deg);\n}@mixin transform($property, ...) {\n  -webkit-transform: $property;\n  -ms-transform: $property;\n  transform: $property;\n}\n\n.element1 {\n  @include transform(rotate(90deg));\n}\nmixin <- \"@mixin transform($property) {\n  -webkit-transform: $property;\n  -ms-transform: $property;\n  transform: $property;\n}\"\nrule <- \".element1 { @include transform($prop); }\"\nsass(input = list(prop = \"rotate(90deg)\", mixin, rule))#> /* CSS */\n#> .element1 {\n#>   -webkit-transform: rotate(90deg);\n#>   -ms-transform: rotate(90deg);\n#>   transform: rotate(90deg);\n#> }"},{"path":"beautify-sass.html","id":"functions","chapter":"7 Introduction to Sass","heading":"7.1.3.2 Functions","text":"Sass offers many built-modules containing\nready use functions colors, numbers, strings, lists, maps, … functions like\nrgb global, don’t import corresponding module.definitely possible design custom functions @function,\nwhose syntax close mixins:debugging functions, might useful capture intermediate elements.\n@debug allows :Notice use mathematical operators like *, +, -, / %, possible CSS.","code":"\nsass(\".pouet { color: rgb(0, 255, 0); }\")#> /* CSS */\n#> .pouet {\n#>   color: lime;\n#> }@function name($parm1, $parm2) {\n  /* logic */\n  @return value;\n}$test: 1;\n@debug test;\nsass(\n  list(\n    a = 2,\n    b = 4,\n    \"@function multiply($parm1, $parm2) {\n      @debug 'parm1 is #{$parm1}';\n      @debug 'parm2 is #{$parm2}';\n\n      @return $parm1 * $parm2;\n    }\",\n    \".my-class {\n      width: multiply($a, $b) * 1px;\n    }\"\n  )\n)#> /* CSS */\n#> .my-class {\n#>   width: 8px;\n#> }"},{"path":"beautify-sass.html","id":"extendinheritance","chapter":"7 Introduction to Sass","heading":"7.1.4 Extend/Inheritance","text":"consider two alerts color difference. can’t capture multiple properties\ninside one single Sass variable, introduce extend concept, permits import\nCSS properties inside multiple rules. first define generic alerts-common rule,\nprefixed % symbol. contains several rules variables:Let’s translate R:method avoids multiply classes elements .alert-common .alert-red ....\nYet, programmatically generated two alert\nclasses loop, avoid duplication.","code":"%alerts-common {\n  position: relative;\n  padding: $alert-padding-y $alert-padding-x;\n  margin-bottom: $alert-margin-bottom;\n}\n\n\n.alert-red {\n  @extend %alerts-common;\n  color: red;\n}\n\n.alert-green {\n  @extend %alerts-common;\n  color: green;\n}\ncommon <- \"%alerts-common {\n  position: relative;\n  padding: $alert-padding-y $alert-padding-x;\n  margin-bottom: $alert-margin-bottom;\n}\"\nalert_red <- \".alert-red {\n  @extend %alerts-common;\n  color: red;\n}\n\"\nalert_green <- \".alert-green {\n  @extend %alerts-common;\n  color: green;\n}\n\"\nsass(input = list(\n  \"alert-padding-y\" = \"5px\",\n  \"alert-padding-x\" = \"10px\",\n  \"alert-margin-bottom\" = \"2px\",\n  common,\n  alert_red,\n  alert_green\n))#> /* CSS */\n#> .alert-green, .alert-red {\n#>   position: relative;\n#>   padding: 5px 10px;\n#>   margin-bottom: 2px;\n#> }\n#> \n#> .alert-red {\n#>   color: red;\n#> }\n#> \n#> .alert-green {\n#>   color: green;\n#> }"},{"path":"beautify-sass.html","id":"flow-controls","chapter":"7 Introduction to Sass","heading":"7.1.5 Flow Controls","text":"elements aiming fine tuning mixins functions behavior.","code":""},{"path":"beautify-sass.html","id":"if-and-else","chapter":"7 Introduction to Sass","heading":"7.1.5.1 if and else","text":"Like every programming language else control execution code block, depending\nconditions.\n, want conditionally control shadow property, depending alert color:","code":"@mixin add-shadow($color) {\n  @if $color == red {\n    box-shadow:\n      0 4px 10px 0 rgb(255, 0, 0),\n      0 4px 20px 0 rgb(255, 0, 0);\n  } @else if $color == green {\n    box-shadow:\n      0 4px 10px 0 rgb(0, 255, 0),\n      0 4px 20px 0 rgb(0, 255, 0);\n  }\n}\n\n.alert-red {\n  @extend %alerts-common;\n  color: red;\n  @include add-shadow($color: red);\n}\n\n.alert-green {\n  @extend %alerts-common;\n  color: green;\n  @include add-shadow($color: green);\n}\nadd_shadow <- \"@mixin add-shadow($color) {\n  @if $color == red {\n    box-shadow:\n      0 4px 10px 0 rgb(255, 0, 0),\n      0 4px 20px 0 rgb(255, 0, 0);\n  } @else if $color == green {\n    box-shadow:\n      0 4px 10px 0 rgb(0, 255, 0),\n      0 4px 20px 0 rgb(0, 255, 0);\n  }\n}\n\"\n\ncommon <- \"%alerts-common {\n  position: relative;\n  padding: $alert-padding-y $alert-padding-x;\n  margin-bottom: $alert-margin-bottom;\n}\"\n\nalert_red <- \".alert-red {\n  @extend %alerts-common;\n  color: red;\n  @include add-shadow($color: red);\n}\n\"\n\nalert_green <- \".alert-green {\n  @extend %alerts-common;\n  color: green;\n  @include add-shadow($color: green);\n}\n\"\nsass(input = list(\n  \"alert-padding-y\" = \"5px\",\n  \"alert-padding-x\" = \"10px\",\n  \"alert-margin-bottom\" = \"2px\",\n  common,\n  add_shadow,\n  alert_red,\n  alert_green\n))#> /* CSS */\n#> .alert-green, .alert-red {\n#>   position: relative;\n#>   padding: 5px 10px;\n#>   margin-bottom: 2px;\n#> }\n#> \n#> .alert-red {\n#>   color: red;\n#>   box-shadow: 0 4px 10px 0 red, 0 4px 20px 0 red;\n#> }\n#> \n#> .alert-green {\n#>   color: green;\n#>   box-shadow: 0 4px 10px 0 lime, 0 4px 20px 0 lime;\n#> }"},{"path":"beautify-sass.html","id":"loops","chapter":"7 Introduction to Sass","heading":"7.1.5.2 Loops","text":"","code":""},{"path":"beautify-sass.html","id":"each","chapter":"7 Introduction to Sass","heading":"7.1.5.2.1 Each","text":"like create alert class one rule. first define list colors Sass \ncall @:structure JavaScript loop. ’ll also notice #{...} \ncalled interpolation allows \ninsert Sass expression string. another example, want create background-image property\nwithin mixin, background-image: url(\"/some_path/#{$name}.svg\"), #{$name} holds file name.becomes even powerful working maps like $font-weights: (\"regular\": 400, \"medium\": 500, \"bold\": 700);, .e key/value pairs.\n@convenient lapply map functions chain repetitive rules creation.","code":"$colors: red, green;\n\n@each $color in $colors {\n  .alert-#{$color} {\n    color: green;\n    @include add-shadow($box-color: $color);\n  }\n}\nadd_shadow <- \"@mixin add-shadow($color) {\n  @if $color == red {\n    box-shadow:\n      0 4px 10px 0 rgb(255, 0, 0),\n      0 4px 20px 0 rgb(255, 0, 0);\n  } @else if $color == green {\n    box-shadow:\n      0 4px 10px 0 rgb(0, 255, 0),\n      0 4px 20px 0 rgb(0, 255, 0);\n  }\n}\n\"\n\ncommon <- \"%alerts-common {\n  position: relative;\n  padding: $alert-padding-y $alert-padding-x;\n  margin-bottom: $alert-margin-bottom;\n}\"\n\nalerts_rule <- \"@each $color in $colors {\n  .alert-#{$color} {\n    @extend %alerts-common;\n    color: green;\n    @include add-shadow($color: $color);\n  }\n}\n\"\nsass(input = list(\n  colors = c(\"green\", \"red\"),\n  \"alert-padding-y\" = \"5px\",\n  \"alert-padding-x\" = \"10px\",\n  \"alert-margin-bottom\" = \"2px\", \n  common,\n  add_shadow,\n  alerts_rule\n))#> /* CSS */\n#> .alert-red, .alert-green {\n#>   position: relative;\n#>   padding: 5px 10px;\n#>   margin-bottom: 2px;\n#> }\n#> \n#> .alert-green {\n#>   color: green;\n#>   box-shadow: 0 4px 10px 0 lime, 0 4px 20px 0 lime;\n#> }\n#> \n#> .alert-red {\n#>   color: green;\n#>   box-shadow: 0 4px 10px 0 red, 0 4px 20px 0 red;\n#> }"},{"path":"beautify-sass.html","id":"for","chapter":"7 Introduction to Sass","heading":"7.1.5.2.2 For","text":"However, straightforward count @. precisely \n@fills gap. generic scheme :excludes last number includes .","code":"@for <variable> from <expression> to <expression> { ... }\n@for <variable> from <expression> through <expression> { ... }"},{"path":"beautify-sass.html","id":"nesting-code","chapter":"7 Introduction to Sass","heading":"7.1.6 Nesting code","text":"make code readable, Sass allows nest rules hierarchy, thereby aligning underlying HTML structure. instance, looking previous example section 6.2.4.4.2:Transforming Sass code, avoids two separate rules:another example taken AdminLTE3 library powering bs4Dash. code shows card CSS structured, leveraging Sass capabilities like mixins, nesting, functions, … chunk may read top bottom gives rather good idea card look like, contrary classic CSS approach. first applies shadow mixin, sets bottom margin function. listed variables defined separate file. Besides, card body text printed white color dark mode active. Finally, card collapsed, none body footer elements displayed.","code":".navbar-nav > li:first-child > a {\n  font-size: 20px;\n  font-weight: bold;\n}\n.navbar-nav > li:first-child > a::before {\n  content: '✌️'\n}.navbar-nav {\n  > li:first-child {\n    > a {\n      font-size: 20px;\n      font-weight: bold;\n    }\n  }\n  \n  > li:first-child {\n    > a::before {\n      content: '✌️'\n    }\n  }\n}.card {\n  @include box-shadow($card-shadow);\n  margin-bottom: map-get($spacers, 3);\n\n  &.bg-dark {\n    .card-header {\n      border-color: $card-dark-border-color;\n    }\n\n    &,\n    .card-body {\n      color: $white;\n    }\n  }\n  /* other rules */ \n  // collapsed mode\n  &.collapsed-card {\n    .card-body,\n    .card-footer {\n      display: none;\n    }\n  }\n  /* other rules */ \n}"},{"path":"beautify-sass.html","id":"sass-best-practices","chapter":"7 Introduction to Sass","heading":"7.2 {sass} best practices","text":"’s best practice, especially debugging purposes, include assets HTML\ndependencies, good idea organize Sass variable definition, function/mixins layers, leveraging sass_layer() function:Besides, sass_layer() provide options like:declarations containing function, mixin elements, sass_file instance.html_deps attaches single list HTML dependencies provided Sass code, shown .Ultimately, multiple layers may bundled sass_bundle():sass_bundle_remove() removes given layer bundle, provided passed named list sass_bundle().\nallows developers reuse modify predefined layers:","code":"\nrule1 <- \".class-1{ color: $color; }\"\nrule2 <- \".class-2{ background-color: $color; }\"\nlayer1 <- sass_layer(\n  defaults = list(color = \"purple\"),\n  rules = list(rule1, rule2)\n)#> /* Sass Bundle */\n#> $color: purple;\n#> .class-1{ color: $color; }\n#> .class-2{ background-color: $color; }\n#> /* *** */\nsass_layer(\n  html_deps = htmltools::htmlDependency(\n    name = \"my-dep\",\n    version = \"1.0.0\",\n    package = \"mypkg\",\n    src = \"path\",\n    ...\n  )\n)\nlayer2 <- sass_layer(\n  defaults = list(color = \"blue\"),\n  rules = list(rule1, rule2)\n)\n\n\nmy_bundle <- sass_bundle(layer1 = layer1, layer2 = layer2)\nmy_bundle#> /* Sass Bundle: layer1, layer2 */\n#> $color: blue;\n#> $color: purple;\n#> .class-1{ color: $color; }\n#> .class-2{ background-color: $color; }\n#> .class-1{ color: $color; }\n#> .class-2{ background-color: $color; }\n#> /* *** */#> /* CSS */\n#> .class-1 {\n#>   color: purple;\n#> }\n#> \n#> .class-2 {\n#>   background-color: purple;\n#> }\n#> \n#> .class-1 {\n#>   color: purple;\n#> }\n#> \n#> .class-2 {\n#>   background-color: purple;\n#> }\nmy_bundle <- sass_bundle_remove(my_bundle, \"layer2\")\nmy_bundle#> /* Sass Bundle: layer1 */\n#> $color: purple;\n#> .class-1{ color: $color; }\n#> .class-2{ background-color: $color; }\n#> /* *** */\nsass(my_bundle)#> <style>.class-1 {\n#>   color: purple;\n#> }\n#> \n#> .class-2 {\n#>   background-color: purple;\n#> }\n#> <\/style>#> /* CSS */\n#> .class-1 {\n#>   color: purple;\n#> }\n#> \n#> .class-2 {\n#>   background-color: purple;\n#> }"},{"path":"beautify-sass.html","id":"from-sass-to-css","chapter":"7 Introduction to Sass","heading":"7.3 From Sass to CSS","text":"sass() can generate CSS Sass passing output parameter pointing path \ngenerate CSS file. Best practice consists enabling compression source maps. discuss\nlater book Chapter 22. Overall steps makes code faster load easier debug:","code":"\nsass(\n  list(\n   color = \"pink\",\n   \".a { color: $color; }\"\n  ),\n  options = sass_options(\n    output_style = \"compressed\",\n    source_map_embed = TRUE\n  )\n)/* CSS */\n.a{color:pink}\n\n/*# sourceMappingURL=data:application/json;base64,ewoJInZlcn\nNpb24iOiAzLAoJImZpbGUiOiAic3RkaW4uY3NzIiwKCSJzb3VyY2VzIjogWwo\nJCSJzdGRpbiIKCV0sCgkibmFtZXMiOiBbXSwKCSJtYXBwaW5ncyI6ICJBQUNB\nLEFBQUEsRUFBRSxBQUFDLENBQUUsS0FBSyxDQURGLElBQUksQ0FDVSIK\nfQ== */\nsass(\n  sass_file(\"main.scss\"),\n  \"<OUTPUT PATH>\",\n  options = sass_options(\n    output_style = \"compressed\",\n    source_map_embed = TRUE\n  )\n)"},{"path":"beautify-sass.html","id":"sass-and-shiny","chapter":"7 Introduction to Sass","heading":"7.4 Sass and Shiny","text":"Now let’s go back Shiny! include Sass code Shiny app? multiple situations:simply want style shiny app.developed template custom JS Sass/CSS reused developers.first option rather simple since Sass code compiled sass() shiny apps launched. resulting code may either string CSS file (within www folder), included head. assume located app folder level:Source maps allow us see original Sass code, shown Figure 7.1.\nsass_options() gives flexibility fine tune CSS output source map configuration.complex projects CSS compilation may take time, strongly advise process CSS independently \napp startup.\nFIGURE 7.1: Inspect Sass code web browser\nsecond option requires run sass() passing output file within package. , generated CSS\nincluded HTML dependency, ready shipped template:","code":"\nsass(\n  list(\n    color = \"pink\",\n    size = \"30px\",\n    \".awesome-link {\n      color: $color;\n      font-size: $size;\n      &:hover{\n        color: green;\n      }\n    }\"\n  ),\n  output = sprintf(\"www/main.min.css\"),\n  options = sass_options(\n    output_style = \"compressed\",\n    source_map_embed = TRUE\n  )\n)\nsass(\n  sass_file(\"main.scss\"),\n  \"<OUTPUT PATH>/main.css\",\n  options = sass_options(\n    output_style = \"compressed\",\n    source_map_embed = TRUE\n  )\n)\n\nmy_css_deps <- htmltools::htmlDependency(\n  name = \"my-style\",\n  version = \"1.0.0\",\n  package = \"mypkg\",\n  src = \"<OUTPUT PATH>\",\n  stylesheet = \"main.css\"\n)"},{"path":"beautify-sass.html","id":"examples","chapter":"7 Introduction to Sass","heading":"7.5 Examples","text":"","code":""},{"path":"beautify-sass.html","id":"sass-customize-bs4Dash","chapter":"7 Introduction to Sass","heading":"7.5.1 Customize {bs4Dash} colors","text":"bs4Dash Bootstrap 4 dashboard template built top AdminLTE3 HTML template. shinydashboard powered previous version, AdminLTE2, make somehow bs4Dash’s big brother!\nAdminLTE3 relies Sass files stored . Particularly, variables located _variables.scss partial. Since can decompose \nSass code multiple layers, seamlessly customize theme color\nvariables listed :Let’s provide defaults custom colors:Now recompile whole AdminLTE3 Sass code account changes.\nmeans, scss assets must accessible somewhere: fresh package hoods.\nworries, ’ll come back fresh next Chapter. now, rely {OSUICode} Sass code stored \nsystem.file(\"sass/adminlte/adminlte.scss\", package = \"OSUICode\") (since fresh may change future, {OSUICode} frozen make sure code always work):corresponding app may tested . want see whole code, run OSUICode::get_example(\"sass/examples/bs4Dash-custom\").Output shown Figure 7.2.\nFIGURE 7.2: Custom AdminLTE colors\nprobably noticed potential issue. indeed rely specific AdminLTE version,\nnamely 3.1.0, necessarily one want. Therefore, alternative \ndownload Sass files AdminLTE3, store package, ideally /inst folder, recompile code folder new variables. AdminLTE3 depends Bootstrap 4, recover dependencies separate folder, making sure accessible AdminLTE Sass code.","code":"$blue: #0073b7 !default;\n$lightblue: #3c8dbc !default;\n$navy: #001f3f !default;\n$teal: #39cccc !default;\n$olive: #3d9970 !default;\n$lime: #01ff70 !default;\n$orange: #ff851b !default;\n$fuchsia: #f012be !default;\n$purple: #605ca8 !default;\n$maroon: #d81b60 !default;\n$black: #111 !default;\n$gray-x-light: #d2d6de !default;$blue: #136377 !default;\n$olive: #d8bc66 !default;\n$lime: #fcec0c !default;\n$orange: #978d01 !default;\n$maroon: #58482c !default;\n$gray-x-light: #d1c5c0 !default;\ncss <- sass(\n  sass_layer(\n    defaults = list(\n      lightblue = \"#136377\",\n      olive = \"#d8bc66\",\n      lime = \"#fcec0c\",\n      orange = \"#978d01\",\n      maroon = \"#58482c\",\n      \"gray-x-light\" = \"#d1c5c0\"\n    ),\n    rules = sass_file(\n      input = system.file(\n        \"sass/adminlte/adminlte.scss\",\n        package = \"OSUICode\"\n      )\n    )\n  )\n)\n# This CSS is injected inside the app head (see example)\n### RUN ### \n# OSUICode::run_example( \n#  \"sass/examples/bs4Dash-custom\" \n# ) "},{"path":"beautify-sass.html","id":"customize-shinybulma","chapter":"7 Introduction to Sass","heading":"7.5.2 Customize {shinybulma}","text":"convenience, Sass code already included book side package.\ngoal change main color palette comprises:primaryinfosuccesswarningdangerIn total, bulma exposes 419 Sass variables!Among files, locate main variables file select relevant variables want modify.\nNotice can retrieve information: initial variables derived variables.assign new values:Particularly, target main body color stored $scheme-main. Instead pointing\n$white, change value default $black. Compile new CSS sass():Finally, try new theme following app, shown Figure 7.3.\nwant see whole code, run OSUICode::get_example(\"sass/examples/shinybulma-custom\").\nFIGURE 7.3: Custom bulma theme\n","code":"$turquoise: #03a4ff;\n$cyan: #e705be;\n$green: #f3d6e9;\n$yellow: #fdaf2c;\n$red: #ff483e;\n$scheme-main: hsl(0, 0%, 4%);\ncss <- sass(\n  sass_layer(\n    defaults = list(\n      turquoise = \"#03a4ff\",\n            cyan = \"#e705be\",\n            green = \"#f3d6e9\",\n            yellow = \"#fdaf2c\",\n            red = \"#ff483e\",\n      \"scheme-main\" = \"hsl(0, 0%, 10%)\"\n    ),\n    rules = sass_file(input = system.file(\n      \"sass/bulma/bulma.sass\",\n      package = \"OSUICode\"\n    ))\n  )\n)\n### RUN ### \n# OSUICode::run_example( \n#  \"sass/examples/shinybulma-custom\" \n# ) "},{"path":"beautify-with-fresh.html","id":"beautify-with-fresh","chapter":"8 Beautify with {fresh}","heading":"8 Beautify with {fresh}","text":"shown previous chapter, Sass powerful tool customize apps minutes, addition drastically improve code quality, thereby empowering long term maintenance. CSS knowledge required may easy find corresponding variables specific purpose. instance, able guess Bootstrap 4 variables required customize bs4Dash template?chapter, well chapter 9, show higher level tools \ncustomize Bootstrap (3 4 ) based templates. Let’s start first one: fresh.{fresh} R package developed dreamRs team, also authors shinyWidget esquisse. dreamRs projects clearly great source inspiration design outstanding Shiny apps, extent highly recommend reader explore work!","code":""},{"path":"beautify-with-fresh.html","id":"fresh-the-big-picture","chapter":"8 Beautify with {fresh}","heading":"8.1 {fresh}, the big picture","text":"fresh built top sass see Figures 8.5 8.6 may done minutes! design new theme, main function create_theme():theme allows import Bootswatch CSS theme, may already know ever used shinythemes. output_file controls output. provided, create_theme() creates CSS file specified location. Otherwise, returns string value containing compiles CSS. useful package context don’t necessarily want generate new theme time. … pass list CSS variables, bs4Dash_* (specific bs4Dash), adminlte_* (shinydashboard) bs_vars_* (classic shiny apps) functions, describe .general, ’ll call use_theme() inside app UI load newly generated theme.Note bs4Dash shinydashboardPlus expose freshTheme parameter, handles provided theme fly.","code":"\ncreate_theme(\n  ...,\n  theme = c(\"default\", \"cerulean\", ...),\n  output_file = NULL,\n  include_assets = FALSE\n)"},{"path":"beautify-with-fresh.html","id":"customize-bs4dash","chapter":"8 Beautify with {fresh}","heading":"8.1.1 Customize {bs4Dash}","text":"follows, explain set blue ocean theme minutes.","code":""},{"path":"beautify-with-fresh.html","id":"statuses-and-colors","chapter":"8 Beautify with {fresh}","heading":"8.1.1.1 Statuses and colors","text":"chapter 7.5.1, showed change bs4Dash colors, lines Sass code. Guess : fresh makes even easier! bs4dash_status() bs4Dash_color() functions allows overwrite default statuses colors:default, primary blue become green just one line code. recall section 7.5.1, customized bs4Dash colors Sass? Let’s try fresh. first create new theme, passing new colors inject inside previously mentioned freshTheme parameter:corresponding example may run :preview code, use OSUICode::get_example(\"fresh/bs4Dash-custom\").Note complex variable names like gray-x-light become gray_x_light!Compared approach described 7.5.1, advantages:don’t specify AdminLTE.scss location, fresh hosts .don’t look colors names described along bs4dash_color function definition. even description default values (well statuses bold), depicted Figure 8.1 .\nFIGURE 8.1: Default colors provided {bs4Dash}\nCorporate users appreciate able set custom internal theme minutes.","code":"\nbs4dash_status(\n  primary = NULL,\n  secondary = NULL,\n  success = NULL,\n  info = NULL,\n  warning = NULL,\n  danger = NULL,\n  light = NULL,\n  dark = NULL\n)\n\nbs4dash_color(\n  blue = NULL,\n  lightblue = NULL,\n  navy = NULL,\n  cyan = NULL,\n  teal = NULL,\n  olive = NULL,\n  green = NULL,\n  # ...\n)\nlibrary(fresh)\ncustom_colors_theme <- create_theme(\n  bs4dash_color(\n    lightblue = \"#136377\",\n    olive = \"#d8bc66\",\n    lime = \"#fcec0c\",\n    orange = \"#978d01\",\n    maroon = \"#58482c\",\n    gray_x_light = \"#d1c5c0\"\n  )\n)\n### RUN ### \n# OSUICode::run_example( \n#  \"fresh/bs4Dash-custom\" \n# ) "},{"path":"beautify-with-fresh.html","id":"general-layout","chapter":"8 Beautify with {fresh}","heading":"8.1.1.2 General Layout","text":"bs4Dash_layout exposes variables control sidebar width expanded collapsed, sidebar padding, controlbar width, main background color main content padding. blue ocean theme, change body background color passing new value main_bg variable, (Figure 8.2):\nFIGURE 8.2: Customized body background color\nacknowledge result yet consistent gives small glimpse package capabilities.","code":"\nlayout_vars <- bs4dash_layout(main_bg = \"#006994\")\nocean_theme <- create_theme(layout_vars)"},{"path":"beautify-with-fresh.html","id":"navbar","chapter":"8 Beautify with {fresh}","heading":"8.1.1.3 Navbar","text":"illustrated bs4Dash documentation, dashboardHeader() two color flavors, light dark. defaults light, meaning icons text displayed darker color, contrast reasons, inversely. bs4Dash gallery quite well illustrates property.Navbar variables may found search_vars_bs4dash(\"navbar\"), example:’ll using navbar_light_* variables follows:navbar color determined navbar-light class. change global light status value brand new ocean blue bs4dash_status().navbar_light_color set navbar text icon elements white (#fff). best choice given background color want apply.also modified primary status shade green:","code":"\nlibrary(tibble)\nhead(\n  as_tibble(\n    search_vars_bs4dash(\"navbar\")\n  )[, c(\"variable\", \"value\")]\n)#>  [38;5;246m# A tibble: 6 x 2 [39m\n#>   variable                  value                                      \n#>    [3m [38;5;246m<chr> [39m [23m                      [3m [38;5;246m<chr> [39m [23m                                      \n#>  [38;5;250m1 [39m navbar-nav-link-padding-x 1rem                                       \n#>  [38;5;250m2 [39m navbar-brand-font-size    $font-size-lg                              \n#>  [38;5;250m3 [39m navbar-brand-height       $navbar-brand-font-size * $line-height-base\n#>  [38;5;250m4 [39m navbar-toggler-padding-y  .25rem                                     \n#>  [38;5;250m5 [39m navbar-toggler-padding-x  .75rem                                     \n#>  [38;5;250m6 [39m navbar-toggler-font-size  $font-size-lg\nnavbar_vars <- list(\n  # navbar background\n  bs4dash_status(light = \"#005475\", primary = \"#00755c\"), \n  # put toggler in white\n  bs4dash_vars(navbar_light_color = \"#fff\") \n)\nocean_theme <- create_theme(layout_vars, navbar_vars)"},{"path":"beautify-with-fresh.html","id":"text-color-1","chapter":"8 Beautify with {fresh}","heading":"8.1.1.4 Text color","text":"card text element properly styled without setting white color \nglobal ocean blue theme color, render dark, bad contrast option. Hence, change white gray_900 colors bs4dash_color().","code":"\ninverted_colors <- bs4dash_color(\n  gray_900 = \"#fff\", \n  white = \"#005475\"\n)\nocean_theme <- create_theme(\n  layout_vars, \n  navbar_vars, \n  inverted_colors\n)"},{"path":"beautify-with-fresh.html","id":"color-contrast","chapter":"8 Beautify with {fresh}","heading":"8.1.1.5 Color contrast","text":"bs4dash_yiq() fine tunes contrast given color background. relies Bootstrap 4 color-yiq function, whose code may found . Interested readers look following article, explain better calculation derived .function three major steps:Given color, extract three components rgb space.yiq value computed contributions, according formula.threshold determines final color value. yiq higher threshold, color black, white otherwise.example, let’s apply default AdminLTE3 primary color #0073b7, threshold value 150. included extra parameters color-yiq function, represents threshold value (defaulting 150).utilize knowledge Chapter 7, particularly, sass_layer() function separate functions/mixins rules defaults:Wait moment: bs4dash_yiq() expose color parameter! Indeed, color already implicitly applied AdminLTE Sass code.last example, design app slider input controlling contrast threshold radio input color picker set box current status color. dynamically call bs4dash_yiq() create_theme, initial threshold 150 (Bootstrap default) dark light values set primary white, respectively. initial status primary (blue), shown , expect yiq value lower threshold since blue color relatively light weight calculation, thereby fixing background text color white. exercise, may try reduce threshold text becomes black. threshold value. , replace card status primary warning. happens? ? yellow made green red, highest contributions yiq calculation, result surprising!output shown Figure 8.3.\nFIGURE 8.3: Color contrast function action\n","code":"@function color-yiq($color, $dark: $yiq-text-dark, \n                    $light: $yiq-text-light) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= $yiq-contrasted-threshold) {\n    @return $dark;\n  } @else {\n    @return $light;\n  }\n}\ncolor_yiq <- \"\n  @function color-yiq($color, $threshold: 150, \n  $dark: $yiq-text-dark, $light: $yiq-text-light) {\n    $r: red($color);\n    $g: green($color);\n    $b: blue($color);\n\n    $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n    @if ($yiq >= $threshold) {\n      @return $dark;\n    } @else {\n      @return $light;\n    }\n  }\n\"\n\nbackground <- \"\n  $bg: #0073b7 !default;\n  $yiq-text-dark: #111 !default;\n  $yiq-text-light: #fff !default;\n\"\ntest_contrast <- \".test { background: color-yiq($bg); }\"\nsass(\n  sass_layer(\n    defaults = background,\n    declarations = color_yiq,\n    rules = test_contrast\n  )\n)#> <style>.test {\n#>   background: #fff;\n#> }\n#> <\/style>\n### RUN ### \n# OSUICode::run_example( \n#  \"fresh/color-contrast\" \n# ) "},{"path":"beautify-with-fresh.html","id":"sidebar","chapter":"8 Beautify with {fresh}","heading":"8.1.1.6 Sidebar","text":"Like dashboardHeader(), dashboardSidebar() exposes two flavors, namely light dark. Since set sidebar light, leverage bs4Dash_sidebar_light() helper. set main background (bg variable) ocean blue set menu color (color variable) white, better contrast. Additionally, invert text_dark text_light colors even better contrast bs4dash_yiq(). short, higher contrasted_threshold parameter less sensitive change.fresh theme apply static plots, since HTML element part DOM, leverage {thematic} package, short, provides sort CSS interface base R plots, ggplot lattice. Specifically, Shiny context, choose thematic_shiny(). default, sets appropriate background, foreground accent colors. final product shown Figure 8.4 may run per code:may notice inappropriate sliderInput() style. Bootstrap 4 element. case, ’ll create custom CSS rules targeting slider labels scale.\nFIGURE 8.4: Ocean theme {bs4Dash}\nanother example custom dark theme, whose code may found right Figure 8.5.\nFIGURE 8.5: lines code create bs4Dash dark theme!\n","code":"\nsidebar_vars <- list(\n  bs4dash_yiq(\n    contrasted_threshold = 10, \n    text_dark = \"#FFF\", \n    text_light = \"#272c30\"\n  ),\n  bs4dash_sidebar_light(\n    bg = \"#005475\", \n    color = \"#FFF\",\n    hover_color = \"#FFF\",\n    submenu_color = \"#FFF\", \n    submenu_hover_color = \"#FFF\"\n  )\n)\nocean_theme <- create_theme(\n  layout_vars, \n  navbar_vars, \n  inverted_colors, \n  sidebar_vars\n)\n### RUN ### \n# OSUICode::run_example( \n#  \"fresh/bs4Dash-ocean-theme\" \n# ) \ndark_theme <- create_theme(\n  bs4dash_vars(\n    navbar_light_color = \"#bec5cb\",\n    navbar_light_active_color = \"#FFF\",\n    navbar_light_hover_color = \"#FFF\"\n  ),\n  bs4dash_yiq(\n    contrasted_threshold = 10, \n    text_dark = \"#FFF\", \n    text_light = \"#272c30\"\n  ),\n  bs4dash_layout(main_bg = \"#353c42\"),\n  bs4dash_sidebar_dark(\n    bg = \"#272c30\", \n    color = \"#bec5cb\", \n    hover_color = \"#FFF\",\n    submenu_bg = \"#272c30\", \n    submenu_color = \"#FFF\", \n    submenu_hover_color = \"#FFF\"\n  ),\n  bs4dash_status(dark = \"#272c30\"),\n  bs4dash_color(gray_900 = \"#FFF\", white = \"#272c30\")\n)\n### RUN ### \n# OSUICode::run_example( \n#  \"fresh/bs4Dash-dark-theme\" \n# ) "},{"path":"beautify-with-fresh.html","id":"customize-shinydashboard","chapter":"8 Beautify with {fresh}","heading":"8.1.2 Customize {shinydashboard}","text":"Similarly, fresh supports shinydashboard powered apps. lines code, may definitely provide cyberpunk look feel favorite shiny dashboard (Figure 8.6). shinydashboardPlus (v2) plug play support fresh theme passed dashboardPage freshTheme parameter (also seamlessly work shinydashboard). start creating theme adminlte_colors(), adminlte_sidebar() adminlte_global():demonstration may run , result shown Figure 8.6:\nFIGURE 8.6: Cyberpunk shinydashboard\n","code":"\ncyberpunk_theme <- create_theme(\n  adminlte_color(\n    green = \"#3fff2d\",\n    blue = \"#2635ff\",\n    red = \" #ff2b2b\",\n    yellow = \"#feff6e\",\n    fuchsia = \"#ff5bf8\",\n    navy = \"#374c92\",\n    purple = \"#615cbf\",\n    maroon = \"#b659c9\",\n    light_blue = \"#5691cc\"\n  ),\n  adminlte_sidebar(\n    dark_bg = \"#D8DEE9\",\n    dark_hover_bg = \"#81A1C1\",\n    dark_color = \"#2E3440\"\n  ),\n  adminlte_global(\n    content_bg = \"#aaaaaa\"\n  )\n)\n### RUN ### \n# OSUICode::run_example( \n#  \"fresh/shinydashboardPlus-cyberpunk\" \n# ) "},{"path":"beautify-with-bootstraplib.html","id":"beautify-with-bootstraplib","chapter":"9 Beautify with {bslib}","heading":"9 Beautify with {bslib}","text":"bslib (Sievert Cheng 2021) package developed RStudio, built top sass.\ntime writing, bslib support shinydashboard bs4Dash.\n, ’ll see lines code, may provide impressive\ndesign modifications apps, ridiculously short amount time.bslib requires {shiny} >= 1.6.0. Bootstrap 5 support requires {shiny} >= 1.6.0.9001.","code":""},{"path":"beautify-with-bootstraplib.html","id":"high-level-customization","chapter":"9 Beautify with {bslib}","heading":"9.1 High level customization","text":"Like fresh, bslib offers high level set functions allowing quickly customize shiny apps. many users, step enough.","code":""},{"path":"beautify-with-bootstraplib.html","id":"bslib-high-level","chapter":"9 Beautify with {bslib}","heading":"9.1.1 Create a theme","text":"bs_theme() seamlessly modifies main CSS properties like:background color, namely bg.foreground color, namely fg.Change default theme colors, also called accents.Modify font. leverages font_google(), font_face() font_link() functions. practice, font_google() caches font resources always available user.Additionally, gives flexibility choose Bootstrap version, falling back version_default() specified. Currently, version 4 change future, advised specify value avoid unexpected breaking change. function three flavors:Bootstrap 3, \"3\" (see Chapter 3, Shiny primarily relies Bootstrap 3).Bootstrap 4 + compatibility Bootstrap 3, \"4\".Bootstrap 5 \"5\".Bootstrap versionsAdvanced users appreciate ... slot add extra variables bs_add_variables(), literally hundreds choices. give details 9.2 section. following, decide default Bootstrap 4.Let’s create simple theme:deliberately trimmed corresponding output get better rendering book.glance, output contains bundle Sass code Bootstrap 4 components (toasts, modals, …). , modules imported @import statement. remaining consists HTML dependency providing compatibility Bootstrap 3 fonts assets.","code":"\nlibrary(bslib)\n\nbs_theme(\n  version = version_default(),\n  bootswatch = NULL,\n  ...,\n  bg = NULL,\n  fg = NULL,\n  primary = NULL,\n  secondary = NULL,\n  success = NULL,\n  info = NULL,\n  warning = NULL,\n  danger = NULL,\n  base_font = NULL,\n  code_font = NULL,\n  heading_font = NULL\n)\nsimple_bs4_theme <- bs_theme(version = 4)/* Sass Bundle: _root, _reboot, ..., _toasts, _modal, ... */\n\n/* MORE Sass imports ... */\n@import \"../scss/_toasts.scss\";\n@import \"../scss/_modal.scss\";\n\n/* MORE Sass imports ... */\n\n/* *** */\nOther Sass Bundle information:\nList of 2\n $ html_deps       :List of 1\n  ..$ :List of 10\n  .. ..$ name      : chr \"bs3compat\"\n  .. ..$ version   : chr \"0.2.5.9002\"\n  .. ..$ src       :List of 1\n  .. .. ..$ file: chr \"bs3compat/js\"\n  .. ..$ meta      : NULL\n  .. ..$ script    : chr [1:3] \"transition.js\" \"tabs.js\" \n  \"bs3compat.js\"\n  .. ..$ stylesheet: NULL\n  .. ..$ head      : NULL\n  .. ..$ attachment: NULL\n  .. ..$ package   : chr \"bslib\"\n  .. ..$ all_files : logi TRUE\n  .. ..- attr(*, \"class\")= chr \"html_dependency\"\n $ file_attachments: Named chr \"...\"\n  ..- attr(*, \"names\")= chr \"fonts\""},{"path":"beautify-with-bootstraplib.html","id":"update-a-theme","chapter":"9 Beautify with {bslib}","heading":"9.1.2 Update a theme","text":"bslib exposes handy functions alter theme Sass code, remove (bs_remove()) add (bs_theme_update()) rules /preexisting theme. may useful reduce code size add missing rules fly. instance, don’t need alter toast component, need include Sass code theme. therefore :Inversely, missed CSS rule, may leverage bs_theme_update(), able update given theme object, generated bs_theme(). , change default primary color () lighter blue:Note use htmltools::parseCssColors() converts color name corresponding HEX code:","code":"\nsimple_bs4_theme <- bs_remove(simple_bs4_theme, \"_toasts\")\nsimple_bs4_theme <- bs_theme_update(\n  simple_bs4_theme, \n  primary = htmltools::parseCssColors(\"lightblue\")\n)\nhtmltools::parseCssColors(\"blue\")#> [1] \"#0000FF\"\nhtmltools::parseCssColors(\"gainsboro\")#> [1] \"#DCDCDC\""},{"path":"beautify-with-bootstraplib.html","id":"preview-a-theme","chapter":"9 Beautify with {bslib}","heading":"9.1.3 Preview a theme","text":"first create custom neon theme:time, developers may preview resulting theme bs_theme_preview(), instance:Interestingly, bs_theme_preview() shiny::runApp() with_themer FALSE.\ngives result shown Figure 9.1.\nFIGURE 9.1: Theme preview action\n","code":"\nbslib_neon_theme <- bs_theme(\n  version = 4, \n  bg = \"#000000\",\n  fg = \"#FFFFFF\",\n  primary = \"#9600FF\",\n  secondary = \"#1900A0\",\n  success = \"#38FF12\",\n  info = \"#00F5FB\",\n  warning = \"#FFF100\",\n  danger = \"#FF00E3\",\n  base_font = \"Marker Felt\",\n  heading_font = \"Marker Felt\",\n  code_font = \"Chalkduster\"\n)\n### RUN ### \n# OSUICode::run_example( \n#  \"bslib/theme-preview\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\nlibrary(bslib)\nlibrary(OSUICode)\n\nbs_theme_preview(bslib_neon_theme, with_themer = FALSE)"},{"path":"beautify-with-bootstraplib.html","id":"live-theming","chapter":"9 Beautify with {bslib}","heading":"9.1.4 Live theming","text":"Let’s go even ! Wouldn’t cool able modify app runtime plug play widget? possible bslib, owing run_with_themer() wrapper.\ntakes Shiny App object input (ie defined shiny::shinyApp()):depicted Figure 9.2, themer shows live\ntheming widget. also shows corresponding code output step step, \nupdate original theme. hood, leverages bs_theme_update() function, described .\nFIGURE 9.2: Live theming bslib. Left: themer widget. Right: code output.\nAlternatively, passing with_themer = TRUE inside bs_theme_preview also thing.\ndetails, refer reader official documentation.\nEven though exists third function, namely bs_themer, don’t encourage using , inserted server function, can easily forgotten mistake.","code":"\n### RUN ### \n# OSUICode::run_example( \n#  \"bslib/run-with-themer\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\nlibrary(bslib)\nlibrary(OSUICode)\n\nui <- fluidPage(\n  theme = bslib_neon_theme,\n  tabsetPanel(\n    tabPanel(\n      \"First tab\",\n      \"The contents of the first tab\",\n      actionButton(\"test\", \"Test\")\n    ),\n    tabPanel(\n      \"Second tab\",\n      \"The contents of the second tab\"\n    )\n  )\n)\nserver <- function(input, output, session) {}\nrun_with_themer(shinyApp(ui, server))"},{"path":"beautify-with-bootstraplib.html","id":"bslib-low-level","chapter":"9 Beautify with {bslib}","heading":"9.2 Low level customization","text":"","code":""},{"path":"beautify-with-bootstraplib.html","id":"add-new-variables","chapter":"9 Beautify with {bslib}","heading":"9.2.1 Add new variables","text":"bs_add_variables() adds new variables specific position within theme. default, inserted Sass defaults. lower level function since \nknow corresponding Bootstrap variable(s). Let’s consider example Bootstrap 4 badge aim changing font size, font weight padding. corresponding Sass code may found , identify variables, whose default values shown Bootstrap 4 variables code :Now create custom theme, increasing font weight, size changing border radius obtain rounder corners:tempting change global $font-weight-bold might affect\nelements. Let’s just overwrite badge-font-weight.badge code given following HTML:leverage previous knowledge convert R make browsable htmltools:\nFIGURE 9.3: Custom Bootstrap 4 badge bslib. Left: custom badge, right: default badge.\nbs_theme_dependencies() used outside Shiny context include theme Sass code dependency.","code":"// Typography\n//\n// Font, line-height, and color for body text, headings, and more.\n$font-weight-bold:        700 !default;\n\n// Define common padding and border radius sizes and more.\n$border-radius:           .25rem !default;\n\n// Badges\n\n$badge-font-size:         75% !default;\n$badge-font-weight:       $font-weight-bold !default;\n$badge-padding-y:         .25em !default;\n$badge-padding-x:         .4em !default;\n$badge-border-radius:     $border-radius !default;\nlibrary(magrittr)\n\ncustom_badge_theme <- bs_theme(\n  version = 4,\n  # high level theming  \n  success = htmltools::parseCssColors(\"lightgreen\")\n) %>% \n  bs_add_variables(\n    # low level theming\n    \"badge-font-weight\" = 900,\n    \"badge-font-size\" = \"100%\",\n    \"badge-padding-y\" = \"0.5em\",\n    \"badge-padding-x\" = \"0.8em\",\n    \"badge-border-radius\" = \"1rem\"\n  )<span class=\"badge badge-success\">Success<\/span>\nlibrary(htmltools)\n\nmy_badge <- a(class = \"badge badge-success\", \"1\")\npreview_badge <- function(theme = NULL) {\n  if (interactive()) {\n    tag <- if (is.null(theme)) {\n      # default bs4 theme\n      bs_theme(version = 4)\n    } else {\n      # altered badge\n      theme\n    }\n    browsable(\n      tags$body(\n        br(), \n        bs_theme_dependencies(theme), \n        my_badge\n      )\n    )\n  }\n}\n\n# preview_badge(custom_badge_theme)\n# preview_badge() # default badge"},{"path":"beautify-with-bootstraplib.html","id":"import-external-rules","chapter":"9 Beautify with {bslib}","heading":"9.2.2 Import external rules","text":"Let’s try another example. like bring refreshment Bootstrap UI elements one modern UI kit date, namely 98.css, Windows 98 CSS kit. CSS assets may accessed jsdelivr, shown :bslib exposes neat tools import extra CSS current theme, bs_add_rules(), calls sass::sass_file() hood:three theme colors #c0c0c0 background colors (except primary), #03158b primary #222222 text. also disable rounded option button borders stay squared.run corresponding app may call windows98_theme %>% bs_theme_preview() copy paste \ncode R console.run demonstration, ’ll notice slider input properly\nstyled. ’s surprising knowing slider shaped Bootstrap Ion.RangeSlider. Therefore, want better appearance, like 98.css, need extra work. output shown Figure 9.4.\nFIGURE 9.4: Modern Windows 98 theme Shiny\n","code":"\nwin98_cdn <- \"https://cdn.jsdelivr.net/npm/98.css@0.1.16/\"\nwin98_css <- paste0(win98_cdn, \"dist/98.min.css\")\ntheme %>%\n  bs_add_rules(\n    sprintf('@import \"%s\"', win98_css)\n  )\nwindows_grey <- \"#c0c0c0\"\nwindows98_theme <- bs_theme(\n  version = 4, \n  bg = windows_grey,\n  fg = \"#222222\",\n  primary = \"#03158b\",\n  base_font = c(\"Times\", \"Arial\"),\n  secondary = windows_grey,\n  success = windows_grey,\n  danger = windows_grey,\n  info = windows_grey,\n  light = windows_grey,\n  dark = windows_grey,\n  warning = windows_grey,\n  \"font-size-base\" = \"0.75rem\",\n  \"enable-rounded\" = FALSE\n) %>%\n  bs_add_rules(\n    sprintf('@import \"%s\"', win98_css)\n  )\n### RUN ### \n# OSUICode::run_example( \n#  \"bslib/windows-98\" \n# ) "},{"path":"beautify-with-bootstraplib.html","id":"dynamic-theming","chapter":"9 Beautify with {bslib}","heading":"9.3 Dynamic theming","text":"","code":""},{"path":"beautify-with-bootstraplib.html","id":"basics-2","chapter":"9 Beautify with {bslib}","heading":"9.3.1 Basics","text":"Now, let’s say design app want give choice vanilla shiny design new cyberpunk theme, created previous section. leverage new session$setCurrentTheme feature allows pass bslib generated themes JavaScript session object. Shiny app contains Bootstrap 4 toggle defined theme_toggle() function, value either TRUE FALSE. JavaScript side, first create custom shiny input Shiny.setInputValue gets current mode value toggle. TRUE, custom theme applied session$setCurrentTheme observeEvent().FALSE, fall back default Bootstrap 4 theme provided bs_theme(version = 4).Like fresh, bslib theme apply static plots, HTML elements. Therefore load thematic.time writing, issue bindCache() aware session$setCurrentTheme() described , shiny 1.6. Moreover, session$setCurrentTheme() able handle dynamic change Bootstrap version.common mistake forget specify session object server function, cause session$setCurrentTheme() fail. careful!","code":"\ntheme_toggle <- function() {\n  div(\n    class = \"custom-control custom-switch\",\n    tags$input(\n      id = \"custom_mode\",\n      type = \"checkbox\",\n      class = \"custom-control-input\",\n      onclick = HTML(\n        \"Shiny.setInputValue(\n          'dark_mode',\n          document.getElementById('custom_mode').value\n        );\"\n      )\n    ),\n    tags$label(\n      \"Custom mode?\",\n      `for` = \"custom_mode\",\n      class = \"custom-control-label\"\n    )\n  )\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"bslib/dynamic-theming\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\nlibrary(bslib)\nlibrary(thematic)\n\ndefault <- bs_theme(version = 4)\n\nui <- fluidPage(\n  theme = default,\n  theme_toggle(),\n  sliderInput(\"obs\", \"N:\", min = 0, max = 10, value = 5),\n  plotOutput(\"distPlot\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$custom_mode, {\n    session$setCurrentTheme(\n      if (input$custom_mode) bslib_neon_theme else default\n    )\n  })\n\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n}\n\nthematic_shiny()\nshinyApp(ui, server)"},{"path":"beautify-with-bootstraplib.html","id":"custom-elements","chapter":"9 Beautify with {bslib}","heading":"9.3.2 Custom elements","text":"elements core shiny components like numericInput() thematic compatible elements plotOutput(), bslib provides tools design dynamically themeable custom components.Let’s take example simple card Sass code defined :.supercard shadow, takes half page width fixed height.\nNotice background-color takes value $primary Sass variable,\ninherited Bootstrap 4..supercard_body adds padding card body content., convenience, put Sass code inside R string, even though best practice \nsave file compile sass_file().try run sass(input = sass_str),\nfail, $primary defined. Now, goal link custom Sass code\nmain app theme, created bs_theme(). invoke bs_dependency() function :input refers list Sass rules, sass_str example.theme theme generated bs_theme().name version metadata.case bslib context, ie app pass bs_theme() element,\ncreate fallback containing card CSS code:shown, Chapter 4, add dependency card\ntag. Importantly, wrap inside bs_dependency_defer() enables us dynamically update theme server\nside, time session$setCurrentTheme called:create simple dark theme utilized session$setCurrentTheme run app:Live theming requires pass session parameter server function. Don’t forget !reader invited exploit run_with_themer() capabilities, allows\ndynamically modify current theme, shown Figure 9.5.\nFIGURE 9.5: Theme preview custom component\n, try without passing theme fluidPage(), test CSS fall back strategy:","code":".supercard {\n  box-shadow: 0 4px 10px 0 rgb(0, 0, 0), 0 4px 20px 0\n  rgb(0, 0, 0);\n  width: 50%;\n  height: 200px;\n  background-color: $primary;\n\n  .supercard_body {\n    padding: 0.01em 16px;\n  }\n}\nsass_str <- \"\n  .supercard {\n    box-shadow: 0 4px 10px 0 rgb(0, 0, 0), 0 4px 20px 0\n    rgb(0, 0, 0);\n    width: 50%;\n    height: 200px;\n\n    background-color: $primary;\n    .supercard_body {\n      padding: 0.01em 16px;\n    }\n}\"\nsuper_card_dependency <- function(theme) {\n\n  dep_name <- \"supercard\"\n  dep_version <- \"1.0.0\"\n\n  if (is_bs_theme(theme)) {\n    bs_dependency(\n      input = sass_str,\n      theme = theme,\n      name = dep_name,\n      version = dep_version\n    )\n  } else {\n    htmlDependency(\n      name = dep_name,\n      version = dep_version,\n      src = \"supercard-1.0.0/css\",\n      stylesheet = \"super-card.css\",\n      package = \"OSUICode\"\n    )\n  }\n}\nsuper_card <- function(...) {\n  div(\n    class = \"supercard\",\n    div(class = \"supercard_body\", ...),\n    bs_dependency_defer(super_card_dependency)\n  )\n}\ndark_theme <- bs_theme(version = 4) %>%\n  bs_theme_update(\n    bg = \"black\",\n    fg = \"white\",\n    primary = \"orange\"\n  )\n### RUN ### \n# OSUICode::run_example( \n#  \"bslib/custom-components\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\nlibrary(bslib)\nlibrary(OSUICode)\n\nui <- fluidPage(\n  theme = bs_theme(),\n  theme_toggle(),\n  br(),\n  super_card(\"Hello World!\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$custom_mode, {\n    session$setCurrentTheme(\n      if (input$custom_mode) {\n        bslib_dark_theme\n      } else {\n        bs_theme(version = 4)\n      }\n    )\n  })\n}\n\nshinyApp(ui, server)\nui <- fluidPage(super_card(\"Hello World!\"))\nserver <- function(input, output) {}\nshinyApp(ui, server)"},{"path":"beautify-with-bootstraplib.html","id":"bslib-renderHook","chapter":"9 Beautify with {bslib}","heading":"9.3.3 Conditional rendering","text":"","code":""},{"path":"beautify-with-bootstraplib.html","id":"bootstrap-badges","chapter":"9 Beautify with {bslib}","heading":"9.3.3.1 Bootstrap badges","text":"section, see create components whose rendering may adapt depending \ncurrently active theme properties, like version. Bootstrap badges slightly different structures Bootstrap 3 Bootstrap 4/5:Bootstrap 3 badges don’t color class contrary Bootstrap 4 5. Bootstrap 4 5 badges color classes slightly differ: badge-<COLOR> (BS4) vs bg-<COLOR> (BS5). , lets’ write common wrapper create bs_badge() function Shiny works Bootstrap versions. question create three different functions!\ncommon skeleton tag simple span element badge class. Depending version, \ncreate render hook htmltools::tagAddRenderHook() able adequately alter tag structure. first get currently active theme shiny::getCurrentTheme() bslib::bs_current_theme(). check bslib theme yes, recover version bslib::theme_version(). Note importance timing. Calling shiny::getCurrentTheme() outside render hook give NULL, thereby preventing code work. raise error color used whenever Bootstrap version lower 4. case Bootstrap 4 5, utilize htmltools::tagQuery() efficiently modify tag structure one single flow instructions, shown section 2.6. Result shown :Let’s test , result illustrated Figure 9.6.\nFIGURE 9.6: Conditional rendering Bootstrap component. Left: BS3 badge; center: BS4 badge; right: BS5 badge.\n","code":"<!-- BS3 -->\n<span class=\"badge\">42<\/span>\n\n<!-- BS4 -->\n<span class=\"badge badge-secondary\">New<\/span>\n\n<!-- BS5 -->\n<span class=\"badge bg-secondary\">New<\/span>\nbs_badge <- function(text, color = NULL) {\n  # Create common badge skeleton for BS3/4/5\n  badge_skeleton <- tags$span(class = \"badge\", text)\n  \n  # Handle BS4 and BS5 extra class\n  if (!is.null(color)) {\n    badge_skeleton <- tagAddRenderHook(\n      badge_skeleton, function(x) {\n      # get theme and version\n      theme <- getCurrentTheme()\n      version <- if (bslib::is_bs_theme(theme)) {\n        bslib::theme_version(theme)\n      }\n      \n      switch(\n        version,\n        # stop if color is used with BS3\n        \"3\" = stop(\n          sprintf(\n            \"color is not available for Bootstrap %s\", \n            version\n          )\n        ),\n        \"4\" =  tagQuery(x)$\n          addClass(sprintf(\"badge-%s\", color))$\n          allTags(),\n        \"5\" = tagQuery(x)$\n          addClass(sprintf(\"rounded-pill bg-%s\", color))$\n          allTags()\n      )\n    })\n  }\n  \n  badge_skeleton\n  \n}\n# BS3\nui <- fluidPage(\n  theme = bs_theme(version = 3),\n  bs_badge(42)\n)\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n# BS4\nui <- fluidPage(\n  theme = bs_theme(version = 4),\n  bs_badge(42, \"primary\")\n)\nshinyApp(ui, server)\n\n# BS5\nui <- fluidPage(\n  theme = bs_theme(version = 5),\n  bs_badge(42, \"primary\")\n)\nshinyApp(ui, server)"},{"path":"beautify-with-bootstraplib.html","id":"bootstrap-navs","chapter":"9 Beautify with {bslib}","heading":"9.3.3.2 Bootstrap navs","text":"Another great real life example documented , briefly consists handling nav element differences\nBootstrap 3 Bootstrap 4/5.","code":""},{"path":"beautify-with-bootstraplib.html","id":"bslib-bootstrap-accordion","chapter":"9 Beautify with {bslib}","heading":"9.3.3.3 Guided exercise: Bootstrap accordions","text":"conclude part guided exercise. Similarly badges, Bootstrap accordions differ\nthree last major version. First, don’t natively exist Bootstrap 3, tag structure different Bootstrap 4 5. purpose activity provide generalized wrapper support versions.Figure 9.7 illustrates Bootstrap 5 accordion. \ncomposed items can collapse one clicks title. Overall, convenient \nsave space user interface, amount text much printed .\nFIGURE 9.7: Bootstrap 5 accordion.\nHTML point view, accordion main div wrapper accordion class, inside found accordion items. Whereas Bootstrap 5, elements div accordion-item class, Bootstrap 4 considers div card class. accordion item composed title button able control collapsed state linked body part, latter simple div. link made data-bs-target attribute title must match id attribute body part. data-bs-toggle activates JS, makes whole component collapse. body element refers parent accordion data-bs-parent must match parent id, thereby guarantying unwanted interaction multiple accordions. HTML structure BS5 accordion:BS4 accordion:Compare Bootstrap 4 5 HTML code. differences?\ntag structure ? differences tag attributes?Based previous question, create bs_accordion() function. \nfunction starts defining tag structure common BS4 BS5.Let’s handle Bootstrap differences bs_accordion(). shown , leverage tagAddRenderHook(). First, create get_theme_version() function detect currently\nused theme version. call function inside tagAddRenderHook() store \nversion variable.Now, ’ll edit tagAddRenderHook() raise error Bootstrap version 3. Edit bs_accordion() incorporate code.good main wrapper. Let’s create bs_accordion_item() function, nested inside bs_accordion(). assume two main parameters, title content. get better code, ’ll design intermediate components header body. step, create body element since header slightly complex handle. look HTML structure, notice id, aria-labelledby data-(bs)-parent handled later bs_accordion(). parameters require know bs_accordion() id, impossible get within child element. also added\nactive parameter control start state. Fill ... element .Utilize tagAddRenderHook() handle BS4 BS5 differences bs_accordion_item().\nbs_accordion(), recover version get_theme_version().\n, create Bootstrap 4 item header based HTML structure shown .Add else statement handle Bootstrap 5, based HTML structure, provided .now handle missing classes add new elements. created switch start handle Bootstrap 4 Bootstrap 5 differences. Based accordion item HTML structure, fill missing tagQuery() steps Bootstrap 4.Bootstrap 5.come back bs_accordion() order create correct\nbs_accordion_item() children ids (mentioned 5) treat missing attributes. process items use lapply() since works well shiny tags. first prefix ids parent accordion one avoid uniqueness issue case multiple accordions (exist much better methods purpose example). , items resolved htmltools::.tags(), explained section 2.6.7.2. Fill blanks ....Right .tags() function, add switch handle Bootstrap 4 version. Fill blanks ....\nOverall codes add missing attributes accordion works properly.Add Bootstrap 5 case switch filling following code.Add newly processed accordion items end bs_accordion() render hook, paying attention fill blank.create Shiny app test newly designed components Bootstrap 4. may use bs_theme(version = 5) handle Bootstrap 5.Figure 9.8 shows expected output Bootstrap 4 5. Solutions may found appendix .2.1.\nFIGURE 9.8: Bootstrap accordions Shiny. Left: BS4 accordion; right: BS5 accordion.\n","code":"<!-- BS5 -->\n<div class=\"accordion\" id=\"accordionExample\">\n  <div class=\"accordion-item\">\n    <h2 class=\"accordion-header\" id=\"headingOne\">\n      <button \n      class=\"accordion-button\" \n      type=\"button\" \n      data-bs-toggle=\"collapse\" \n      data-bs-target=\"#collapseOne\" \n      aria-expanded=\"true\" \n      aria-controls=\"collapseOne\">\n        Accordion Item #1\n      <\/button>\n    <\/h2>\n    <div \n    id=\"collapseOne\" \n    class=\"accordion-collapse collapse show\" \n    aria-labelledby=\"headingOne\" \n    data-bs-parent=\"#accordionExample\">\n      <div class=\"accordion-body\">\n        Blablabla\n      <\/div>\n    <\/div>\n  <\/div>\n  <!-- Other items ... -->\n<\/div><div class=\"accordion\" id=\"accordionExample\">\n  <div class=\"card\">\n    <div class=\"card-header\" id=\"headingOne\">\n      <h2 class=\"mb-0\">\n        <button \n        class=\"btn btn-link btn-block text-left\" \n        type=\"button\" \n        data-toggle=\"collapse\" \n        data-target=\"#collapseOne\" \n        aria-expanded=\"true\" \n        aria-controls=\"collapseOne\">\n          Accordion Item #1\n        <\/button>\n      <\/h2>\n    <\/div>\n\n    <div \n    id=\"collapseOne\" \n    class=\"collapse show\" \n    aria-labelledby=\"headingOne\" \n    data-parent=\"#accordionExample\">\n      <div class=\"card-body\">\n        Blablabla\n      <\/div>\n    <\/div>\n  <\/div>\nbs_accordion <- function(id, items) {\n  # main wrapper\n  accordion_tag <- tags$div(\n    class = \"accordion\",\n    id = ...,\n    items\n  )\n  \n  accordion_tag\n}\n# Function to get the current them version\nget_theme_version <- function() {\n  theme <- bslib::...\n  if (bslib::...(theme)) bslib::...(theme)\n}\n\nbs_accordion <- function(id, items) {\n  \n  # Accordion wrapper (see 2 above)\n  \n  tagAddRenderHook(accordion_tag, function(x) {\n    # get theme version\n    version <- ...\n  })\n}\nif (version == ...) {\n  stop(\n    sprintf(\n      \"accordion is not available for Bootstrap %s\", \n      version\n    )\n  )\n}\nbs_accordion_item <- function(title, content) {\n  \n  item_body <- tags$...(\n    # id will be added from bs_accordion\n    # aria-labelledby also added from bs_accordion\n    # data parent differs between BS4 and BS5\n    class = paste(\"collapse\", if (active) ...),\n    tags$div(\n      # class differs between BS4 and BS5\n      ...\n    )\n  )\n  \n  # accordion item wrapper \n  tags$div(\n    # class differs between BS4 and BS5\n    ...\n  )\n}bs_accordion_item <- function(title, content, active = FALSE) {\n  \n  # item body code 5 (see above)\n  # item wrapper 5 (see above)\n  \n  tagAddRenderHook(..., function(x) {\n    # get theme and version\n    version <- ...\n    \n    # create accordion item header \n    ... <- if (version == \"4\") {\n      tags$div(\n        class = ...,\n        # id will be added from bs_accordion\n        tags$h2(\n          class = \"mb-0\",\n          tags$button(\n            class = ...,\n            type = \"button\",\n            `data-toggle` = \"collapse\",\n            # data-target will be added from bs_accordion \n            `aria-expanded` = tolower(...),\n            # aria-controls will be added from bs_accordion\n            title\n          )\n        )\n      )\n    }\n  }\n}else if (version == \"5\") {\n  tags$h2(\n    class = ...,\n    tags$button(\n      class = ...,\n      type = \"button\",\n      `data-bs-toggle` = \"collapse\",\n      `aria-expanded` = tolower(...),\n      title\n    )\n  )\n}\nbs_accordion_item <- function(title, content, active = FALSE) {\n  \n  # item body code (see 5 above)\n  # item wrapper (see above)\n  \n  tagAddRenderHook(..., function(x) {\n    # get theme and version (see 6 above)\n    # create accordion item header (see 6-7 above)\n    \n    # alter tag structure\n    switch(\n      version,\n      # don't need to handle BS3\n      \"4\" =  tagQuery(x)$\n        addClass(...)$\n        # prepend header tag\n        prepend(...)$\n        find(\".collapse\")$\n        children()$\n        # add class to item body\n        addClass(...)$\n        allTags()\n    )\n  })\n}bs_accordion_item <- function(title, content, active = FALSE) {\n  # item body code (see 5 above)\n  # item wrapper (see 5 above)\n  \n  tagAddRenderHook(..., function(x) {\n    # get theme and version (see 6 above)\n    # create accordion item header (see 6-7 above)\n    \n    # alter tag structure\n    switch(\n      version,\n      # don't need to handle BS3\n      \"4\" =  # see 8 above,\n      \"5\" = tagQuery(x)$\n        addClass(...)$\n        prepend(...)$\n        find(\".collapse\")$\n        addClass(\"accordion-collapse\")$\n        children()$\n        addClass(...)$\n        allTags()\n    )\n  })\n}\nbs_accordion <- function(id, items) {\n  \n  # Accordion wrapper (see 2 above)\n  \n  tagAddRenderHook(accordion_tag, function(x) {\n    # get theme and version (see 3 above)\n    # Check version (see 3 above)\n    \n    # process accordion items to add missing attributes\n    new_items <- lapply(seq_along(...), function(i) {\n      \n      # temp ids based on the parent id\n      heading_id <- paste(..., \"heading\", i, sep = \"_\")\n      controls_id <- paste0(..., \"_collapse_\", i)\n      target_id <- paste0(\"#\", controls_id)\n      \n      # resolve bs_accordion_item\n      items[[i]] <- as.tags(...)\n      \n      # see 11\n    })\n    # see 13\n  })\n}\n# handle BS4 \nswitch(\n  version,\n  \"4\" = tagQuery(...[[i]])$\n    find(\".card-header\")$\n    addAttrs(\"id\" = ...)$\n    find(\".btn\")$\n    addAttrs(\n      \"data-target\" = ...,\n      \"aria-controls\" = ...\n    )$\n    resetSelected()$\n    find(\".collapse\")$\n    addAttrs(\n      \"id\" = ...,\n      \"aria-labelledby\" = ...,\n      \"data-parent\" = paste0(\"#\", ...)\n    )$\n    allTags(),\n  \"5\" = # see 12\n)\ntagQuery(...[[i]])$\n  find(\".accordion-header\")$\n  addAttrs(\"id\" = ...)$\n  children()$\n  addAttrs(\n    \"data-bs-target\" = ...,\n    \"aria-controls\" = ...\n  )$\n  resetSelected()$\n  find(\".accordion-collapse\")$\n  addAttrs(\n    \"id\" = ...elt(),\n    \"aria-labelledby\" = ...,\n    \"data-bs-parent\" = paste0(\"#\", id)\n  )$\n  allTags()\n# alter main tag structure\ntagQuery(x)$\n  # replace accordion items processed above\n  empty()$\n  append(...)$\n  allTags()\n### RUN ### \n# OSUICode::run_example( \n#  \"bslib/conditional-rendering/bs4-accordions\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\nlibrary(bslib)\nlibrary(OSUICode)\n\nui <- fluidPage(\n  theme = bs_theme(version = 4),\n  bs_accordion(\n    id = \"accordion\",\n    items = tagList(\n      bs_accordion_item(\n        title = \"Item 1\",\n        \"Item 1 content\",\n        active = TRUE\n      ),\n      bs_accordion_item(\n        title = \"Item 2\",\n        \"Item 2 content\"\n      )\n    )\n  )\n)\n\nserver <- function(input, output, session) {}\nrun_with_themer(shinyApp(ui, server))"},{"path":"beautify-with-bootstraplib.html","id":"further-resources","chapter":"9 Beautify with {bslib}","heading":"9.4 Further resources","text":"reader refer bslib various vignettes.","code":""},{"path":"survival-kit-javascript.html","id":"survival-kit-javascript","chapter":"10 JavaScript for Shiny","heading":"10 JavaScript for Shiny","text":"Design outstanding interface just making look nice HTML CSS.\nhandle interactivity, widget creation, data flow R JS? JavaScript (JS) biggest ally. understand Shiny works inside, especially inputs handled, gradually dive core contains substantial amount JS. Therefore, chapter proposes rather brief introduction JS jQuery still necessary book supposed standalone. Advanced JS users may likely skip part. wish know language, MDN web docs Mozilla excellent resource.","code":""},{"path":"survival-kit-javascript.html","id":"shiny-javascript-sources","chapter":"10 JavaScript for Shiny","heading":"10.1 Shiny JavaScript sources","text":"Since commit 1b8635d,\nwhole JS core converted TypeScript. book written changes, ’ll point user code prior 1b8635d, state. Practically, underlying mechanisms remain exactly .Let’s look shiny (Chang et al. 2021) github project. R package, composed standard folders like R, man, tests elements. inst folder contains resources external dependencies like Bootstrap 3, jQuery, datatables, fontawesome, … mentioned Chapter 3 sorted www/shared sub-folder well whole CSS JS Shiny codes. Notice presence minified files like shiny.min.js non minified elements shiny.css. Overall, minification process reduces loading time web page removing comments, extra spaces, thereby decreasing file size. instance shiny.js 6500 lines code (240kb), shiny.min.js 91.4kb.Notice srcjs/ folder shown Figure 10.1. actually contains pieces reconstruct whole shiny.js file.\nFIGURE 10.1: Shiny JavaScript sources\nSince Chapter 12 ’ll use scripts, little understanding basic underlying JavaScript concepts necessary.","code":""},{"path":"survival-kit-javascript.html","id":"introduction-to-javascript","chapter":"10 JavaScript for Shiny","heading":"10.2 Introduction to JavaScript","text":"JavaScript created 1995 Brendan Eich also known ECMAScript (ES). Interestingly, might heard ActionScript, implementation ES Adobe Systems. Nowadays, JavaScript centerpiece web development across websites.quick example. personal blog, probably know Hugo Jekyll, especially R interfaces like blogdown (Xie, Dervieux, Presmanes Hill 2021). tools allow one rapidly develop nice looking blog just minutes, focusing content rather technical aspects, really point! Now, open HTML inspector introduced Chapter 1.3, click elements tab, may open default, uncollapse <head> tag, see lot scripts included, shown Figure 10.2. Similarly <body> tag.\nFIGURE 10.2: website full JavaScript\nthree ways include scripts HTML document:Use <script> tag JS code inside.Add onclick attribute HTML tag (preferably button) trigger JS soon clicked.Import external file containing JS code .Whether choose first, second, third method depends content script. consider JS library jQuery, unfortunately contains much code making challenge understand. make user chose third method, time.","code":"<script type=\"text/javascript\">\n// JS code here\n<\/script><button id=\"hello\" onclick=\"jsFunction()\">Hello World<\/button><!-- We use the src attribute to link the external file -->\n<script type=\"text/javascript\" src=\"file.js\">"},{"path":"survival-kit-javascript.html","id":"setup","chapter":"10 JavaScript for Shiny","heading":"10.3 Setup","text":"Like R Python, JavaScript (JS) interpreted language. executed client-side, words browser. also means JS code may run without suitable tool. following, ’ll list tools test JS code, even though JS may also run web browser developer tools, demonstrated section 10.6.","code":""},{"path":"survival-kit-javascript.html","id":"install-node","chapter":"10 JavaScript for Shiny","heading":"10.3.1 Node","text":"Node contains interpreter JS well dependencies manager, npm (Node Package Manager). install Node computer, browse website follow installation instructions. Afterwards, open terminal check :returns something. , Node may properly installed.prefer installing Node, exists alternatives like repl., offering Node.js online compiler environment. enough follow part.","code":"which node\nnode --version"},{"path":"survival-kit-javascript.html","id":"choose-a-good-ide","chapter":"10 JavaScript for Shiny","heading":"10.3.2 Choose a good IDE","text":"Personally, really like VSCode coding JS, contains Node interpreter allowing seamlessly execute JS code. side note, encourage try dracula color theme, favorite! R user, also like RStudio IDE, provided Node installed. , explain run JS code IDE’s. section 10.6, show manipulate JS code directly web browser, HTML inspector. method mostly use remaining book since also work HTML CSS time.","code":""},{"path":"survival-kit-javascript.html","id":"first-script","chapter":"10 JavaScript for Shiny","heading":"10.3.3 First Script","text":"Let’s write first script:notice instructions end ;. can run script either RStudio IDE VSCode.\nFIGURE 10.3: Run JS VSCode\nVSCode, clicking run arrow (top center) Figure 10.3, triggers node hello.js command, tells Node run script. see result right panel (code=0 means execution fine even compute time). run script RStudio IDE, one needs click terminal tab (also open basic terminal) type node hello.js (node mycustompath/hello.js already script folder). see Hello World message console (see Figure 10.4).\nFIGURE 10.4: Run JS terminal\n","code":"console.log(\"Hello World\");"},{"path":"survival-kit-javascript.html","id":"programming-with-js-basis","chapter":"10 JavaScript for Shiny","heading":"10.4 Programming with JS: basis","text":"now set introduce basis JS. many languages, JS made variables instructions. instructions end ; symbol.","code":""},{"path":"survival-kit-javascript.html","id":"js-types","chapter":"10 JavaScript for Shiny","heading":"10.4.1 JS types","text":"JS defines several types:Number. JS distinguish integers others. R instance, numeric contains integers double.String: characters (‘blabla’).Boolean: true/false.check type element, may use typeof operator:JS, typeof function like R!!! Therefore don’t write typeof('string');.","code":"typeof 1; // number\ntypeof 'pouic'; // string"},{"path":"survival-kit-javascript.html","id":"variables-1","chapter":"10 JavaScript for Shiny","heading":"10.4.2 Variables","text":"Variables key elements programming languages. allow store intermediate results manipulations. JS, variable defined :type.name.value.valid variable name:Doesn’t use reserved JS name like typeof!Doesn’t start number (123soleil)!Doesn’t include space (total price)!Besides, code style critical element programming, increasing readability general consistence. several styles, main ones snake_case camelCase. shown , two ways create variables JavaScript.","code":""},{"path":"survival-kit-javascript.html","id":"const","chapter":"10 JavaScript for Shiny","heading":"10.4.2.1 Const","text":"may use const:shown , variables:modified.share name.Must assigned value.","code":"const n = 1;\nn = 2; // error\nconst n = 3; // error\nconst a;\na = 1; // errors"},{"path":"survival-kit-javascript.html","id":"let","chapter":"10 JavaScript for Shiny","heading":"10.4.2.2 let","text":"Another way define variable:mathematical operators apply, example:List numerical operators JS:+ (also allows concatenate strings together)-*/% (modulo)++ (incrementation)-- (decrementation)may also know var declare variables. difference let? mainly scope reason:see later still use var shiny core.","code":"let myVariable = 'welcome';\nmyVariable = 1;\nconsole.log(myVariable);let myNumber = 1; // initialize\nmyNumber--; // decrement\nconsole.log(myNumber); // print 0var i = 1;\n{\n  var i = 2; // this will modify i globally, not locally\n}\nconsole.log(`i is ${i}`); // i is 2.\n\nlet j = 1;\n{\n  let j = 2; // j is only declared locally and not globally!\n}\nconsole.log(`j is ${j}`); // j is 1"},{"path":"survival-kit-javascript.html","id":"conditions","chapter":"10 JavaScript for Shiny","heading":"10.4.3 Conditions","text":"operators check conditions:=== (equal value, equal type B)== (equal B)!== (equal value equal type B)!= (equal B)>, >=<, <=(B) &&(B) ||Importantly, prefer === !== compare elements since 5 == \"5\" return true, generally want!test conditions exists several ways:(condition) { console.log('Test passed'); }(condition) { instruction } else { instruction B }ternary operator shortcut condition ? instruction true : instruction false may chained. complex instructions, recommend using , may affect code readability.Whenever lot possible conditions evaluated, better choose switch:","code":"switch (variable) {\n  case val1: // instruction 1\n  break; // don't forget the break!\n  case val2:  // instruction 2\n  break;\n  default: // when none of val1 and val2 are satisfied\n}"},{"path":"survival-kit-javascript.html","id":"objects","chapter":"10 JavaScript for Shiny","heading":"10.4.4 Objects","text":"JavaScript object oriented programming language (like Python). object defined :type.properties.methods (manipulate properties).Let’s construct first object:comments code:access object property, use object.<property>.print human readable version object, JSON.stringify job.introduced string interpolation ${*}. * may valid expression.Methods called object.<method>. use refer object . Take note, see lot!JavaScript, already predefined objects interact arrays, dates, …","code":"const me = {\n  name : 'Divad',\n  age : 29,\n  music : '',\n  printName: function() {\n    console.log(`I am ${this.name}`);\n  }\n}\n\nme.geek = true; // works (see const variables above)\n// print a human readable object.\nconsole.log(JSON.stringify(me));\n\nconsole.log(me.name);\nconsole.log(me.age);\nconsole.log(me.music);\n// don't repeat yourself!!!\nfor (let key in me) { // here is it ok to use `in`\n console.log(`me[${key}] is ${me[key]}`);\n}\n\nme.printName();\n\nme = {\n  name: 'Paul',\n  age: 40\n} // error (see const variables above)"},{"path":"survival-kit-javascript.html","id":"arrays","chapter":"10 JavaScript for Shiny","heading":"10.4.4.1 Arrays","text":"array structure allowing store information instance:Array may nested:arrays, elements may accessed index, mentioned , first index 0 (1 like R).\ninstance, want get first element nested array, :Note length method returns size array convenient loops, ’ll see later:table referencing principal methods arrays.Among methods, mainly use push length next chapters:","code":"const table = [1, 'plop'];\ntable = [2]; // error\nconsole.log(table);const nested = [1, ['a', [1, 2, 3]], 'plop'];\nconsole.log(nested);console.log(nested[0]);\n// To get deeply nested element\n// we may chain index\nnested[1][1] // Access [1, 2, 3]nested.length // 3\nnested[1].length // 2\nnested[1][1].length // 3table.push('hello'); // [1, \"plop\", \"hello\"]"},{"path":"survival-kit-javascript.html","id":"strings","chapter":"10 JavaScript for Shiny","heading":"10.4.4.2 Strings","text":"main methods related String object (character R).","code":""},{"path":"survival-kit-javascript.html","id":"math","chapter":"10 JavaScript for Shiny","heading":"10.4.4.3 Math","text":"mention useful methods handle mathematical objects.classic functions like sqrt, trigonometric functions course available. call Math.* prefix.","code":""},{"path":"survival-kit-javascript.html","id":"iterations","chapter":"10 JavaScript for Shiny","heading":"10.4.5 Iterations","text":"Iterations allow repeat instruction set instructions multiple times. Let’s assume array containing 100,000 random numbers. automatically print ? going see !","code":""},{"path":"survival-kit-javascript.html","id":"for-loops","chapter":"10 JavaScript for Shiny","heading":"10.4.5.1 For loops","text":"loop multiple uses. convenient way print array’s elements use iteration:modern approach (ES6) consists , let keywords. define variable\ntake values among nested array print . Importantly, refer\nelement index, element ! classic approach shown uses index, slightly \nverbose.Contrary R, JavaScript index starts 0 (1)! good keep mind mix R JS.JS methods iterations. Let’s look forEach method arrays (introduced ES5):Since arrays objects, surprising see array.forEach(element, ...).loop use? answer : depends situation! Actually, even exists ways (replace get indexes array, like first code, really recommended).","code":"// ES6 syntax\nconst nested = [1, ['a', [1, 2, 3]], 'plop'];\nfor (let i of nested) {\n  console.log(i);\n}\n\n// or with the classic approach\nfor (let i = 0; i < nested.length; i++) {\n  console.log(nested[i]);\n}const letters = [\"a\", \"b\", \"c\", \"d\"];\nletters.forEach((letter) => {\n  console.log(letter);\n});"},{"path":"survival-kit-javascript.html","id":"other-iterations-while","chapter":"10 JavaScript for Shiny","heading":"10.4.5.2 Other iterations: while","text":"loops another way iterate, incrementation step taking place end instruction:","code":"const h = 3;\nlet i = 0;\nwhile (i <= h) {\n  console.log(i);\n  i++; // we need to increment to avoid infinite loop\n}"},{"path":"survival-kit-javascript.html","id":"functions-1","chapter":"10 JavaScript for Shiny","heading":"10.4.6 Functions","text":"Functions useful wrap succession instructions accomplish given task. Defining functions allows programmers save time (less copy paste, less search replace), make less errors easily share code. modern JavaScript (ES6), functions defined follows:functions computes maximum 2 provided numbers. comments scoping rules: variables defined inside function, like p, available within function scope, outside. noted functions may use global variables, defined outside like . Shiny JS core, ’ll still find classic way defining function:main difference ES6 syntax may understood environments.","code":"const a = 1;\nconst fun = (parm1, parm2) => {\n  console.log(a);\n  let p = 3;\n  // The Math object contains the max method\n  return Math.max(parm1, parm2);\n}\nlet res = fun(1, 2);\nconsole.log(res); // prints a and 2\nconsole.log(p); // fails as p was defined inside the functionfunction initShiny() {\n  // do things\n}"},{"path":"survival-kit-javascript.html","id":"about-js-modules","chapter":"10 JavaScript for Shiny","heading":"10.4.6.1 Export functions: about modules","text":"happens wrote 100 functions want reuse different scripts? prevent copying pasting, now introduce concept modules. Let’s save function script utils.js:create test.js script folder calls findMax function. , import corresponding module:ES6 introduced another way import export element across multiple scripts:","code":"const findMax = (parm1, parm2) => {\n  return Math.max(parm1, parm2);\n}\n\nmodule.exports = {\n  findMax : findMax\n}const { findMax } = require('./utils.js');\nfindMax(1, 2); // prints 2export { findMax, ... }; // in utils.js\nimport { findMax, ...} from './utils.js'; // in test.js"},{"path":"survival-kit-javascript.html","id":"js-code-compatibility","chapter":"10 JavaScript for Shiny","heading":"10.4.7 JS code compatibility","text":"ES6 fully supported web browsers, might wonder make JS code standard. exists tools called transpiler, convert modern JS code universal JS code. case Babel, one commonly used. chapter 22, ’ll see JS bundler, namely esbuild.","code":""},{"path":"survival-kit-javascript.html","id":"event-listeners","chapter":"10 JavaScript for Shiny","heading":"10.4.8 Event listeners","text":"explore web application, clicking button usually triggers something like computation, modal alert. work? JavaScript, interactivity plays critical role. Indeed, want web application react user inputs like mouse clicks keyboard events. introduce DOM events.Let’s consider basic HTML button:JavaScript side, first capture button element using id selector getElementById:.apply addEventListener method. short, event listener program triggers given event occurs (can add multiple event listeners per HTML element). takes two main parameters:event: click, change, mouseover, …function call, also known callback.","code":"<button id=\"mybutton\">Go!<\/button>const btn = document.getElementById('mybutton');btn.addEventListener('click', function() {\n  alert('Thanks!');\n});"},{"path":"survival-kit-javascript.html","id":"intro-jquery","chapter":"10 JavaScript for Shiny","heading":"10.5 jQuery","text":"","code":""},{"path":"survival-kit-javascript.html","id":"introduction-1","chapter":"10 JavaScript for Shiny","heading":"10.5.1 Introduction","text":"jQuery famous JavaScript library providing user friendly interface manipulate DOM present almost actual websites. slightly easier (understand convenient use) vanilla JS. use jQuery web page, must import code head HTML page:","code":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Including jQuery<\/title>\n    <!-- How to include jQuery -->\n    <script src=\"https://code.jquery.com/jquery-3.5.1.js\">\n    <\/script>\n  <\/head>\n  <body>\n\n    <p>Hello World<\/p>\n\n  <script>\n    $('p').css('color', 'red');\n  <\/script>\n\n  <\/body>\n<\/html>"},{"path":"survival-kit-javascript.html","id":"syntax","chapter":"10 JavaScript for Shiny","heading":"10.5.2 Syntax","text":"minimal jQuery code representing philosophy (“write less, .”):selector slot stands jQuery selector like class, id, element, [attribute], :input (select <input> elements) many . reminder, let’s consider following example:select interact element, use JavaScript jQuery:course possible chain selectors:good news already ease CSS selectors section 6.2!","code":"$(selector).action();<p class=\"text\">Hello World<\/p>// vanilla JS\nlet inner = document.getElementsByClassName('text').innerHTML;\n// jQuery\nlet inner = $('.text').html();<ul class=\"list\">\n  <li class=\"item\">1<\/li>\n  <li class=\"item\">2<\/li>\n  <li class=\"item\">3<\/li>\n  <li class=\"item\" id=\"precious-item\">4<\/li>\n<\/ul>\n\n<ul class=\"list\" id=\"list2\">\n  <li class=\"item\">1<\/li>\n  <li class=\"item\">2<\/li>\n  <li class=\"item\">3<\/li>\n  <li class=\"item\">4<\/li>\n<\/ul>// Returns an array containing 8 li tags\nlet items = $('.list .item');\n// Selects only li tags from the second ul element\nlet otherItems = $('#list2 .item');\n// Returns an array with 2 ul elements\nlet lists = $('ul');\n// Returns the first li element of the second ul.\nlet firstItem = $('#list2:first-child');"},{"path":"survival-kit-javascript.html","id":"good-practice","chapter":"10 JavaScript for Shiny","heading":"10.5.3 Good practice","text":"recommended wrap jQuery code follows:avoid interact DOM actually ready. time,\nforget , ’ll end many issues involving undefined elements.","code":"$(document).ready(function(){\n  // your code\n});\n\n// or a shortcut\n\n$(function() {\n  // your code\n});"},{"path":"survival-kit-javascript.html","id":"useful-functions","chapter":"10 JavaScript for Shiny","heading":"10.5.4 Useful functions","text":"exist filtering functions dedicated simplify item selection. list containing mostly used Shiny.","code":""},{"path":"survival-kit-javascript.html","id":"travel-in-the-dom","chapter":"10 JavaScript for Shiny","heading":"10.5.4.1 Travel in the DOM","text":"","code":""},{"path":"survival-kit-javascript.html","id":"manipulate-tags","chapter":"10 JavaScript for Shiny","heading":"10.5.4.2 Manipulate tags","text":"list main jQuery methods manipulate tags (adding class, CSS property…)","code":""},{"path":"survival-kit-javascript.html","id":"chaining-jquery-methods","chapter":"10 JavaScript for Shiny","heading":"10.5.5 Chaining jQuery methods","text":"lot jQuery methods may chained one method next using ..end chain ; step indented 2 spaces right direction:","code":"<ul>\n  <li>Item 1<\/li>\n  <li>Item 2<\/li>\n  <li>Item 3<\/li>\n  <li>Item 4<\/li>\n  <li>Item 5<\/li>\n<\/ul>$('ul')\n  .first()\n  .css('color', 'green') // add some style with css\n  .attr('id', 'myAwesomeItem') // add an id attribute\n  .addClass('amazing-ul');"},{"path":"survival-kit-javascript.html","id":"iterations-1","chapter":"10 JavaScript for Shiny","heading":"10.5.6 Iterations","text":"Like JavaScript, possible iterations jQuery. Let’s consider following HTML elements:Many jQuery methods implicit iteration. instance, change style matched element, don’t need :Instead, just write:much better. map method different purpose. creates new object based provided one:","code":"<ul>\n  <li>Item 1<\/li>\n  <li>Item 2<\/li>\n<\/ul>$('li').each(function() {\n  $(this).css('visibility', 'hidden'); // Hides all li items\n});$('li').css('visibility', 'hidden');const items = [0, 1, 2, 3, 4, 5];\nconst threshold = 3;\n\nlet filteredItems = $.map(items, function(i) {\n  // removes all items > threshold\n  if (i > threshold)\n    return null;\n  return i;\n});"},{"path":"survival-kit-javascript.html","id":"events","chapter":"10 JavaScript for Shiny","heading":"10.5.7 Events","text":"jQuery exists significant number methods related events. popular:.event frequently used Shiny since allows pass custom events part JS predefined events. instance shinydashboard (Chang Borges Ribeiro 2018) relies specific HTML/JavaScript/CSS template including homemade API handling dashboard events.","code":"$(element).click(); // click event\n$(element).change(); // trigger change on an element\n\n// attach an event handler function.\n// Here we add click\n$(element).on('click', function() {\n  // handle event\n});\n\n\n// one triggers only once\n$(element).one('click', function() {\n  // handle event\n});\n\n// useful to trigger plot resize in Shiny so that\n// they correctly fit their container\n$(element).resize();\n\n// similar to $(element).change();\n$(element).trigger('change');"},{"path":"survival-kit-javascript.html","id":"extending-objects","chapter":"10 JavaScript for Shiny","heading":"10.5.8 Extending objects","text":"last feature need mention jQuery ability extend objects additional properties /method.pure JS use Object.defineProperty:","code":"// jQuery way\n$(function() {\n  let object1 = { apple: 0 };\n  $.extend(object1, {\n    print: function() {\n      console.log(this);\n    }\n  });\n  object1.print();\n});// pure JavaScript\nObject.defineProperty(object1, 'print', {\n  value: function() {\n    console.log(this);\n  },\n  writable: false\n});"},{"path":"survival-kit-javascript.html","id":"shiny-js-inspector","chapter":"10 JavaScript for Shiny","heading":"10.6 Shiny, JavaScript and the HTML inspector","text":"part , provided elementary JS knowledge. section comes back main point book, Shiny. describe leverage developer tools test, run debug JavaScript code related Shiny app.","code":""},{"path":"survival-kit-javascript.html","id":"the-console-panel","chapter":"10 JavaScript for Shiny","heading":"10.6.1 The console panel","text":"developing JS code, often put console.log(var) calls track content given variable check code supposed . resulting messages, errors warnings printing console, also called Read-eval-print loop (REPL), suitable experiment practice new JS/jQuery skills.","code":""},{"path":"survival-kit-javascript.html","id":"a-real-repl","chapter":"10 JavaScript for Shiny","heading":"10.6.1.1 A real REPL","text":"warm , run shiny app open Chrome DevTools. Notice two Console tabs (next Elements bottom, latter may visible time can activated parameters), depicted Figure 10.5. recommend using bottom one still see Elements tab preview DOM modifications real time.\nFIGURE 10.5: Console panel DevTools\nInterestingly, may access element contained window. Copy paste $(\"body\").addClass(\"plop\"); prompt. Notice happens Elements tab.","code":"\nui <- fluidPage()\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)"},{"path":"survival-kit-javascript.html","id":"track-errors-and-warnings","chapter":"10 JavaScript for Shiny","heading":"10.6.1.2 Track errors and warnings","text":"lot Shiny app issues Stack Overflow RStudio community easily solved quickly inspecting console.","code":""},{"path":"survival-kit-javascript.html","id":"broken-shiny-app-debug","chapter":"10 JavaScript for Shiny","heading":"10.6.2 Debug Shiny/JS code with the inspector","text":"debug Shiny apps inspector, scripts folder accessible app like www/ folder using addResourcePath(). Moreover,\nminified files, source maps, allow reconstruct original scripts, minification process. instance, Shiny shiny.min.js.map. practice, R packages bundling HTML templates ship files since quite large (> 1.5MB) CRAN restricts package size 5MB. instance, framework7 HTML template, shinyMobile built (Granjon, Perrier, Rudolf 2021), source maps size woudl exceed 5MB obviously big include R package.following, consider simple shiny app deployed shinyapps.io, notification displayed JavaScript soon user clicks action button. deliberately made typos, goal find fix .Browse appOpen Chrome DevToolsClick action button (pretty sure clicked step 2 ;))expected shown Figure 10.6, console displays \nerror message: Uncaught TypeError: read property 'show' undefined. Sounds good doesn’t ?\nFIGURE 10.6: Error console panel\nExpand error message show stack trace. see error occurred onclick event calling sendNotif function. Interestingly, can open file clicking provided link (notif.js:2). get layout similar Figure 10.7, depending screen width.\nFIGURE 10.7: Inspect source causing error\nLet’s briefly describe Figure 10.7. left side, can navigate files accessible web server, shiny internal resources, shiny external dependencies (like Bootstrap 3) well scripts. app deployed shinyapps.io, scripts located folder starting _w_, corresponds shinyapps.io workerId (detail important understand. See ). central part contains opened script like classic IDE. right side displays debugging tools may trigger clicking corresponding accordion. scope shows variables/object values break point, watch allows track specific elements Event listener Breakpoints allows stop given listener type. create new “watcher” entering typeof message clicking add icon check message type within sendNotif function. Watched expressions saved close browser.Let’s briefly describe Figure 10.7. left side, can navigate files accessible web server, shiny internal resources, shiny external dependencies (like Bootstrap 3) well scripts. app deployed shinyapps.io, scripts located folder starting _w_, corresponds shinyapps.io workerId (detail important understand. See ). central part contains opened script like classic IDE. right side displays debugging tools may trigger clicking corresponding accordion. scope shows variables/object values break point, watch allows track specific elements Event listener Breakpoints allows stop given listener type. create new “watcher” entering typeof message clicking add icon check message type within sendNotif function. Watched expressions saved close browser.Put break point line 2 clicking left side center panel click action button trigger break point. also additionally set 2 Watch Expressions (message duration) type string number, respectively, depicted Figure 10.8. According results, nothing seems wrong function arguments.Put break point line 2 clicking left side center panel click action button trigger break point. also additionally set 2 Watch Expressions (message duration) type string number, respectively, depicted Figure 10.8. According results, nothing seems wrong function arguments.\nFIGURE 10.8: Inspection scope breakpoint\nerror message Uncaught TypeError: read property 'show' undefined actually means notification exist. Try typing Shiny.notification console. ’ll get undefined. Instead, console suggests Shiny.notifications. Let’s replace wrong code notif.js script save .\nClick “Resume script execution” blue button (top left right panel). Notice notification displayed error thrown.Congrats! ’ve just debugged first shiny app web inspector. practice, code probably much complex example workflow remains .","code":""},{"path":"survival-kit-javascript.html","id":"shiny-js-object","chapter":"10 JavaScript for Shiny","heading":"10.6.3 The Shiny JavaScript object","text":"Shiny object exported top shiny.js file. words, may use object properties within HTML inspector console tab, JavaScript file shiny app :object contains many properties methods shown Figure 10.9. particular interest, like Shiny.setInputValue, Shiny.addCustomMessageHandler, Shiny.shinyapps, Shiny.bindAll, detailed later Chapters 12 15.\nFIGURE 10.9: Shiny JavaScript object\npoint, users may find options(shiny.minified = FALSE) convenient debug Shiny.js core.","code":"\nui <- fluidPage(\n  tags$script(\n    \"$(function() {\n      console.log(Shiny);\n    });\n    \"\n  )\n)\nserver <- function(input, output, session) {}\nshinyApp(ui, server)"},{"path":"survival-kit-javascript.html","id":"exercises","chapter":"10 JavaScript for Shiny","heading":"10.7 Exercises","text":"JavaScript console REPL, JavaScript exercises may done inside, except exercise 3 also involves HTML. case, reader may browse jsfiddle.","code":""},{"path":"survival-kit-javascript.html","id":"exercise-1-define-variables","chapter":"10 JavaScript for Shiny","heading":"10.7.1 Exercise 1: define variables","text":"Play example ","code":"let myNumber = 1; // initialize\nmyNumber--; // decrement\nconsole.log(myNumber); // print 0"},{"path":"survival-kit-javascript.html","id":"exercise-2-define-objects","chapter":"10 JavaScript for Shiny","heading":"10.7.2 Exercise 2: define objects","text":"object skeleton.Fill objection random values.Access name property.Create printAge method, returns age. Hint: refers object . instance .name gives name property.","code":"const me = {\n  name : ,\n  age : ,\n  music : ,\n  printName: function() {\n    console.log(`I am ${}`);\n  }\n}"},{"path":"survival-kit-javascript.html","id":"exercise-3-jquery","chapter":"10 JavaScript for Shiny","heading":"10.7.3 Exercise 3: jQuery","text":"JSFiddle allows insert HTML, CSS JavaScript test\ncode, share . also require specific configuration machine focus testing!Go JSFiddleInsert following HTML code chunk HTML sub-window.basic HTML skeletonIn JavaScript windows, select jQuery 3.5.1 dropdown menu (3.5.1? latest Shiny release (v1.6.0) relies version. therefore best practice ensure dependencies similar, least major version).Since best practice run jQuery code document ready (avoiding target non existing elements), wrap JS code following:Create event listener change third item color soon one click .\nHint 1: select specific item may use $(selector:eq()) index element. Keep mind JavaScript starts 0 1 like R!\nHint 2: reminder, create event listener jQuery, use following pattern.","code":"<!DOCTYPE HTML>\n<html>\n  <head>\n  <!-- head content here -->\n  <\/head>\n  <body>\n    <ul>\n      <li>Item 1<\/li>\n      <li>Item 2<\/li>\n      <li>Item 3<\/li>\n      <li>Item 4<\/li>\n      <li>Item 5<\/li>\n    <\/ul>\n  <\/body>\n<\/html>$(function() {\n  // your code\n});\n\n// or a more explicit syntax\n$(document).ready(function() {\n  // code\n});$(\"selector\").on(\"event_name\", function(e) {\n  // your logic\n});"},{"path":"survival-kit-javascript.html","id":"exercise-4-a-pure-js-action-button","chapter":"10 JavaScript for Shiny","heading":"10.7.4 Exercise 4: a pure JS action button","text":"another example button element attached event listener. Clicking button increment value 1. Fill blanks!","code":"<!DOCTYPE HTML>\n<html>\n  <head>\n  <!-- head content here -->\n  <\/head>\n  <body>\n    <button>click<\/button>\n  <\/body>\n<\/html>$(function() {\n\n  // recover the button inner html\n  const btnText = ...;\n\n    // event listener for button element\n    $(...).click(function() {\n    var val = ...;\n    // (1) increment button\n    // (2) add the button value to the inner text\n    ...\n\n    // show alert given condition\n    if (val > 3) {\n      ...\n    }\n  });\n\n});"},{"path":"shiny-intro.html","id":"shiny-intro","chapter":"11 R and JS","heading":"11 R and JS","text":"rather technical chapter aims untangling main mechanisms behind Shiny app, responsible \ndriving R/JavaScript communication, quite frankly mind blowing.feature leveraging httpuv package. HTTP protocol convenient chain numerous requests since connection closed request, previously stated section 5.2. already built complex apps festooned inputs outputs, may imagine amount exchanges necessary R JS, thereby making HTTP definitely suitable. need instead permanent connection, allowing bidirectional fluxes, , R wants inform JS something JS wants send information R.","code":""},{"path":"shiny-intro.html","id":"json-exhange-data","chapter":"11 R and JS","heading":"11.1 JSON: exhange data","text":"Since R JS different languages, can’t just send R code JS conversely. must find common language exchange data. Guess ? ’ll using JSON. JSON stands JavaScript Object Notation. JSON great advantage suitable many languages, particularly R. structure JS object can serialized character string, instance:next section ’ll see may interact JSON.","code":"\nmy_json <- '\n{\n  \"name\": \"David\",\n  \"color\": \"purple\",\n  \"planet\": \"Mars\",\n  \"animals\": [\n    {\n      \"name\": \"Euclide\",\n      \"type\": \"cat\",\n      \"age\": 7\n    }\n  ]\n}\n'"},{"path":"shiny-intro.html","id":"process-json-from-r","chapter":"11 R and JS","heading":"11.1.1 Process JSON from R","text":"two situations:Read data JSON convert appropriate R structure, like list().Export data R structure convert JSON, later use another language,\ninstance JS.commonly utilized R package jsonlite (Ooms 2020) allows read JSON fronJSON export JSON \ntoJSON. Let’s try read defined JSON:default, gives us list. Interestingly, nested array converted dataframe. don’t like\nbehavior, may pass simplifyVector = FALSE options, giving nested lists:Inversely, assume R list() want transmit JS. apply toJSON:Note auto_unbox (unbox atomic vectors length 1) pretty (adds indentation) options allow better rendering. many available options invite reader refer jsonlite\ndocumentation.time, pass complex data structures like nested lists. instance imagine send user profile information containing unique id, name organization, latter nested list fields like id, name, site, …:","code":"\nlibrary(jsonlite)\nres <- fromJSON(my_json)\nstr(res)#> List of 4\n#>  $ name   : chr \"David\"\n#>  $ color  : chr \"purple\"\n#>  $ planet : chr \"Mars\"\n#>  $ animals:'data.frame': 1 obs. of  3 variables:\n#>   ..$ name: chr \"Euclide\"\n#>   ..$ type: chr \"cat\"\n#>   ..$ age : int 7\nfromJSON(my_json, simplifyVector = FALSE)#> $name\n#> [1] \"David\"\n#> \n#> $color\n#> [1] \"purple\"\n#> \n#> $planet\n#> [1] \"Mars\"\n#> \n#> $animals\n#> $animals[[1]]\n#> $animals[[1]]$name\n#> [1] \"Euclide\"\n#> \n#> $animals[[1]]$type\n#> [1] \"cat\"\n#> \n#> $animals[[1]]$age\n#> [1] 7\nmy_list <- list(\n  name = \"David\",\n  color = \"purple\",\n  planet = \"Mars\"\n)\n\ntoJSON(my_list)#> {\"name\":[\"David\"],\"color\":[\"purple\"],\"planet\":[\"Mars\"]}\ntoJSON(my_list, auto_unbox = TRUE, pretty = TRUE)#> {\n#>   \"name\": \"David\",\n#>   \"color\": \"purple\",\n#>   \"planet\": \"Mars\"\n#> }\nmy_list <- list(\n  id = \"01522\",\n  name = \"David\",\n  organization = list(\n    id = \"AWER12\",\n    name = \"RinteRface\",\n    site = \"Switzerland\"\n  )\n)\n\ntoJSON(my_list, auto_unbox = TRUE, pretty = TRUE)#> {\n#>   \"id\": \"01522\",\n#>   \"name\": \"David\",\n#>   \"organization\": {\n#>     \"id\": \"AWER12\",\n#>     \"name\": \"RinteRface\",\n#>     \"site\": \"Switzerland\"\n#>   }\n#> }"},{"path":"shiny-intro.html","id":"process-json-from-js","chapter":"11 R and JS","heading":"11.1.2 Process JSON from JS","text":"Like R, JS two methods process JSON, provided JSON class.\nparse JSON, converting character JS object :Conversely, convert JS object JSON leveraging JSON.stringify:Now seen convenient way exchange data two different languages, R JS, going \nexplain communication made possible. involves web elements called websockets.","code":"JSON.parse(my_json)myObject = {\n  \"name\": \"David\",\n  \"color\": \"purple\",\n  \"planet\": \"Mars\",\n}\nJSON.stringify(my_object)"},{"path":"shiny-intro.html","id":"what-is-a-websocket","chapter":"11 R and JS","heading":"11.2 What is a websocket?","text":"going let’s define websocket. advanced technology allowing bidirectional communication (multiple) client(s) server. instance, chat system may built top websocket.3 server generally created using Node.js libraries like ws client JavaScript. R Shiny context, server part created httpuv (Cheng Chang 2021) client either {websocket} (Chang et al. 2020) (see ) directly JavaScript, described later:server side, startServer() also handles websockets. proceed, app list must contain extra element, onWSOpen function, defining actions perform connection established. actions listed httpuv WebSocket R6 class:onMessage invoked whenever message received connection.onClose invoked connection closed.send sends message server (client).client, may use {websocket} WebSocket class provided websocket package:briefly describe code:create new client socket instance, triggers server onWSOpen function, displaying welcome message.set client ws$onMessage event manager print message sent server.message sent client ws$send, received server sent back client, .\nFigure 11.1 shows main mechanisms.client connection closed, also closes server connection.\nFIGURE 11.1: Typical websocket flow client server.\nInterestingly, multiple clients can connect server.\nmay give try {OSUICode} side package:whose output shown .hood, whenever client initiates websocket connection, actually sends HTTP request server.\ncalled handshake, utilizing CONNECT HTTP method establish bridge HTTP server \nwebsocket server. server accepts, returned HTTP code 101, meaning switch protocole HTTP WS WSS, depicted Figure 11.2.\nFIGURE 11.2: HTTP upgrade WS shiny app example.\n","code":"\nlibrary(httpuv)\n# set the server\ns <- startServer(\"127.0.0.1\", 8080,\n  list(\n    onWSOpen = function(ws) {\n      # The ws object is a WebSocket object\n      cat(\"Server connection opened.\\n\")\n      \n      ws$onMessage(function(binary, message) {\n        cat(\"Server received message:\", message, \"\\n\")\n        ws$send(\"Hello client!\")\n      })\n      ws$onClose(function() {\n        cat(\"Server connection closed.\\n\")\n      })\n    }\n  )\n)\nlibrary(websocket)\n# set the client\nws <- websocket::WebSocket$new(\"ws://127.0.0.1:8080/\")\nws$onMessage(function(event) {\n  cat(\"Client received message:\", event$data, \"\\n\")\n})\n\n# Wait for a moment before running next line\nws$send(\"Hello server!\")\n\n# Close client\nws$close()\nlibrary(OSUICode)\nserver <- websocket_server()\nclient_1 <- websocket_client()\nclient_2 <- websocket_client()\nclient_1$send(\"Hello from client 1\")\nclient_2$send(\"Hello from client 2\")\nclient_1$close()\nclient_2$send(\"Only client 2 is here\")\nclient_2$close()\nSys.sleep(1)\nserver$stop()Server connection opened.\nServer connection opened.\nServer received message: Hello from client 1 \nClient received message: Hello client! \nServer received message: Hello from client 2 \nClient received message: Hello client! \nServer connection closed.\nServer received message: Only client 2 is here \nClient received message: Hello client! \nServer connection closed."},{"path":"shiny-intro.html","id":"from-R-to-JS","chapter":"11 R and JS","heading":"11.2.1 Example","text":"practice, Shiny use {websocket}. mentioned earlier, client directly built JS. better\nunderstand whole process, going design simple web page containing HTML range slider, pass value JS R websocket, R can produce simple histogram. Moreover, R also send message JS, thereby updating gauge meter widget located HTML page.proceed, need elements:HTML page containing slider, gauge JS logic create client websocket connection, process\nslider value update gauge value.app composed httpuv powered HTTP server serving HTML page well websocket server connect R JS.","code":""},{"path":"shiny-intro.html","id":"create-the-app","chapter":"11 R and JS","heading":"11.2.1.1 Create the app","text":"start server, leverage startServer() function expects:host, usually 127.0.0.1 work locally.host, usually 127.0.0.1 work locally.port, like 8080 (app may accessed <HOST>:<PORT> web browser).port, like 8080 (app may accessed <HOST>:<PORT> web browser).list functions describing app, particularly:\ncall expects HTTP response.\nonWSOpen expects websocket server.\nlist functions describing app, particularly:call expects HTTP response.onWSOpen expects websocket server.following, gradually explain design part.","code":""},{"path":"shiny-intro.html","id":"handle-the-websocket-server","chapter":"11 R and JS","heading":"11.2.1.1.1 Handle the websocket server","text":"important elements app consists server websocket (R) HTTP response (HTML, JS). websocket call back may defined follows. first raise message upon client connection:critical part onMessage call back process client message.’ll send JSON (client), leverage fromJSON() properly treat message. printed debugging purposes value injected inside hist(rnorm()) function.second task send message JS order update gauge value. See like updateSlider() function instance. utilize toJSON() send random value JS well polite message:finally add onClose callback handle client disconnection:whole code may found appendix .3.","code":"\nws_handler <- function(ws) {\n  # The ws object is a WebSocket object\n  cat(\"New connection opened.\\n\")\n}ws_handler <- function(ws) {\n  # The ws object is a WebSocket object\n  cat(\"New connection opened.\\n\")\n  \n  ws$onMessage(function(binary, message) {\n    # server logic\n  }\n}\n# capture client message\ninput_message <- jsonlite::fromJSON(message)\n\n# debug\nprint(input_message)\ncat(\"Number of bins:\", input_message$value, \"\\n\")\n\n# create plot\nhist(rnorm(input_message$value))\n# Send random value to JS\noutput_message <- jsonlite::toJSON(\n  list(\n    val = sample(0:100, 1),\n    message = \"Thanks client! I updated the plot...\"\n  ),\n  pretty = TRUE,\n  auto_unbox = TRUE\n)\nws$send(output_message)\n\n# debug\ncat(output_message)\nws$onClose(function() {\n  cat(\"Server connection closed.\\n\")\n})"},{"path":"shiny-intro.html","id":"handle-the-http-response","chapter":"11 R and JS","heading":"11.2.1.1.2 Handle the HTTP response","text":"HTTP response returned call function typically defined follows:returns list composed :status code, 200 OK HTTP status.headers indicating content nature.body display upon client request.start server, leverage startServer() function, giving default port 8080 host url 127.0.0.1:8080:next step replace http_reponse$body real HTML page containing client websocket handler,\nwell slider gauge widgets.","code":"\nhttp_response <- function(req) {\n  list(\n    status = 200L,\n    headers = list(\n      'Content-Type' = 'text/html'\n    ),\n    body = \"Hello world!\"\n  )\n}\nstartServer(\n  \"127.0.0.1\",\n  8080,\n  list(call = http_response, onWSOpen = ws_handler)\n)"},{"path":"shiny-intro.html","id":"design-the-page-content","chapter":"11 R and JS","heading":"11.2.1.2 Design the page content","text":"first task create websocket client connection:initialize socket connection WebSocket API. crucial\nhost port match parameters provided websocket server initialization.create event registry socket.onopen, socket.onmessage. Inside socket.onmessage, process message sent R JSON.parse creates object. Remember sent list R interested val element.Importantly, must wait elements available DOM starting action. Therefore, wrap whole thing inside document.addEventListener(\"DOMContentLoaded\", ...).eventually insert inside script tag basic HTML boilerplate, also contains gauge\nskeleton, borrowed MDN resources. min, max value set range, low, high optimum responsible color (red, yellow green, respectively):done, take care range slider whose code taken MDN resources:simple div containing input tag well label. input tag attributes, notably \nminimum maximum value. slider inserted HTML boilerplate shown :slider behavior entirely controlled JS. recover value document.getElementById \nadd label inner HTML know current value. also add event listener update slider value time range updated, either drag keyboard action oninput. best practice \nconvert slider value number parseInt, returned value defaults string. Finally, send value websocket, converting JSON may process R jsonlite (relevant package):","code":"document.addEventListener(\n  \"DOMContentLoaded\", function(event) {\n    // Capture gauge widget\n    let gauge = document.getElementById(\"mygauge\");\n    // Initialize client socket connection\n    let mySocket = new WebSocket(\"ws://<HOST>:<PORT>\");\n    mySocket.onopen = function (event) {\n      // do things\n    };\n    // Handle server message\n    mySocket.onmessage = function (event) {\n      let data = JSON.parse(event.data);\n      gauge.value = data.val;\n    };\n});<!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n    <script language=\"javascript\">\n      // ADD EVENT LISTENER HERE\n    <\/script>\n    <title>Websocket Example<\/title>\n  <\/head>\n  <body>\n    <label for=\"mygauge\">Gauge:<\/label>\n    <meter id=\"mygauge\" min=\"0\" max=\"100\" low=\"33\" high=\"66\" \n    optimum=\"80\" value=\"50\"><\/meter>\n  <\/body>\n<\/html><div>\n  <input type=\"range\" id=\"slider\" name=\"volume\" \n  min=\"0\" max=\"100\">\n  <label for=\"slider\" id =\"sliderLabel\">Value:<\/label>\n<\/div><!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n    <script language=\"javascript\">\n      // ADD EVENT LISTENER HERE\n    <\/script>\n    <title>Websocket Example<\/title>\n  <\/head>\n  <body>\n    <!-- INSERT SLIDER HERE -->\n    <br/>\n    <label for=\"mygauge\">Gauge:<\/label>\n    <meter id=\"mygauge\" min=\"0\" max=\"100\" low=\"33\" high=\"66\" \n    optimum=\"80\" value=\"50\"><\/meter>\n  <\/body>\n<\/html>let sliderWidget = document.getElementById(\"slider\");\nlet label = document.getElementById(\"sliderLabel\");\nlabel.innerHTML = \"Value:\" + slider.value; // init\n// on change\nsliderWidget.oninput = function() {\n  let val = parseInt(this.value, 10);\n  mySocket.send(\n    JSON.stringify({\n      value: val,\n      message: \"New value for you server!\"\n    })\n  );\n  label.innerHTML = \"Value:\" + val;\n};"},{"path":"shiny-intro.html","id":"test-it","chapter":"11 R and JS","heading":"11.2.2 Test it!","text":"convenience, whole code provided OSUICode::httpuv_app(). Run function R console\nbrowse 127.0.0.1:8080 Chrome. see range slider well current value. suggest\nreader R Chrome side side, properly see messages sent R JS. Chrome,\nopen developer tools navigate Network tab select websocket entry, show Figure 11.3. now, may change slider value. Notice green arrow message appearing\ndeveloper tools. indicates message sent client: JSON containing slider value well tiny message, polite server. R console, may inspect received message (client!). R instructed create new plot , done, sends message back client (red arrow) indicate plot updated new value generated gauge.\nFIGURE 11.3: Server client communication websocket\n","code":""},{"path":"shiny-intro.html","id":"clients-concurrency","chapter":"11 R and JS","heading":"11.3 Clients concurrency","text":"shown sections, httpuv_app() exposes delay parameter simulates computationally intense task server:simulate concurrency occur multiple client. test , may try call my_app <- httpuv_app(5), open two browser tabs pointing 127.0.0.1:8080, update slider first client update second client. happens? ? highlights one fundamental limitation Shiny: R single threaded, clients queue get answer server.done, don’t forget close server connection my_app$stop()!practice, Shiny’s core much complex hopefully, get better understanding general idea.\nreader must understand Shiny inputs/outputs modified client end user, lot exchanges R JS, websocket. following, briefly describe Shiny leverages technology, server client side.","code":"\nws$onMessage(function(binary, message) {\n  message <- jsonlite::fromJSON(message)\n  print(message)\n  cat(\"Number of bins:\", message$value, \"\\n\")\n  hist(rnorm(message$value))\n  if (!is.null(delay)) Sys.sleep(delay)\n  ws$send(\"Thanks client! I updated the plot.\")\n})"},{"path":"shiny-intro.html","id":"shiny-and-websockets","chapter":"11 R and JS","heading":"11.4 Shiny and websockets","text":"previous section, showed R JS can communicate httpuv powered websocket. Now let’s see happens context Shiny.","code":""},{"path":"shiny-intro.html","id":"shiny-session","chapter":"11 R and JS","heading":"11.4.1 The Shiny session object","text":"won’t able go anywhere without giving reminders Shiny session object. say object? session actually instance ShinySession R6 class.\nImportantly, session unique given user. means two different clients share session. important since contains information input, output client data.Upon calling ShinySession$new(), initialization method takes one parameter, namely websocket. shown last section, websocket allows bidirectional exchanges R JS. session object exposes two methods communicate JavaScript R:sendCustomMessage sends messages R JS. calls private sendMessage method calls write. message sent session opened, websocket private$websocket$send(json). shiny.trace option TRUE, message showing sent JSON displayed, useful debugging.sendInputMessage used update inputs server. message stored message queue ultimately sent websocket private$websocket$send(json).Curious readers look shiny.R file.discuss sendInputMessage sendCustomMessage following chapters, respectively 12 15.","code":""},{"path":"shiny-intro.html","id":"server-side","chapter":"11 R and JS","heading":"11.4.2 Server side","text":"server, R, websocket initiated startApp function, leveraging httpuv package. Websocket handlers defined shiny:::createAppHandlers:Overall, handlers drive server websocket behavior. Shiny session initialized, message sent WS, providing sessionId, workerId, user client (see Shiny.shinyapp.config section 10.6.3):workerId always used. practice, relevant context solutions able \nload balance clients across multiple workers, shinyapps.io, RStudio Connect, Shiny Server Pro.ws$onMessage describes happen server receives message client.\napplies messageHandler function , short:Decodes received message.Processes message. initialization, client send message init key,\ntells Shiny manage inputs running observer (since inputs values yet). initialization, client messages update key, meaning wait observers run .Finally, server connection closed, client connections also closed.","code":"\nws = function(ws) {\n  \n  # ....; Extra code removed\n  \n  shinysession <- ShinySession$new(ws)\n  \n  ws$onMessage(function(binary, msg) {\n    # If unhandled errors occur, make sure they get \n    # properly logged\n    withLogErrors(messageHandler(binary, msg))\n  })\n  \n  ws$onClose(function() {\n    shinysession$wsClosed()\n    appsByToken$remove(shinysession$token)\n    appsNeedingFlush$remove(shinysession$token)\n  })\n  return(TRUE)\n}\nprivate$sendMessage(\n  config = list(\n    workerId = workerId(),\n    sessionId = self$token,\n    user = self$user\n  )\n)"},{"path":"shiny-intro.html","id":"client-side","chapter":"11 R and JS","heading":"11.4.3 Client side","text":"JS side, socket creation occurs shinyapps.js file:WebSocket object. protocol chosen protocol, either ws wss (using https). window.location.host contains host name port.\nconnection opened, events handled onopen event registry:shiny:connected event triggered, disconnected overlay (famous grayed screen) removed DOM. Initial input values sent server via send method. onmessage registry aims handling messages received server:subsequently invokes dispatchMessage method sends message handlers, triggering shiny:message event. Shiny internal custom provided handlers (read user-defined) stored separate arrays. time, message type matches given handler, treated. instance, dedicated internal handler input messages, bridges gap given input corresponding input binding. handler eventually triggers inputBinding.receiveMessage method input value updated client. discuss detail following section 13.2.Finally onclose method called websocket connection closed.connection opened, shiny:disconnected event triggered. , disconnect overlay added DOM (grayed screen) socket removed.error occurs R code, server sends error websocket, captured client displayed.","code":"var ws = new WebSocket(protocol + '//' + window.location.host + defaultPath);socket.onopen = function() {\n  hasOpened = true;\n\n  $(document).trigger({\n    type: 'shiny:connected',\n    socket: socket\n  });\n\n  self.onConnected(); // remove overlay\n\n  socket.send(JSON.stringify({\n    method: 'init',\n    data: self.$initialInput\n  }));\n\n  while (self.$pendingMessages.length) {\n    var msg = self.$pendingMessages.shift();\n    socket.send(msg);\n  }\n}socket.onmessage = function(e) {\n  self.dispatchMessage(e.data);\n};socket.onclose = function() {\n  // These things are needed only if we've successfully opened the\n  // websocket.\n  if (hasOpened) {\n    $(document).trigger({\n      type: 'shiny:disconnected',\n      socket: socket\n    });\n\n    self.$notifyDisconnected();\n  }\n\n  self.onDisconnected(); // Must be run before self.$removeSocket()\n  self.$removeSocket();\n}"},{"path":"shiny-intro.html","id":"debug-websocket-with-shiny","chapter":"11 R and JS","heading":"11.4.4 Debug websocket with Shiny","text":"Let’s run following app (see 11.4, left panel):opening HTML inspector, select network tab search websocket list. choosing message tab, may inspect R JavaScript say others. stated , first message sent contains initial input values. Shiny recalculates table, notifies recalculation done becomes idle. second message received R updating select input, triggers event cycle.Although complex, extremely useful check whether input / output communication working properly. , see error field identifying issue.Shiny.shinyapp.$socket.readyState returns state socket connection. 1 app running. instances socket closed, error raised.\nFIGURE 11.4: Shiny websocket\n","code":"\nlibrary(shiny)\nshinyApp(\n  ui = fluidPage(\n    selectInput(\n      \"variable\", \n      \"Variable:\",\n      c(\"Cylinders\" = \"cyl\",\n        \"Transmission\" = \"am\",\n        \"Gears\" = \"gear\")\n    ),\n    tableOutput(\"data\")\n  ),\n  server = function(input, output) {\n    output$data <- renderTable({\n      mtcars[, c(\"mpg\", input$variable), drop = FALSE]\n    }, rownames = TRUE)\n  }\n)"},{"path":"shiny-intro.html","id":"summary-2","chapter":"11 R and JS","heading":"11.4.5 Summary","text":"summary server client websocket parts. Shiny app shown Figure 11.5 consists actionButton() sliderInput(). Clicking action button triggers observeEvent() fires updateSlideInput(). hood, clicking action button sends message client server. message processed corresponding input value updated server, thereby invalidating observer, reactive element. updateSlideInput() sends message back client containing id input update. message received processed onMessage event manager, redirects message related message handler, thereby updating corresponding input element client. underlying mechanisms going detailed next part 12. may imagine slider updated, also sends message server, triggering cascade reactions.let imagine many messages exchanged complex apps!\nFIGURE 11.5: Websocket allows communication server client.\n","code":""},{"path":"shiny-input-system.html","id":"shiny-input-system","chapter":"12 Shiny’s input system","heading":"12 Shiny’s input system","text":"Shiny inputs key elements Shiny apps since way end-user interact app. may know sliderInput(), numericInput(), checkboxInput() sometimes may need fancier elements like knobInput() shinyWidgets, depicted Figure 12.1 even sophisticated inputs like shinyMobile smartSelect() (Figure 12.1, right panel). ever wondered mechanisms behind inputs? ever dreamt develop ?goal section understand Shiny inputs work create new ones.\nFIGURE 12.1: Custom shiny inputs. left: knobInput shinyWidgets; right: smart select shinyMobile\n","code":""},{"path":"shiny-input-system.html","id":"input-bindings","chapter":"12 Shiny’s input system","heading":"12.1 Input bindings","text":"run app, time works just fine! question , magic behind? Upon initialization, Shiny runs several JavaScript functions. accessible programmer, thought Shiny JS object, already mentioned section 10.6.3. illustrate , let’s run app :open HTML inspector run Shiny.unbindAll(document), document scope, search. Try change slider input. notice nothing happens. Now let’s type Shiny.bindAll(document) update slider value. Moving slider successfully update plot. Magic isn’t ? simply shows inputs bound, nothing happens binding inputs necessary!consider another example multiple inputs two buttons bind/unbind inputs, respectively. Start , change input values, look corresponding text output. Click unbind try change inputs. happens? Click bind change another input value. observe?Let’s see input binding works.","code":"\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/dummy-app\" \n# ) \n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/bind-unbind\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nui <- fluidPage(\n  actionButton(\n    \"unbind\",\n    \"Unbind inputs\",\n    onclick = \"Shiny.unbindAll();\"\n  ),\n  actionButton(\n    \"bind\",\n    \"Bind inputs\",\n    onclick = \"Shiny.bindAll();\"\n  ),\n  lapply(1:3, function(i) {\n    textInput(paste0(\"text_\", i), paste(\"Text\", i))\n  }),\n  lapply(1:3, function(i) {\n    uiOutput(paste0(\"val_\", i))\n  })\n)\n\nserver <- function(input, output, session) {\n  lapply(1:3, function(i) {\n    output[[paste0(\"val_\", i)]] <- renderPrint({\n      input[[paste0(\"text_\", i)]]\n    })\n  })\n}\n\nshinyApp(ui, server)"},{"path":"shiny-input-system.html","id":"input-structure","chapter":"12 Shiny’s input system","heading":"12.1.1 Input structure","text":"HTML, input element given <input> tag well several attributes.id guarantees input uniqueness way shiny recover input$<id> element.type like checkbox, button,\ntext …type may also good target input binding find method, explained .class may required find element DOM. convenient \ninput binding target class (associated elements) rather id corresponds one element definition. also used CSS apply styles.value holds input value.","code":"<input id = \"id\" type = \"text\" class = \"...\" value = value>"},{"path":"shiny-input-system.html","id":"input-binding-steps","chapter":"12 Shiny’s input system","heading":"12.1.2 Binding Shiny inputs","text":"input binding allows Shiny identify instance given input may input. instance, slider input must update whenever range dragged left right arrows keyboard pressed. relies class defined input_binding.js file.Let’s describe method chronologically. better convenience, book side package contains step step demonstrations may found . example called customTextInputExample(), takes input binding step parameter. instance customTextInputExample(1) invoke first step, customTextInputExample(4) include steps 1 4.","code":""},{"path":"shiny-input-system.html","id":"find-the-input","chapter":"12 Shiny’s input system","heading":"12.1.2.1 Find the input","text":"first step, critical locate input DOM. R side, define input, specific attribute serve receptor binding. inputs, may handled type attribute. cases, may class, like actionButton(). JS side, need method able identify receptor. Moreover, two different types inputs (instance radioButton() selectInput()) receptor conflict reasons, whereas two instances input type can. app contains 10 sliders, share input binding, thing powerful since bound one step. receptor identifier provided find method InputBinding class. method must applied scope, document. find accepts valid jQuery selector:Don’t forget return statement. Omitting cause binding step fail, well downstream\nsteps!Figure 12.2 summarizes important step.\nFIGURE 12.2: find inputs?\n, going re-create textInput() binding, step step. shiny already provides bindings textInput(), don’t want recognize new input. Therefore, add new input-text class make input binding pointing specific class:last part code contains tagList() two elements:element input binding, customTextInputDeps(). binding_step allows us review one step time, easier learning perspective.input tag.example managed dependency creation side package.\nmultiple inputs, add script dependency passing vector script parameter.Figure 12.3 shows main elements textInput() widget. code, shinyInputLabel Shiny internal function creates numeric input label, word text displayed next . core input element wrapped tags$input.\nFIGURE 12.3: Shiny’s textInput elements\ninvite reader run full working demonstration exposed .short, example consists simple text input output showing current text input value:open developer tools inspect customTextInputBinding.js script, put breakpoints find method reload page. Upon reload, JavaScript debugger opens, shown Figure 12.4. Type $(scope).find('.input-text') console see displayed. DOM element may highlight hover JavaScript output.Building input bindings like significantly ease debugging process ’ll get chances successful!\nFIGURE 12.4: Find first method triggered\nNow, let’s see better target elements type class. run example.demonstration app containing two text inputs. Moreover, binding modified looks element specific id:repeat debugging steps, $(scope).find('.input-text') targets \nfirst text input, meaning second input found bound, demonstrated Figure 12.5.\nFIGURE 12.5: Find id rather bad idea\nside note, ’ll also get error binding (Uncaught implemented), indicating getValue method implemented yet. Fear ! going add soon.","code":"find: function(scope) {\n  return $(scope).find('.input-text');\n}\ncustomTextInput <- function (\n  inputId, \n  label, \n  value = \"\", \n  width = NULL, \n  placeholder = NULL,\n  binding_step\n) {\n  \n  # this external wrapper ensure to control the input width\n  div(\n    class = \"form-group shiny-input-container\", \n    style = if (!is.null(width)) {\n      paste0(\"width: \", validateCssUnit(width), \";\")\n    },\n    # input label\n    shinyInputLabel(inputId, label), \n    \n    # input element + JS dependencies\n    tagList(\n      customTextInputDeps(binding_step),\n      tags$input(\n        id = inputId,\n        type = \"text\",\n        class = \"form-control input-text\",\n        value = value,\n        placeholder = placeholder\n      )\n    )\n  )\n}\ncustomTextInputDeps <- function(binding_step) {\n  htmlDependency(\n    name = \"customTextBindings\",\n    version = \"1.0.0\",\n    src = c(file = system.file(\n      \"input-system/input-bindings\", \n      package = \"OSUICode\"\n    )),\n    script = paste0(\n      \"customTextInputBinding_\", \n      binding_step, \n      \".js\"\n    )\n  )\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/binding-find\" \n# ) \n\n### APP CODE ### \nlibrary(OSUICode)\n\ncustomTextInputExample(1)\ncustomTextInputExample <- function(binding_step) {\n  ui <- fluidPage(\n    customTextInput(\n      inputId = \"caption\",\n      label = \"Caption\",\n      value = \"Data Summary\",\n      binding_step = binding_step\n    ),\n    textOutput(\"custom_text\")\n  )\n  server <- function(input, output) {\n    output$custom_text <- renderText(input$caption)\n  }\n  shinyApp(ui, server)\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/binding-find-2\" \n# ) \n\n### APP CODE ### \nlibrary(OSUICode)\n\ncustomTextInputExampleBis()find: function(scope) {\n  return $(scope).find('#mytextInput');\n}"},{"path":"shiny-input-system.html","id":"initialize-inputs","chapter":"12 Shiny’s input system","heading":"12.1.2.2 Initialize inputs","text":"Upon initialization, Shiny calls initializeInputs function takes input bindings call initialize method binding inputs. Note input initialized, _shiny_initialized tag avoid initializing twice. initialize method always defined elements require explicitly initialized activated. instance Framework7 API, top shinyMobile (Granjon, Perrier, Rudolf 2021) built, require instantiate elements. example toggle input:el: '.toggle' means looking element(s) toggle class. app.toggle.create internal Framework7 API. corresponding shinyMobile input binding starts follows:initialized, may use specific methods provided API. Framework7 clearly gold mine, API provides many possible options many inputs/widgets. provide examples Chapters 24 26.","code":"// what is expected\nlet toggle = app.toggle.create({\n  el: '.toggle',\n  on: {\n    change: function () {\n      console.log('Toggle changed')\n    }\n  }\n});var f7ToggleBinding = new Shiny.InputBinding();\n  $.extend(f7ToggleBinding, {\n    initialize: function(el) {\n      app.toggle.create({el: el});\n    },\n    // other methods\n});"},{"path":"shiny-input-system.html","id":"get-the-value","chapter":"12 Shiny’s input system","heading":"12.1.2.3 Get the value","text":"getValue method returns input value. way obtain value different almost inputs. instance, textInput() pretty simple since value located value attribute. el refers element holding id attribute recognized find method. Figure 12.6 shows result console.log($(el));.\nFIGURE 12.6: el\nget value, apply jQuery method val $(el) element return result.Don’t forget return statement!Similarly find section, run example open developer tools inspect customTextInputBinding_2.js script.put breakpoints getValue method reload page. Upon reload, JavaScript debugger opens starts find. may click next blue arrow jump next breakpoints getValue, shown Figure 12.7. Typing $(el).val() console shows current\ntext value.\nFIGURE 12.7: getValue returns current input value\nClicking next exit debugger. Interestingly, ’ll notice text appears input, meaning input$caption element exists internally tracked shiny. Notice try change text content, output value update normally expect. actually omitting couple methods preventing binding fully functional. introduce following sections!","code":"getValue: function(el) {\n  console.log($(el));\n  return $(el).val();\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/binding-get\" \n# ) \n\n### APP CODE ### \nlibrary(OSUICode)\n\ncustomTextInputExample(2)"},{"path":"shiny-input-system.html","id":"set-and-update","chapter":"12 Shiny’s input system","heading":"12.1.2.4 Set and update","text":"setValue used set value current input. method necessary input value may updated. used combination receiveMessage, JavaScript part R updateInput functions, like updateTextInput(). usually call setValue method inside.Let’s create function update custom text input. Call updateCustomTextInput. requires least three parameters:inputId tells input update.value new value. taken setValue JS method input binding.session Shiny session object mentioned earlier section 11.4.1. use sendInputMessage send values R JavaScript. receiveMessage method apply setValue data received R. current session recovered getDefaultReactiveDomain().add setValue receiveMessage custom input binding.Figure 12.8 illustrates main mechanisms.\nFIGURE 12.8: Events following click update button. figure demonstrates R JS communicate, websocket.\npass multiple elements update, change updateCustomTextInput function :shiny:::dropNulls internal function ensuring list contain NULL elements. send list R, serialized JSON object. receiveMessage method, properties like value may accessed using . notation. good practice add data.hasOwnProperty check avoid running code\nspecified property exist:refers custom text input binding class (object), .setValue allows call\nsetValue method …Similarly previous sections, run updateCustomTextInputExample(3) open developer tools inspect customTextInputBinding_3.js script.put breakpoints receiveMessage setValue methods reload page. Upon reload, JavaScript debugger opens starts find. may click next blue arrow reach receiveMessage, shown Figure 12.9. Inspecting data object, contains one property namely value. practice, may complex structure. exercise, may change data.value whatever value want.\nFIGURE 12.9: Receive message R\nClick next arrow makes us jump next call setValue, can print value check whether correct. Running $(el).val(value); debugger console instantaneously update DOM element new text, shown Figure 12.10.\nFIGURE 12.10: Set new value\nfar good! managed update text input value client. Yet, clicking button, output value still change. going fix missing step next section.","code":"// el is the DOM element.\n// value represents the new value.\nsetValue: function(el, value) {\n  $(el).val(value);\n}\nupdateCustomTextInput <- function(\n  inputId, \n  value = NULL, \n  session = getDefaultReactiveDomain()\n) {\n  session$sendInputMessage(inputId, message = value)\n}\nupdateCustomTextInput <- function(\n  inputId, \n  value = NULL, \n  placeholder = NULL, \n  session = getDefaultReactiveDomain()\n) {\n  message <- dropNulls(\n    list(\n      value = value,\n      placeholder = placeholder\n    )\n  )\n  session$sendInputMessage(inputId, message)\n}// data are received from R. \n// It is a JS object. \nreceiveMessage: function(el, data) {\n  console.log(data);\n  if (data.hasOwnProperty('value')) {\n    this.setValue(el, data.value);\n  }\n  // other parameters to update...\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/binding-receive\" \n# ) \n\n### APP CODE ### \nlibrary(OSUICode)\n\nupdateCustomTextInputExample(3)"},{"path":"shiny-input-system.html","id":"subscribe","chapter":"12 Shiny’s input system","heading":"12.1.2.5 Subscribe","text":"subscribe listens events defining Shiny update input value make available app. API like Bootstrap explicitly mention events (like hide.bs.tab, shown.bs.tab, …).\nGoing back custom text input, event make change?key release keyboard. may listen keyup.copying pasting text input field dictating text. input event may helpful.add events binding using event listener seen Chapter 10.Notice event structure: EVENT_NAME.BINDING_NAME. best practice follow \nconvention.callback parameter ensures new value captured Shiny. Chapter 13 provides details, quite technical.run example, open HTML inspector, select customTextInputBinding_4.js script put break point getValue well subscribe method. enter new text inside input field, triggers debugger inside subscribe call. Inspecting event object, type indicate action, input action target text input element , depicted Figure 12.11.\nFIGURE 12.11: Subscribe method manual update text input\nclick next notice go back getValue method get new value.\nmay check typing $(el).val() debugger console, like Figure 12.12. Clicking next shows updated output value.\nFIGURE 12.12: Subscribe followed new getValue\nHooray! output result successfully changed input value manually updated. However, modified click update button. miss? Looking back receiveMessage method, changed input value Shiny knows step successful? check event raised, put console.log(event); subscribe method. action like removing text content adding new text triggers event clicking action button . Therefore, must trigger event add subscribe method. may choose change event, triggers element updated. Notice parameter passed callback. discuss next part!Besides, receiveMessage must trigger change event trigger subscribe method:Let’s try .put new break point second event listener, one change event. Clicking button triggers change event, shown Figure 12.13.\nFIGURE 12.13: may add multiple event listeners inside subscribe method\n… situations, careful element. Indeed, called event listener, refers element triggered event input binding object. instance example need trigger getValue method inside event listener located subscribe method. call .getValue(el), ’ll get error. trick consists creating variable namely self take value, outside event listener. case self refers binding make sens call self.getValue(el):Perfect? exactly.","code":"$(el).on(\n  'keyup.customTextBinding input.customTextBinding', \n  function(event) {\n    callback(true);\n});\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/binding-subscribe\" \n# ) \n\n### APP CODE ### \nlibrary(OSUICode)\n\nupdateCustomTextInputExample(4)$(el).on('change.customTextBinding', function(event) {\n  callback(false);\n});receiveMessage: function(el, data) {\n  if (data.hasOwnProperty('value')) {\n    this.setValue(el, data.value);\n    $(el).trigger('change');\n  }\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/binding-subscribe-2\" \n# ) \n\n### APP CODE ### \nlibrary(OSUICode)\n\nupdateCustomTextInputExample(5)subscribe: function(el, callback) {\n  self = this;\n  $(el).on('click.button', function(e) {\n    var currentVal = self.getValue(el);\n    $(el).val(currentVal + 1);\n    callback();\n  });\n}"},{"path":"shiny-input-system.html","id":"setting-rate-policies","chapter":"12 Shiny’s input system","heading":"12.1.2.6 Setting rate policies","text":"better change input value keyboard completely released time (time key released). call debouncing, allows delay telling Shiny read new value, achieved using getRatePolicy method. Additionally, must also pass true callback subscribe method, order apply specific rate policy (debounce, throttle). useful instance don’t want flood server useless update requests. example using slider, want send value soon range stops moving intermediate values. elements defined .Run app try manually change text input value adding couple letters fast can. notice? see output value updates release keyboard.may adjust delay according needs, caution set delay long becomes problematic (unnecessary lags).want get overview binding steps, may try following slide 2020 R Pharma workshop.","code":"\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/binding-rate-policies\" \n# ) \n\n### APP CODE ### \nlibrary(OSUICode)\n\nupdateCustomTextInputExample(6)"},{"path":"shiny-input-system.html","id":"register-an-input-binding","chapter":"12 Shiny’s input system","heading":"12.1.2.7 Register an input binding","text":"end input binding definition, register Shiny.Best practice name following PACKAGE_NAME.BINDING_NAME, avoid conflicts.\nAlthough Shiny documentation mentions Shiny.inputBindings.setPriority method handle conflicting bindings, respect convention, case almost never happens.side note, think binding name useless, look shinytest internal structure.\nhood, file maps input elements:Guess ? names one given input binding registration!","code":"let myBinding = new Shiny.inputBinding();\n  $.extend(myBinding, {\n  // methods go here\n});\n\nShiny.inputBindings.register(\n  myBinding, \n  'PACKAGE_NAME.BINDING_NAME'\n);widget_names <- c(\n    \"shiny.actionButtonInput\"  = \"actionButton\",\n    \"shiny.checkboxInput\"      = \"checkboxInput\",\n    \"shiny.checkboxGroupInput\" = \"checkboxGroupInput\","},{"path":"shiny-input-system.html","id":"other-binding-methods","chapter":"12 Shiny’s input system","heading":"12.1.2.8 Other binding methods","text":"couple methods described contained InputBinding class prototype. described since time, don’t need change can rely defaults:getId returns object id (Figure 12.14). don’t provide method, binding falls back default one provided InputBinding class. method called find. next Chapter 13 provides details.getType required handle custom data format. called getId. entire section 12.4 dedicated.\nFIGURE 12.14: binding getId method\n","code":""},{"path":"shiny-input-system.html","id":"edit-input-binding","chapter":"12 Shiny’s input system","heading":"12.1.3 Edit an input binding","text":"cases, like access input binding change default behavior, even though always recommended, since affect related inputs. bindings contained registry, namely Shiny.inputBindings, one may seamlessly access modify . five steps process:Wait shiny:connected event, Shiny JS\nobject exists.Unbind inputs Shiny.unbindAll().Access binding registry, Shiny.inputBindings.Extend binding edit content $.extend(... {...})Apply new changes Shiny.bindAll().","code":"$(function() {\n  $(document).on('shiny:connected', function(event) {\n    Shiny.unbindAll();\n    $.extend(Shiny\n      .inputBindings\n      .bindingNames['shiny.actionButtonInput']\n      .binding, {\n        // do whathever you want to edit existing methods\n      });\n    Shiny.bindAll();\n  });\n});"},{"path":"shiny-input-system.html","id":"update-binding-client","chapter":"12 Shiny’s input system","heading":"12.1.4 Update a binding from the client","text":"interest receiveMessage setValue able update input\nserver side, R, session$sendInputMessage. Yet,\ntask might done directly client, thereby lowering load server.\nconsider following example: shiny app contains two actions buttons, clicking first one\nincreases value second 10. won’t possible classic approach since button click\nincreases value 1. proceed?first set event listener first button.target second button get input binding $obj.data('shiny-input-binding').recover current value.call setValue method, adding 10 current value.Importantly, let Shiny update value R side, must trigger event detected subscribe method. action button one event listener may added. Don’t forget triggering click event also increment button value 1! following customize subscribe method work around:click second button, value increments 1 plot visible 10 clicks, 1 click necessary first button. reset button resets second action button value 0. implements feature discussed previous part, extend button binding add reset method edit subscribe method add change event listener, simply telling shiny get new value. Contrary click, change increment button value.whole JS code found appendix .4.1 related app. available HTML dependency OSUICode::editBindingDeps().\nFIGURE 12.15: Edit trigger input binding client\ntrick extensively used virtual physiology simulator trigger animations.Another example accessing binding method client found shinydashboard package.","code":"$(function() {\n  // each time we click on #test (a button)\n  $('#button1').on('click', function() {\n    let $obj = $('#button2');\n    let inputBinding = $obj.data('shiny-input-binding');\n    let val = $obj.data('val') || 0;\n    inputBinding.setValue($obj, val + 10);\n    $obj.trigger('event');\n  });\n});$.extend(\n  Shiny\n    .inputBindings\n    .bindingNames['shiny.actionButtonInput']\n    .binding, {\n  reset: function(el) {\n   $(el).data('val', 0);\n  },\n  subscribe: function(el, callback) {\n    $(el).on('click.actionButtonInputBinding', function(e) {\n      let $el = $(this);\n      let val = $el.data('val') || 0;\n      $el.data('val', val + 1);\n\n      callback();\n    });\n            \n    // this does not trigger any click and won't change \n    // the button value            \n    $(el).on('change.actionButtonInputBinding', function(e) {\n      callback();\n    });\n  }\n});\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/edit-binding-client\" \n# ) "},{"path":"shiny-input-system.html","id":"secondary-inputs","chapter":"12 Shiny’s input system","heading":"12.2 Secondary inputs","text":"Shiny input binding system convenient used primary input elements like textInput(), numericInput(). super powerful tool unleash apps’s interactivity. following, show add input element primarily designed user input, also non officially denoted secondary inputs.convention, ’ll use inputId id secondary inputs, case new versions RinteRface packages like bs4Dash.","code":""},{"path":"shiny-input-system.html","id":"boxes-on-steroids","chapter":"12 Shiny’s input system","heading":"12.2.1 Boxes on steroids","text":"may know shinydashboard box function. Boxes containers title, body, footer, well optional elements. box may also collapsed. nice capture state box input, trigger actions soon input changes. Since input value unique, must add id parameter box function. modify compared shinydashboard::box() function.boxDeps() contains JS dependencies handle box behavior.may collapse uncollapse box, create updateBox() function, toggle . example, send specific message since ’ll rely internal AdminLTE JS methods work.play example inspect box shown Figure 12.16, ’ll notice collapsed, box gets collapsed-box class, useful keep mind input binding design.\nFIGURE 12.16: Collapsed AdminLTE2 box\ntime design JS dependency, boxBinding.js. Like input bindings, start instantiating new object Shiny.InputBinding(). end code, register binding Shiny knows exists.main steps taken design binding.find: nothing special say, looking elements box class.getValue: check element collapsed-box class return object give list R. case add elements like remove action available AdminLTE. therefore access input element input$<box_id>$<property_name>.setValue: call plug play AdminLTE toggleBox method.receiveMessage: call setValue method trigger change event Shiny knows value needs updated within subscribe.subscribe: previously mentioned, necessary know tell Shiny update value subscribe method. time, change event might sufficient, shinydashboard built top AdminLTE2, API control box behavior. identify two events corresponding collapsible action:expanded.boxwidget (Triggered box expanded)collapsed.boxwidget (Triggered box collapsed)Unfortunately, investigations, events possible use since AdminLTE library trigger main JS code (see collapse method). solutions decided listens click event [data-widget=\"collapse\"] element delays callback call value slightly higher default AdminLTE2 animation collapse box (500ms). omit part, input time properly update!Even though animations nice, might appears rather sub-optimal wait 500 ms box collapse. AdminLTE options allow change $.AdminLTE.boxWidget object. specify animationSpeed property 10 milliseconds update input binding script reduce delay subscribe method (50 ms seems reasonable).don’t need extra listener updateBox() function since also triggers click collapse button, thereby forwarding corresponding listener. whole code may found appendix .4.2.Let’s try new toy simple app. output depicted Figure 12.17.\nFIGURE 12.17: {shinydashboard} box custom input binding listening box collapse state\nbs4Dash box function follows principle, extra features showed . leave reader explore code exercise.","code":"\nbox <- function(.., id = NULL, title = NULL, footer = NULL,\n                 background = NULL, width = 6, height = NULL,\n                 collapsible = FALSE, collapsed = FALSE) {\n  \n  # ....; Extra code removed\n  \n  tagList(\n    boxDeps(), # required to attach the binding\n    div(\n      class = if (!is.null(width)) paste0(\"col-sm-\", width),\n      div(\n        id = id, # required to target the unique box\n        class = boxClass, # required to target all boxes\n        # ....; Extra code removed (box header, body, footer)\n      )\n    )\n  )\n}\nboxDeps <- function() {\n  htmlDependency(\n    name = \"boxBinding\",\n    version = \"1.0.0\",\n    src = c(file = system.file(\n      \"input-system/input-bindings\", \n      package = \"OSUICode\"\n    )),\n    script = \"boxBinding.js\"\n  )\n}\nupdateBox <- function(\n  id, \n  session = getDefaultReactiveDomain()\n) {\n  session$sendInputMessage(id, message = NULL)\n}let boxBinding = new Shiny.InputBinding();\n$.extend(boxBinding, {\n  // Methods go here\n});\n\nShiny.inputBindings.register(boxBinding, 'box-input');find: function(scope) {\n  return $(scope).find('.box');\n}getValue: function(el) {\n  let isCollapsed = $(el).hasClass('collapsed-box')\n  return {collapsed: isCollapsed}; // this will be a list in R\n}setValue: function(el, value) {\n  $(el).toggleBox();\n}receiveMessage: function(el, data) {\n  this.setValue(el, data);\n  $(el).trigger('change');\n}subscribe: function(el, callback) {\n  $(el).on(\n    'click', \n    '[data-widget=\"collapse\"]', \n    function(event) {\n      setTimeout(function() {\n        callback();\n      }, 50);\n  }); \n    \n  $(el).on('change', function(event) {\n    setTimeout(function() {\n      callback();\n    }, 50);\n  });\n}$(function() {\n  // overwrite box animation speed. \n  // Putting 500 ms add unnecessary delay for Shiny.\n  $.AdminLTE.boxWidget.animationSpeed = 10;\n});\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/boxes-on-steroids\" \n# ) "},{"path":"shiny-input-system.html","id":"boxes-on-steroids-more","chapter":"12 Shiny’s input system","heading":"12.2.2 Further optimize boxes","text":"may imagine leveraging input binding system update box property get rid classic renderUI() approach. Indeed, now, one way update box server. code, intentionally added dummy task causing five seconds delay card rendering. ’ll notice nothing happens time, weird end user might let think possible app crash (Figure 12.18, left side).\nFIGURE 12.18: Left: user sees app starts. Right: users sees five seconds.\nwhole piece UI re-rendered time, box class modified. shown , substantial impact complex app festooned inputs/outputs, thereby altering overall user experience.Let’s provide optimization get rid renderUI(). proceed two steps. first part consists customizing previously designed box() function 12.2.1 gather many parameters possible list options. instance, choose extract width title.width expected numeric, title might HTML tag, list HTML tags, justifying use slightly sophisticated code (can’t use toJSON() shiny tag … yet). don’t shoot foot, create specific object processed title, processed_title. Indeed, common mistake re-inject processed title later HTML box tag, cause error. ’s purpose solely part configuration script required JS.properties list treated JS side, reason remove NULL elements dropNulls, since don’t want send empty arrays. choose following approach, convert properties JSON toJSON() embed script tag. Note data-attribute pointing unique id parameter. guarantee uniqueness configuration script.create box HTML tag, leverage box() function. next step add configuration tag, achieved new htmltools tagQuery() API, extensively studied 2.6. finally attach yet designed JS dependencies tagList().Like 12.2.1, define new dependencies, namely box2Deps(), referencing boxBindingEnhance.js script, going design minutes., modify updateBox() function handles toggle update possibilities. options contains changeable properties like title width.\ndon’t describe toggle case since quite similar previous implementations. action update, enter statement options must processed. option element shiny tag list shiny tags (tagList()), convert character .character(). returned message vector containing action well option list:Let’s define new JS binding required box2Deps(). start previously defined binding boxBindings.js modify setValue method import newly defined properties. boxTag two children, box configuration script. $(el) refers box, therefore look one level able use find method (find always goes deeper DOM), namely $(el).parent(). , target script tag $(el).parent().find(\"script[data-='\" + el.id + \"']\"). practice, may reuse piece code multiple places, instance getValue method. avoid duplication, create internal function, _getConfig. Note _ prefix, makes difference default input binding methods (available bindings) user defined methods, local specific binding. function just returns config script:also extract _processConfig method calls _getConfigScript converts script content JS object can manipulate. Notice keyword: represents input binding instance explained 12.1.2., call _processConfig inside setValue:code, config.width returns initial width, value.options.width contains new width value provided updateBox2 message output. security, don’t want change config action provided updateBox2 update (see statement). Assuming value.action === \"update\", can continue develop JS logic. Good practice check whether value.options.width exists value.options.hasOwnProperty(\"width\"). yes, ensure whether value config.width different. always choose === compares type value (== compares value \"1\" == 1 true):_updateWidth internal method defined input binding. three parameters, el, o n (o n old new values, respectively):must trigger resize event output correctly scales. internal method identified underscore since inherited Shiny.InputBinding method. finally update config value newly set value repeat process property. Don’t forget update config script attached card tag end update condition, otherwise input value won’t modified:whole JS code may found appendix .4.3. reworked version previously updated box without renderUI(). app starts, box displayed shown Figure 12.19, better end user experience.\nFIGURE 12.19: Left: user sees app starts. Right: users sees five seconds.\n","code":"\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/update-box-renderUI\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\nlibrary(shinyWidgets)\nlibrary(OSUICode)\n\nui <- fluidPage(\n  # import shinydashboard deps without the need of the\n  # dashboard template\n  useShinydashboard(),\n\n  tags$style(\"body { background-color: ghostwhite};\"),\n\n  br(),\n  uiOutput(\"custom_box\"),\n  selectInput(\n    \"background\",\n    \"Background\",\n    choices = shinydashboard:::validColors\n  )\n)\n\nserver <- function(input, output, session) {\n\n  dummy_task <- reactive({\n    Sys.sleep(5)\n    12\n  })\n\n  output$custom_box <- renderUI({\n    dummy_task()\n    box(\n      title = \"Box\",\n      width = dummy_task(),\n      \"Box body\",\n      background = input$background\n    )\n  })\n}\n\nshinyApp(ui, server)\nbox2 <- function(..., id = NULL, title = NULL, footer = NULL,\n                 background = NULL, width = 6, height = NULL,\n                 collapsible = FALSE, collapsed = FALSE) {\n  \n  if (!is.null(title)) {\n    processed_title <- if (\n      inherits(title, \"shiny.tag.list\") ||\n      inherits(title, \"shiny.tag\")\n    ) {\n      as.character(title)\n    } else {\n      title\n    }\n  }\n  \n  props <- dropNulls(\n    list(\n      title = processed_title,\n      background = background,\n      width = width\n    )\n  )\n  \n  # ....; Extra code removed\n}\nbox2 <- function(..., id = NULL, title = NULL, footer = NULL,\n                 background = NULL, width = 6, height = NULL,\n                 collapsible = FALSE, collapsed = FALSE) {\n  \n  # ....; Extra code removed\n  \n  configTag <- tags$script(\n    type = \"application/json\",\n    `data-for` = id,\n    jsonlite::toJSON(\n      x = props,\n      auto_unbox = TRUE,\n      json_verbatim = TRUE\n    )\n  )\n  \n}\nbox2 <- function(..., id = NULL, title = NULL, footer = NULL,\n                 background = NULL, width = 6, height = NULL,\n                 collapsible = FALSE, collapsed = FALSE) {\n  \n  # ....; Extra code removed\n  \n  boxTag <- tagQuery(\n    box(\n      ..., id = id, title = title, footer = footer,\n      background = background, width = width, height = height,\n      collapsible = collapsible, collapsed = collapsed\n    )\n  )$\n    append(configTag)$\n    allTags()\n\n  tagList(box2Deps(), boxTag)\n}\nbox2Deps <- function() {\n  htmlDependency(\n    name = \"boxBinding\",\n    version = \"1.0.0\",\n    src = c(file = system.file(\n      \"input-system/input-bindings\", \n      package = \"OSUICode\"\n    )),\n    script = \"boxBindingEnhanced.js\"\n  )\n}\nupdateBox2 <- function(\n  id, \n  action = c(\"toggle\", \"update\"), \n  options = NULL,\n  session = getDefaultReactiveDomain()\n) {\n  # for update, we take a list of options\n  if (action == \"update\") {\n    # handle case where options are shiny tag \n    # or a list of tags ...\n    options <- lapply(options, function(o) {\n      if (inherits(o, \"shiny.tag\") || \n          inherits(o, \"shiny.tag.list\")) {\n        o <- as.character(o)\n      }\n      o\n    })\n    message <- dropNulls(c(action = action, options = list(options)))\n    session$sendInputMessage(id, message)\n  } else if (message == \"toggle\") {\n    session$sendInputMessage(id, message = match.arg(action))\n  }\n}_getConfigScript: function(el) {\n  return(\n    $(el)\n      .parent()\n      .find(\"script[data-for='\" + el.id + \"']\")\n  )\n}_processConfig: function(el) {\n  return(\n    JSON.parse(\n      this\n      ._getConfigScript(el)\n      .html()\n    )\n  )\n}setValue: function(el, value) {\n  let config = this._processConfig(el);\n}setValue: function(el, value) {\n  let config = this._processConfig(el);\n  \n  if (value.action === \"update\") {\n    if (value.options.hasOwnProperty(\"width\")) {\n      if (value.options.width !== config.width) {\n        this._updateWidth(\n          el, \n          config.width, \n          value.options.width\n        )\n        config.width = value.options.width;\n      }\n    }\n    // other items to update\n  }\n}_updateWidth: function(el, o, n) {\n  // removes old class\n  $(el).parent().toggleClass(\"col-sm-\" + o);\n  $(el).parent().addClass(\"col-sm-\" + n); \n  // trigger resize so that output resize\n  $(el).trigger('resize');\n}// replace the old JSON config by the \n// new one to update the input value \nthis\n  ._getConfigScript(el)\n  .replaceWith(\n    '<script type=\"application/json\" data-for=\"' + \n    el.id + \n    '\">' + \n    JSON.stringify(config) + \n    '<\/script>'\n  );\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/boxes-on-steroids-2\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\nlibrary(shinyWidgets)\nlibrary(OSUICode)\n\nui <- fluidPage(\n  # import shinydashboard deps without the need of\n  # the dashboard template\n  useShinydashboard(),\n\n  tags$style(\"body { background-color: ghostwhite};\"),\n\n  br(),\n  box2(\n    title = \"My box\",\n    \"Box body\",\n    id = \"mybox\",\n    height = \"400px\",\n    width = 6\n  )\n)\n\nserver <- function(input, output, session) {\n\n  dummy_task <- reactive({\n    Sys.sleep(5)\n    12\n  })\n\n  observeEvent(dummy_task(), {\n    updateBox2(\n      \"mybox\",\n      action = \"update\",\n      options = list(\n        width = dummy_task(),\n        title = tagList(\n          shinydashboardPlus::dashboardBadge(\"New\", color = \"red\"),\n          \"New title\"\n        )\n      )\n    )\n  })\n\n}\n\nshinyApp(ui, server)"},{"path":"shiny-input-system.html","id":"exercise-1","chapter":"12 Shiny’s input system","heading":"12.2.3 Exercise","text":"example, title also updated. order reproduce behavior, ’ll update boxBindingEnhanced.js include corresponding JS logic.Inside boxBindingEnhanced.js, right update width logic,\nadd statement check title belongs update properties, sent updateBox2().\nFill blank.Add nested statement check whether new title different old one (needless update \ntitles ).R side, new title provided :However, valid AdminLTE box title following HTML structure:Modify code wrap provided title h3 tag box-title class.Locate old title DOM use replace new one.Update current config title value new one.Answers found .represents significant amount work, also guarantees lower load server side, thereby offering faster end-user experience. full working prototype implemented shinydashboardPlus bs4Dash (including box parameters).","code":"if (value.options.hasOwnProperty(...)) {\n\n}if (value.options.hasOwnProperty(...)) {\n  if (... !== ...) {\n  \n  }\n}\nupdateBox2(\n  \"mybox\",\n  action = \"update\",\n  options = list(\n    title = tagList(\n      shinydashboardPlus::dashboardBadge(\"New\", color = \"red\"),\n      \"New title\"\n    )\n  )\n)<h3 class=\"box-title\">\n  <!-- TITLE CONTENT -->\n<\/h3>if (value.options.hasOwnProperty(...)) {\n  if (... !== ...) {\n    let newTitle;\n    newTitle = `<h3 class=\"box-title\">${...}<\/h3>`\n    newTitle = $.parseHTML(...);\n  }\n}if (value.options.hasOwnProperty(...)) {\n  if (... !== ...) {\n    let newTitle;\n    newTitle = `<h3 class=\"box-title\">${...}<\/h3>`\n    newTitle = $.parseHTML(...);\n    \n    $(el)\n      .find(...)\n      .replaceWith($(...));\n  }\n}if (value.options.hasOwnProperty(...)) {\n  if (... !== ...) {\n    let newTitle;\n    newTitle = `<h3 class=\"box-title\">${...}<\/h3>`\n    newTitle = $.parseHTML(...);\n    \n    $(el)\n      .find(...)\n      .replaceWith($(...));\n\n    config.title = ...;\n  }\n}"},{"path":"shiny-input-system.html","id":"quick-inputs","chapter":"12 Shiny’s input system","heading":"12.3 Utilities to quickly define new inputs","text":"","code":""},{"path":"shiny-input-system.html","id":"introduction-2","chapter":"12 Shiny’s input system","heading":"12.3.1 Introduction","text":"ever wondered Shiny.onInputChange Shiny.setInputValue comes (see article), actually defined initShiny function.recommend using Shiny.setInputValue Shiny.onInputChange, latter slightly misleading.\nBriefly, function avoids creation input binding faster code price pay: losing ability easily update new input R. Indeed, without input binding, R side updateInput function! default, Shiny.setInputValue able cache last set value input, identical, value assigned. behavior meet expectations need set input even value change, aware may specifify priority option like:","code":"exports.setInputValue = function(name, value, opts) {\n  opts = addDefaultInputOpts(opts);\n  inputs.setInput(name, value, opts);\n};Shiny.setInputValue(\"myinput\", value, {priority: \"event\"});"},{"path":"shiny-input-system.html","id":"examples-1","chapter":"12 Shiny’s input system","heading":"12.3.2 Examples","text":"Shiny.setInputValue becomes powerful combined numerous Shiny JavaScript events listed . get access Shiny JS object, wait shiny:connected event. following create custom input stores whether user MacOS. R side, ’ll access input$isMac.allows conditionally display elements deeply customize interface.\nfollowing example, card show different title user browsing MacOS.leverage shinyMobile package store current device information shiny input. Briefly, Framework7 (top built shinyMobile) method Framework7.device, gives many details related user device.","code":"$(document).on('shiny:connected', function(event) {\n  Shiny.setInputValue(\n    'isMac', \n    (navigator.appVersion.indexOf('Mac') != -1)\n  );\n});\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/set-input-value\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\nlibrary(OSUICode)\nlibrary(shinyWidgets)\n\nui <- fluidPage(\n  useShinydashboard(),\n  tags$head(\n    tags$script(\n      HTML(\"$(function() {\n        $(document).on('shiny:connected', function(event) {\n          Shiny.setInputValue(\n            'isMac',\n            (navigator.appVersion.indexOf('Mac') != -1)\n          );\n        });\n      });\"\n    ))\n  ),\n  verbatimTextOutput(\"info\"),\n  box2(\n    id = \"mybox\",\n    title = \"A box\",\n  )\n)\n\nserver <- function(input, output) {\n  output$info <- renderPrint(input$isMac)\n  observeEvent({\n    req(isTRUE(input$isMac))\n  }, {\n    updateBox2(\n      \"mybox\",\n      action = \"update\",\n      options = list(\n        title = \"Only visible for Mac users\"\n      )\n    )\n  })\n}\n\nshinyApp(ui, server)"},{"path":"shiny-input-system.html","id":"custom-data-format","chapter":"12 Shiny’s input system","heading":"12.4 Custom data format","text":"cases, automatic Shiny R JS data management may meet needs.\nintroduce input handlers, tool fine tune deserialization data JS.","code":""},{"path":"shiny-input-system.html","id":"the-dirty-way","chapter":"12 Shiny’s input system","heading":"12.4.1 The dirty way","text":"instance, assume create date JS new Date() store shiny input Shiny.setInputValue. R side, obtain date character, convenient. input handlers useful since allow manipulate data generated JS side injecting R. handlers created registerInputHandler takes two parameters:type allows connect handler Shiny.setInputValue. Note id followed handler type, instance Shiny.setInputValue('test:handler', ...) connected shiny::registerInputHandler('handler', ...). recommended Shiny documentation, input handler part package, best practice name like packageName.handlerName.function transform data, data main parameter.directly include JS code shiny app snippet, best practice convenient demonstration. second input give correct result thanks defined handler:","code":"\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/dummy-input-handler\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nregisterInputHandler(\"myPKG.textDate\", function(data, ...) {\n  if (is.null(data)) {\n    NULL\n  } else {\n    res <- try(as.Date(unlist(data)), silent = TRUE)\n    if (\"try-error\" %in% class(res)) {\n      warning(\"Failed to parse dates!\")\n      data\n    } else {\n      res\n    }\n  }\n}, force = TRUE)\n\nui <- fluidPage(\n  tags$script(HTML(\n    \"$(function(){\n      $(document).on('shiny:connected', function() {\n        var currentTime = new Date();\n        Shiny.setInputValue('time1', currentTime);\n        Shiny.setInputValue(\n          'time2:myPKG.textDate',\n          currentTime\n        );\n      });\n    });\n    \"\n  )),\n  verbatimTextOutput(\"res1\"),\n  verbatimTextOutput(\"res2\")\n)\n\nserver <- function(input, output, session) {\n  output$res1 <- renderPrint({\n    list(class(input$time1), input$time1)\n  })\n  output$res2 <- renderPrint({\n    list(class(input$time2), input$time2)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"shiny-input-system.html","id":"the-clean-way-leverage-gettype","chapter":"12 Shiny’s input system","heading":"12.4.2 The clean way: leverage getType","text":"cleanest way leverage getType method InputBinding class.\nLet’s refine text input handles dates. R side, customTextInput() function, check current value’s type:add custom data attribute input tag, won’t displayed value date:define custom handler. code run package loaded usually located zzz.R script:shiny already handles dates use built-input handler.\ncurrent handler designed explain underlying processes!JavaScript side, refer OSUICode.textDate defined input handler. recover data-type value passed R call handler type date. return false otherwise, default behavior:use shiny built-handler return \"shiny.date\" instead. run:sets value text default. opening HTML inspector setting break point getType method (Figure 12.20), check data type defined. Therefore input handler apply.\nFIGURE 12.20: Example getType call input handler\nsecond example, give date value function:illustrated Figure 12.21, date properly processed. Moreover, type valid date text field like 2020-11-12, recognized date, entering text return character element. way obtain slightly clever text input widget.\nFIGURE 12.21: Passing date text input correctly processes \nImportantly, since data-type set app startup checking class value, never change later. instance, start app text input value simple text, setting date app convert date since $(el).data(\"data-type\") always return undefined! Therefore, want able use text dates, sure wisely set initial value.finish, seamlessly make text input even clever, handling numbers. Even though shiny shiny.number input handler, simply makes sure whenever input missing value, NA returned instead \"\".\n(Figure 12.22).\nFIGURE 12.22: shiny.number input handler ensures empty numericInput returns NA instead \"\"\nwant handler recognizes string \"1\" convert number. R, converting string number gives NA:Therefore, obtain NA, return original data input gives correct type. zzz.R script, right previous handler, can write:also update JavaScript getType method follows:R side, don’t forget add extra else statement customTextInput() function:run:obtain desired behavior shown Figure 12.23.\nFIGURE 12.23: Passing number text input correctly processes \n","code":"\ntype <- if (inherits(value, \"Date\")) {\n  \"date\"\n} else {\n  NULL\n}\ntags$input(\n  id = inputId,\n  type = \"text\",\n  class = \"form-control input-text\",\n  value = value,\n  placeholder = placeholder,\n  `data-data-type` = type\n)\n.onLoad <- function(...) {\n  registerInputHandler(\n    \"OSUICode.textDate\", function(data, ...) {\n      if (is.null(data)) {\n        NULL\n      } else {\n        res <- try(as.Date(unlist(data)), silent = TRUE)\n        if (\"try-error\" %in% class(res)) {\n          warning(\"Failed to parse dates!\")\n          data\n        } else {\n          res\n        }\n      }\n  }, force = TRUE)\n}getType: function getType(el) {\n  var dataType = $(el).data(\"data-type\");\n  if (dataType === \"date\") return \"OSUICode.textDate\";\n  else return false;\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/input-handler-1\" \n# ) \n\n### APP CODE ### \nlibrary(OSUICode)\n\ncustomTextInputHandlerExample(7)\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/input-handler-2\" \n# ) \n\n### APP CODE ### \nlibrary(OSUICode)\n\ncustomTextInputHandlerExample(7, Sys.Date())\nas.numeric(\"test\")#> Warning: NAs introduced by coercion#> [1] NA\nregisterInputHandler(\n  \"OSUICode.textNumber\", function(data, ...) {\n    if (is.null(data)) {\n      NULL\n    } else {\n      res <- as.numeric(unlist(data))\n      if (is.na(res)) {\n        data\n      } else {\n        res\n      }\n    }\n  }, force = TRUE)getType: function getType(el) {\n  var dataType = $(el).data(\"data-type\");\n  if (dataType === \"date\") return \"OSUICode.textDate\";\n  else if (dataType === \"number\") return \"OSUICode.textNumber\";\n  else return false;\n}\ntype <- if (inherits(value, \"Date\")) {\n  \"date\"\n} else if (inherits(value, \"numeric\")) {\n  \"number\"\n} else {\n  NULL\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"input-system/input-handler-3\" \n# ) \n\n### APP CODE ### \nlibrary(OSUICode)\n\ncustomTextInputHandlerExample(7, 1)"},{"path":"shiny-input-lifecycle.html","id":"shiny-input-lifecycle","chapter":"13 Shiny inputs lifecycles","heading":"13 Shiny inputs lifecycles","text":"following, provide integrated view shiny input system summarizing \nmechanisms seen since chapter 11.","code":""},{"path":"shiny-input-lifecycle.html","id":"app-initialization","chapter":"13 Shiny inputs lifecycles","heading":"13.1 App initialization","text":"shiny apps starts, Shiny runs initShiny client. function three main tasks:Bind inputs outputs.Initialize inputs (necessary) initializeInputs.Initialize client websocket connection mentioned previous chapter 11 send initial values server.input bindings principle bundled shiny package. may user-defined like shinyMobile even simple shiny app. case, contained binding registry, namely inputBindings built top following class (apply output bindings):class method register binding. method executed calling Shiny.inputBindings.register(myBinding, 'reference');, appends newly created binding bindings array.shiny starts, find defined bindings getBindings method.\ndone, binding, find triggered. corresponding element found DOM, nothing done. found input, following methods triggered:getId returns input id. ensures uniqueness critical!getType optionally handles registerInputHandler defined user R side. detailed example shown 12.4.getValue gets initial input value.subscribe registers event listeners driving input behavior.data attribute shiny-input-binding added. allows shiny access input binding methods client, shown 12.1.4. shiny-bound-input class added, corresponding input appended boundInputs object (listing bound inputs) shiny:bound triggered client.done, shiny stores initial values variable initialInput, also containing client data pass Shinyapp.connect method. shown 11, latter opens client websocket connection, raises shiny:connected event send values server (R). time , shiny:sessioninitialized triggered.\nFIGURE 13.1: Shiny client side initialization\nchapter 11, briefly described Shiny JavaScript object. exercise, let’s explore Shiny.shinyApp object contains. definition located shinyapps.js script.creates several properties, easy guess like inputValues initialInput. Let’s run example open HTML inspector. Notice sliderInput set 500 t0 (initialization):Figure 13.2 shows access Shiny’s initial input value Shiny.shinyapp.$initialInput.obs. changing slider position, value given Shiny.shinyapp.$inputValues.obs. $initialInput $inputValues contain many elements, however interested slider function example.\nFIGURE 13.2: Explore initial input values\n","code":"var BindingRegistry = function() {\n  this.bindings = [];\n  this.bindingNames = {};\n}var ShinyApp = function() {\n  this.$socket = null;\n  \n  // Cached input values\n  this.$inputValues = {};\n  \n  // Input values at initialization (and reconnect)\n  this.$initialInput = {};\n  \n  // Output bindings\n  this.$bindings = {};\n  \n  // Cached values/errors\n  this.$values = {};\n  this.$errors = {};\n  \n  // Conditional bindings \n  // (show/hide element based on expression)\n  this.$conditionals = {};\n  \n  this.$pendingMessages = [];\n  this.$activeRequests = {};\n  this.$nextRequestId = 0;\n  \n  this.$allowReconnect = false;\n};\nui <- fluidPage(\n  sliderInput(\n    \"obs\", \n    \"Number of observations:\",\n    min = 0, \n    max = 1000, \n    value = 500\n  ),\n  plotOutput(\"distPlot\")\n)\n\nserver <- function(input, output, session) {\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n}\nshinyApp(ui, server)"},{"path":"shiny-input-lifecycle.html","id":"update-input-lifecycle","chapter":"13 Shiny inputs lifecycles","heading":"13.2 Update input","text":"try explain mechanisms update input server client. stated , starts update<name>Input function call, actually sends message current session. message received client websocket message manager:sends message appropriate handler, inputMessages:short, get inputId access corresponding input binding. triggers shiny:updateinput event call input binding receiveMessage method. fires setValue subscribe. way subscribe works really well covered official documentation.\ncallback function actually defined initialization process:valueChangeCallback ultimately calls inputs.setInput(id, value, opts). latter involves rather complex chain reactions (described ). important understand client send input values one one, batch:Overall, result stored queue, namely pendingData sent server shinyapp.sendInput:message update tag sent client websocket, connection opened. , added list pending messages.Finally, current inputValues updated. server side, new value received\nserver websocket message handler, ws$onMessage(message).\nFIGURE 13.3: Shiny initializing client side\n","code":"socket.onmessage = function(e) {\n  self.dispatchMessage(e.data);\n};addMessageHandler('inputMessages', function(message) {\n  // inputMessages should be an array\n  for (var i = 0; i < message.length; i++) {\n    var $obj = $('.shiny-bound-input#' + $escape(message[i].id));\n    var inputBinding = $obj.data('shiny-input-binding');\n\n    // Dispatch the message to the appropriate input object\n    if ($obj.length > 0) {\n      var el = $obj[0];\n      var evt = jQuery.Event('shiny:updateinput');\n      evt.message = message[i].message;\n      evt.binding = inputBinding;\n      $(el).trigger(evt);\n      if (!evt.isDefaultPrevented())\n        inputBinding.receiveMessage(el, evt.message);\n    }\n  }\n});function valueChangeCallback(binding, el, allowDeferred) {\n  var id = binding.getId(el);\n  if (id) {\n    var value = binding.getValue(el);\n    var type = binding.getType(el);\n    if (type)\n      id = id + \":\" + type;\n\n    let opts = {\n      priority: allowDeferred ? \"deferred\" : \"immediate\",\n      binding: binding,\n      el: el\n    };\n    inputs.setInput(id, value, opts);\n  }\n}\nlibrary(shiny)\n\nui <- fluidPage(\n  tags$script(\n    \"$(document).on('shiny:message', function(event) {\n      console.log(event.message);\n    });\"\n  ), \n  actionButton(\"go\", \"update\"),\n  textInput(\"test\", \"Test1\"),  \n  textInput(\"test2\", \"Test2\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$go, ignoreInit = TRUE, {\n    updateTextInput(session, \"test\", value = \"111\")\n    updateTextInput(session, \"test2\", value = \"222\")\n  })\n}\n\nshinyApp(ui, server)this.sendInput = function(values) {\n  var msg = JSON.stringify({\n    method: 'update',\n    data: values\n  });\n\n  this.$sendMsg(msg);\n    \n  $.extend(this.$inputValues, values);\n  \n  // ....; Extra code removed\n}this.$sendMsg = function(msg) {\n  if (!this.$socket.readyState) {\n    this.$pendingMessages.push(msg);\n  }\n  else {\n    this.$socket.send(msg);\n  }\n};"},{"path":"shiny-input-gems.html","id":"shiny-input-gems","chapter":"14 Mastering Shiny’s events","heading":"14 Mastering Shiny’s events","text":"’ve already seen couple Shiny JS events since beginning book. Advanced readers\nprobably know shiny:connected, meaning client server properly initialized \ninternal methods/functions available programmer. , add elements list, trying \ngive practical examples.","code":""},{"path":"shiny-input-gems.html","id":"get-the-last-changed-input","chapter":"14 Mastering Shiny’s events","heading":"14.1 Get the last changed input","text":"","code":""},{"path":"shiny-input-gems.html","id":"motivations","chapter":"14 Mastering Shiny’s events","heading":"14.1.1 Motivations","text":"probably question one day: can get last changed input Shiny app? already methods like one:Shouldn’t easier? client instead, thereby reducing server load?","code":"\nrunApp(\n  shinyApp(\n    ui = shinyUI(\n      fluidPage(\n        textInput('txt_a', 'Input Text A'),\n        textInput('txt_b', 'Input Text B'),\n        uiOutput('txt_c_out'),\n        verbatimTextOutput(\"show_last\")\n      )\n    ),\n    server = function(input, output, session) {\n      output$txt_c_out <- renderUI({\n        textInput('txt_c', 'Input Text C')\n      })\n      \n      values <- reactiveValues(\n        lastUpdated = NULL\n      )\n      \n      observe({\n        lapply(names(input), function(x) {\n          observe({\n            input[[x]]\n            values$lastUpdated <- x\n          })\n        })\n      })\n      \n      output$show_last <- renderPrint({\n        values$lastUpdated\n      })\n    }\n  )\n)"},{"path":"shiny-input-gems.html","id":"invoke-js-events","chapter":"14 Mastering Shiny’s events","heading":"14.1.2 Invoke JS events","text":"shiny:inputchanged event looking . fired time input gets new value. related events five properties:name, event name.value, new value.inputType, input type.binding, related input binding.el related input DOM element.may try :Changing textInput() value fires event. Contrary mentioned online documentation, inputType always value. case, alternative, access related input binding extract name, shown :use code custom shiny template, possible input bindings doesn’t name, thereby make event.binding.name.split('.')[1] crash, event.binding` undefined.textInput(), event also fired moving mouse cursor keyboard arrows, sort false positive, since value isn’t changed. However, Shiny.setInputValue sets new value input value really changed (unless priority set event), avoid edge case. exercice, may try add {priority: 'event'} code.$(document).('shiny:inputchanged') also cancellable, may definitely prevent input change value, calling event.preventDefault();.","code":"\nlibrary(shiny)\n\nui <- fluidPage(\n  tags$script(\n  \"$(document).on('shiny:inputchanged', function(event) {\n    console.log(event);\n  });\"\n  ), \n  textInput(\"test\", \"Test\")\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)$(document).on('shiny:inputchanged', function(event) {\n  Shiny.setInputValue(\n    'pleaseStayHome', \n    {\n      name: event.name, \n      value: event.value, \n      type: event.binding.name.split('.')[1]\n    }\n  );\n});\nui <- fluidPage(\n  tags$script(\n  \"$(document).on('shiny:inputchanged', function(event) {\n    event.preventDefault();\n  });\"\n  ), \n  textInput(\"test\", \"Test\"),\n  textOutput(\"val\")\n)\n\nserver <- function(input, output) {\n  output$val <- renderText(input$test)\n}\n\nshinyApp(ui, server)"},{"path":"shiny-input-gems.html","id":"example","chapter":"14 Mastering Shiny’s events","heading":"14.1.3 Example","text":"shinyMobile natively implements feature may accessed input$lastInputChanged.approach advantage overload server part complex logic.","code":"\nlibrary(shinyMobile)\nshinyApp(\n  ui = f7Page(\n    title = \"My app\",\n    f7SingleLayout(\n      navbar = f7Navbar(\n        title = \"Single Layout\",\n        hairline = FALSE,\n        shadow = TRUE\n      ),\n      toolbar = f7Toolbar(\n        position = \"bottom\",\n        f7Link(label = \"Link 1\", href = \"https://www.google.com\"),\n        f7Link(label = \"Link 2\", href = \"https://www.google.com\")\n      ),\n      # main content,\n      f7Card(\n        f7Text(inputId = \"text\", label = \"Text\"),\n        f7Slider(\n          inputId = \"range1\", \n          label = \"Range\", \n          min = 0, max = 2, \n          value = 1, \n          step = 0.1\n        ),\n        f7Stepper(\n          inputId = \"stepper1\", \n          label = \"Stepper\", \n          min = 0, \n          max = 10, \n          value = 5\n        ),\n        verbatimTextOutput(\"lastChanged\")\n      )\n    )\n  ),\n  server = function(input, output) {\n    output$lastChanged <- renderPrint(input$lastInputChanged)\n  }\n)"},{"path":"shiny-input-gems.html","id":"about-shinylogs","chapter":"14 Mastering Shiny’s events","heading":"14.1.4 About {shinylogs}","text":"shinylogs (Meyer Perrier 2019) package developed dreamRs provide feature much advanced options.","code":"\nlibrary(shinylogs)\n\nshinyApp(\n  ui = fluidPage(\n    numericInput(\"n\", \"n\", 1),\n    sliderInput(\"s\", \"s\", min = 0, max = 10, value = 5),\n    verbatimTextOutput(\"lastChanged\")\n  ),\n  server = function(input, output, session) {\n    # specific to shinylogs\n    track_usage(storage_mode = store_null())\n    output$lastChanged <- renderPrint({\n      input$`.shinylogs_lastInput`\n    })\n  }\n)"},{"path":"shiny-input-gems.html","id":"custom-overlay-screens","chapter":"14 Mastering Shiny’s events","heading":"14.2 Custom overlay screens","text":"ever designed corporate production apps, probably faced situation clients wanted\nloading screen, whenever computation occurs startup.\ndate, one comprehensive alternative waiter (Coene 2021) package John Coene.\nprovide myriad options significantly enhance perceived performance app.\nfollowing, ’ll focus waiter_preloader() waiter_on_busy() functions. work?","code":""},{"path":"shiny-input-gems.html","id":"preloader","chapter":"14 Mastering Shiny’s events","heading":"14.2.1 Preloader","text":"hood, feature relies shiny:idle event. app startup, shiny:idle triggered just shiny:connected shiny:sessioninitialized. , shiny:idle also called time computation cycle finished.Whenever call waiter_preloader(), HTML overlay added DOM. Moreover, extra JS code ensures \nhide waiter shiny ready:security, window.ran prevents us running code twice. example, consider app \nslider input plot output. simulated delay three seconds produce plot:Notice waiter correctly handles plot processing time.","code":"window.ran = false;\n$(document).on('shiny:idle', function(event){\n  if(!window.ran)\n    hide_waiter(id = null);\n  window.ran = true;\n});\nlibrary(shiny)\nlibrary(waiter)\n\nui <- fluidPage(\n  use_waiter(), # dependencies\n  # shows before anything else \n  waiter_preloader(spin_fading_circles()), \n  sliderInput(\"obs\", \"Number of observations:\",\n    min = 0, max = 1000, value = 500\n  ),\n  plotOutput(\"distPlot\")\n)\n\nserver <- function(input, output){\n  output$distPlot <- renderPlot({\n    Sys.sleep(3)\n    hist(rnorm(input$obs))\n  })\n}\nshinyApp(ui, server)"},{"path":"shiny-input-gems.html","id":"load-on-busy","chapter":"14 Mastering Shiny’s events","heading":"14.2.2 Load on busy","text":"Similarly, waiter_on_busy() exploit shiny:idle shiny:busy events. first create loader soon \nshiny busy:hidden shiny done:","code":"$(document).on('shiny:busy', function(event) {\n  show_waiter(\n    id = null,\n    html = ..., \n    color = ...\n  );\n});$(document).on('shiny:idle', function(event) {\n  hide_waiter(null);\n});"},{"path":"shiny-custom-handler.html","id":"shiny-custom-handler","chapter":"15 Dynamically manage content with handlers","heading":"15 Dynamically manage content with handlers","text":"three previous chapters largely dedicated Shiny input elements. Yet, everything input Shiny. chapter shows one may leverage internal Shiny JavaScript tools build highly interactive optimized interfaces.","code":""},{"path":"shiny-custom-handler.html","id":"introduction-3","chapter":"15 Dynamically manage content with handlers","heading":"15.1 Introduction","text":"shown Hadley Wickham’s Mastering Shiny book, exists many functions update UI components server. can use update functions like updateTextInput() updateTabsetPanel().\ntools manage UI consist toggle functions like hideTab(), showTab(), limit number , often obliges use packages like shinyjs (Attali 2020) write custom JavaScript code. Finally, insertUI() removeUI() allow dynamically insert remove element, anywhere DOM. Let’s start chapter less optimized approach, renderUI(), highlight caveats introduce better approaches optimize apps.","code":""},{"path":"shiny-custom-handler.html","id":"the-renderui-case","chapter":"15 Dynamically manage content with handlers","heading":"15.2 The renderUI case","text":"renderUI() uiOutput() couple famous way render HTML block server, without much pain. update<INPUT_NAME> toggle tools component specific, meaning target element modify, renderUI/uiOutput re-renders whole block time associated reactive dependency invalidated, even though little part deserve re-rendered. approach usually avoid since implies poor performances complex apps. consider simple app three seconds computation required get slider input value, subsequently triggering slider input rendering:example updateSliderInput() functions:first approach’s biggest problem three seconds delay, nothing happens, may discourage end user. Although ideal, second approach already much better, even though may tempted play slider (!), suddenly changes value, thereby creating possibly weird situation.naive dirty example renderUI() makes entire dropdown menu re-render time something changes renderUI() expression, definitely optimal. React users probably leap chairs ever heard . Indeed, React, re-render needs updated!Run app , open HTML inspector click add one message. Notice entire block updated, whereas corresponding HTML element (Figure 15.1). doubt advanced user see place insertUI().requires bs4Dash >= 2.0.0!\nFIGURE 15.1: renderUI specific\nlack specificity justifies avoid method much possible, overloads server. Later chapter, leverage custom handlers solve problem. Overall, ’s work, maybe complex ensures specific optimized.","code":"\nlibrary(shiny)\nui <- fluidPage(\n  uiOutput(\"moreControls\")\n)\n\nserver <- function(input, output) {\n  \n  sliderValue <- reactive({\n    # computationally intensive task\n    Sys.sleep(3)\n    1\n  })\n  \n  output$moreControls <- renderUI({\n    sliderInput(\"n\", \"N\", sliderValue(), 1000, 500)\n  })\n}\nshinyApp(ui, server)\nui <- fluidPage(\n  sliderInput(\"n\", \"N\", 100, 1000, 500)\n)\n\nserver <- function(input, output, session) {\n  \n  sliderValue <- reactive({\n    # computationally intensive task\n    Sys.sleep(3)\n    150\n  })\n  \n  observeEvent(sliderValue(), {\n    updateSliderInput(\n      session,\n      \"n\",\n      value = sliderValue()\n    )\n  })\n}\nshinyApp(ui, server)\nlibrary(bs4Dash)\nlibrary(tibble)\n\nnew_message <- tibble(\n  message = \"New message\",\n  from = \"Paul\",\n  time = \"yesterday\",\n  color = \"success\"\n)\n\nshinyApp(\n  ui = dashboardPage(\n    dark = FALSE,\n    header = dashboardHeader(\n      rightUi = uiOutput(\"messages\", container = tags$li)\n    ),\n    sidebar = dashboardSidebar(),\n    controlbar = dashboardControlbar(),\n    footer = dashboardFooter(),\n    title = \"test\",\n    body = dashboardBody(actionButton(\"add\", \"Add message\"))\n  ),\n  server = function(input, output) {\n    \n    messages <- reactiveValues(\n      items = tibble(\n        message = rep(\"A message\", 10),\n        from = LETTERS[1:10],\n        time = rep(\"yesterday\", 10),\n        color = rep(\"success\", 10)\n      )\n    )\n    \n    observeEvent(input$add, {\n      messages$items <- add_row(messages$items, new_message)\n    })\n    \n    output$messages <- renderUI({\n      dropdownMenu(\n        badgeStatus = \"danger\",\n        type = \"messages\",\n        lapply(seq_len(nrow(messages$items)), function(r) {\n          temp <- messages$items[r, ]\n          messageItem(\n            message = temp$message,\n            from = temp$from, \n            time = temp$time,\n            color = temp$color\n          )\n        })\n      )\n    })\n  }\n)"},{"path":"shiny-custom-handler.html","id":"insert-ui","chapter":"15 Dynamically manage content with handlers","heading":"15.3 Other Shiny handlers","text":"mentioned Chapter 13.2, update<INPUT_NAME> functions Shiny defined messages handlers.","code":""},{"path":"shiny-custom-handler.html","id":"the-insertui-case","chapter":"15 Dynamically manage content with handlers","heading":"15.3.1 The insertUI case","text":"hood, insertUI() sends R message session$sendInsertUI, via websocket:content processed shiny:::processDeps :Finds resolve HTML dependency, shown Chapter 4.dependency, makes sure corresponding files can accessed server createWebDependency() addResourcePath().Returns list HTML element dependencies. HTML accessed message.content.html dependencies message.content.deps.strongly discourage use shiny:::processDeps internal function, since might change future Shiny releases. Instead, ’ll leverage htmltools::renderTags function mentioned earlier 5.7.1.UI side, Shiny predefined message handler:checks whether provided selector multiple DOM elements. least one item found, calls renderContent(html, el, dependencies) triggers renderHtml(html, el, dependencies):Processes provided HTML (treat head, body singletons).Renders given dependencies page’s head.Insert HTML page position provided insertUI parameter. Internally calls insertAdjacentHTML method.Initialize input, bind scope send value server output/observers invalidated. Outputs also bound. step skiped, newly inserted input won’t react, related outputs observer.Keep renderContent renderHtml mind, ’ll use section 15.4.2.","code":"\nsession$sendInsertUI(\n  selector = selector, \n  multiple = multiple, \n  where = where, \n  content = processDeps(ui, session)\n)\n\nsendInsertUI = function(selector, multiple, where, content) {\n  private$sendMessage(\n    `shiny-insert-ui` = list(\n      selector = selector,\n      multiple = multiple,\n      where = where,\n      content = content\n    )\n  )\n}addMessageHandler('shiny-insert-ui', function(message) {\n  let targets = $(message.selector);\n  if (targets.length === 0) {\n    // render the HTML and deps to a null target, so\n    // the side-effect of rendering the deps, singletons,\n    // and <head> still occur\n    console.warn(\n      'The selector you chose (\"' + \n      message.selector +\n      '\") could not be found in the DOM.'\n    );\n    exports.renderHtml(\n      message.content.html, \n      $([]), \n      message.content.deps\n    );\n  } else {\n    targets.each(function (i, target) {\n      exports.renderContent(\n        target, \n        message.content, \n        message.where\n      );\n      return message.multiple;\n    });\n  }\n})"},{"path":"shiny-custom-handler.html","id":"example-1","chapter":"15 Dynamically manage content with handlers","heading":"15.3.2 Example","text":"Going back previous example, don’t just go insertUI()?Well, item inserted, item counter well dropdown text , depicted Figure 15.2! can’t blame insertUI() , since fault bs4Dash component actually interconnected HTML pieces. Indeed, bs4Dash::dropdownMenu() function generates HTML, detecting number bs4Dash::messageItem. works well app fires component able maintain date state.\nFIGURE 15.2: insertUI enough specific\nmay fix adding extra insertUI() removeUI() replace parts (insertUI() update targeted item). Moreover, must set correct priority observeEvent() (try remove , fail) ensure remove happens insert:many observeEvent() simple action! Imagine 10 similar tasks … Isn’t way , thereby reducing server code? Moreover, setting priorities observeEvent() rather bad smell poorly designed shiny app.seems create message handler!","code":"\nui <- dashboardPage(\n  dark = FALSE,\n  header = dashboardHeader(\n    rightUi = dropdownMenu(\n      badgeStatus = \"danger\",\n      type = \"messages\"\n    )\n  ),\n  sidebar = dashboardSidebar(),\n  controlbar = dashboardControlbar(),\n  footer = dashboardFooter(),\n  title = \"test\",\n  body = dashboardBody(actionButton(\"add\", \"Add dropdown item\"))\n)\n\nuser <- \"https://adminlte.io/themes/v3/dist/img/user2-160x160.jpg\"\n\nshinyApp(\n  ui = ui,\n  server = function(input, output, session) {\n    \n    observeEvent(input$add, {\n      insertUI(\n        selector = \".dropdown-menu > \n        .dropdown-item.dropdown-header\",\n        where = \"afterEnd\",\n        ui = messageItem(\n          message = paste(\"message\", input$add),\n          image = user,\n          from = \"Divad Nojnarg\",\n          time = \"today\",\n          color = \"success\"\n        )\n      )\n    })\n  }\n)\nuser <- \"https://adminlte.io/themes/v3/dist/img/user2-160x160.jpg\"\nshinyApp(\n  ui = ui,\n  server = function(input, output, session) {\n    # remove old badge\n    observeEvent(input$add, {\n      removeUI(selector = \".badge-danger.navbar-badge\")\n    }, priority = 1)\n    # insert new badge\n    observeEvent(input$add, {\n      insertUI(\n        selector = \"[data-toggle=\\\"dropdown\\\"]\",\n        where = \"beforeEnd\",\n        ui = tags$span(\n          class = \"badge badge-danger navbar-badge\", \n          input$add\n        )\n      )\n    })\n    \n    # remove old text counter\n    observeEvent(input$add, {\n      removeUI(selector = \".dropdown-item.dropdown-header\")\n    }, priority = 1)\n    \n    # insert new text counter\n    observeEvent(input$add, {\n      insertUI(\n        selector = \".dropdown-menu\",\n        where = \"afterBegin\",\n        ui = tags$span(\n          class = \"dropdown-item dropdown-header\", \n          sprintf(\"%s Items\", input$add)\n        )\n      )\n    })\n    \n    observeEvent(input$add, {\n      insertUI(\n        selector = \".dropdown-menu > \n        .dropdown-item.dropdown-header\",\n        where = \"afterEnd\",\n        ui = messageItem(\n          message = paste(\"message\", input$add),\n          image = user,\n          from = \"Divad Nojnarg\",\n          time = \"today\",\n          color = \"success\"\n        )\n      )\n    })\n    \n  }\n)"},{"path":"shiny-custom-handler.html","id":"custom-handlers","chapter":"15 Dynamically manage content with handlers","heading":"15.4 Custom handlers","text":"Custom handlers specific category message handlers, user defined.","code":""},{"path":"shiny-custom-handler.html","id":"theory","chapter":"15 Dynamically manage content with handlers","heading":"15.4.1 Theory","text":"Shiny provides tools ease communication R JavaScript, illustrated section 11. already discussed usage session$sendInputMessage() input binding section 12. important method session$sendCustomMessage(type, message). works pair JS method Shiny.AddCustomMessageHandler, tightly linked type parameter.JavaScript part defined :following shiny app example simply print welcome message every five seconds. obviously set options(shiny.trace = TRUE) capture messages sent R JS. Figure 15.3 summarizes main mechanisms involved R JS communication. corresponding code may found . Don’t forget load say_hello_to_js() function :\nFIGURE 15.3: R JavaScript\nCombining Shiny.setInputValue Shiny.addCustomMessageHandler, fun example\nsets body background result simple button click.\ndefined three JS pieces:getPokemon whose script adapted Colin Fay et al. (see ). function fetches pokeapi data successful sets input value, available R side.event listener set button page time click,\ncall getPokemon select random background image.input$pokeData actually quite complex list manipulation done R observeEvent() block. done, send data back JS websocket (session object sends message).JS side, last block custom message handler add inline\nCSS properties body element.demonstration may run {OSUICode} side package:","code":"\nsay_hello_to_js <- function(\n  text, \n  session = getDefaultReactiveDomain()\n) {\n  session$sendCustomMessage(type = 'say-hello', message = text)\n}$(function() {\n  Shiny.AddCustomMessageHandler(\n    'say-hello', function(message) {\n      alert(`R says ${message} to you!`)\n  });\n});\nlibrary(OSUICode)\nshinyAppDir(system.file(\n  \"custom-handlers/say_hello\", \n  package = \"OSUICode\"\n))$(function() {\n  // Taken from Colin\n  const getPokemon = () => {\n    // FETCHING THE API DATA\n    let randId = Math.floor(Math.random() * (+151 + 1 - +1)) + +1;\n    fetch('https://pokeapi.co/api/v2/pokemon/' + randId)\n    // DEFINE WHAT HAPPENS WHEN JAVASCRIPT RECEIVES THE DATA\n    .then((data) => {\n      // TURN THE DATA TO JSON\n      data.json().then((res) => {\n        // SEND THE JSON TO R\n        Shiny.setInputValue('pokeData', res, {priority: 'event'})\n      })\n    })\n    // DEFINE WHAT HAPPENS WHEN THERE IS AN ERROR FETCHING THE API\n    .catch((error) => {\n      alert('Error catching result from API')\n    })\n  };\n        \n  // add event listener\n  $('#button').on('click', function() {\n    getPokemon();\n  });\n        \n  // update background based on R data\n  Shiny.addCustomMessageHandler(\n    'update_background', function(message) {\n      $('body').css({\n        'background-image':'url(' + message +')', \n        'background-repeat':'no-repeat'\n      });\n  });\n});\nlibrary(OSUICode)\nrunPokemonExample()"},{"path":"shiny-custom-handler.html","id":"custom-ui-functions","chapter":"15 Dynamically manage content with handlers","heading":"15.4.2 Toward custom UI management functions","text":"","code":""},{"path":"shiny-custom-handler.html","id":"an-insertmessageitem-function","chapter":"15 Dynamically manage content with handlers","heading":"15.4.2.1 An insertMessageItem function","text":"example, go back bs4Dash::dropdownMenu() issue, discussed earlier\nchapter. propose method involving custom message handlers.create insertMessageItem function two parameters:item, HTML element want insert DOM.session, used send message JavaScript session$sendCustomMessage.don’t use htmltools::renderTags unlikely messageItem contains extra dependency. item converted character (important) sent JavaScript shiny session R6 object. give type, add-message-item, able identify JavaScript Shiny.addCustomMessageHandler.also update dropdown menu item counter well icon text since dropdown menu re-rendered. number items given dropdown children (without dropdown-divier class). two extra JS steps save us create extra observeEvent() server, shown .\nrecover sent message JS side Shiny.addCustomMessageHandler, parse string HTML $.parseHTML insert header (next UI element dropdown body). bs4Dash::dropdownMenu() modified dependencies attached. may run example . Note load {OSUICode} overwrite bs4Dash function:solution significantly lightens server code since everything may done JS side one step.","code":"\ninsertDropdownItem <- function(\n  item, \n  session = shiny::getDefaultReactiveDomain()\n) {\n  session$sendCustomMessage(\n    type = \"add-dropdown-item\", \n    message = as.character(item)\n  )\n}$(function() {\n  Shiny.addCustomMessageHandler(\n    'add-message-item', function(message) {\n      // since we do not re-render the dropdown, \n      // we must update its item counter\n      let $items = $('.dropdown-menu')\n        .find('.dropdown-item')\n        .length;\n      $('.dropdown-item.dropdown-header').html($items + ' Items');\n      $('.nav-item.dropdown').find('.navbar-badge').html($items);\n      // convert string to HTML\n      let itemTag = $.parseHTML(message)[0];\n      $(itemTag).insertAfter($('.dropdown-item.dropdown-header'));\n  });\n});\n# shinyAppDir(system.file(\n#   \"custom-handlers/add-message-item\", \n#   package = \"OSUICode\"\n# ))\nuser <- \"https://adminlte.io/themes/v3/dist/img/user2-160x160.jpg\"\nlibrary(OSUICode)\nshinyApp(\n  ui = dashboardPage(\n    dark = FALSE,\n    header = dashboardHeader(\n      rightUi = OSUICode::dropdownMenu(\n        badgeStatus = \"danger\",\n        type = \"messages\"\n      )\n    ),\n    sidebar = dashboardSidebar(),\n    controlbar = dashboardControlbar(),\n    footer = dashboardFooter(),\n    title = \"test\",\n    body = dashboardBody(actionButton(\"add\", \"Add dropdown item\"))\n  ),\n  server = function(input, output, session) {\n    observeEvent(input$add, {\n      insertMessageItem(\n        messageItem(\n          message = paste(\"message\", input$add),\n          image = user,\n          from = \"Divad Nojnarg\",\n          time = \"today\",\n          color = \"success\"\n        )\n      )\n    })\n  }\n)"},{"path":"shiny-custom-handler.html","id":"a-chat-system-for-shinydashboardplus","chapter":"15 Dynamically manage content with handlers","heading":"15.4.2.2 A chat system for shinydashboardPlus","text":"shinydashboardPlus user messages provide easy way create chat system within shiny app. userMessages() hosts main container userMessage() message element. pure HTML:Figure 15.4 shows overall appearance.\nFIGURE 15.4: Chat user interface AdminLTE2\nGiven JavaScript API available handle messages, send/receive/edit/remove action, going design dedicated R JavaScript API step step.","code":"<div class=\"direct-chat-msg\">\n  <div class=\"direct-chat-info clearfix\">\n    <span class=\"direct-chat-name pull-left\">\n      Alexander Pierce\n    <\/span>\n    <span class=\"direct-chat-timestamp pull-right\">\n      23 Jan 2:00 pm\n    <\/span>\n  <\/div>\n  <!-- /.direct-chat-info -->\n  <img class=\"direct-chat-img\" src=\"dist/img/user1-128x128.jpg\" \n  alt=\"message user image\">\n  <!-- /.direct-chat-img -->\n  <div class=\"direct-chat-text\">\n    Is this template really for free? That's unbelievable!\n  <\/div>\n  <!-- /.direct-chat-text -->\n<\/div>"},{"path":"shiny-custom-handler.html","id":"html-elements","chapter":"15 Dynamically manage content with handlers","heading":"15.4.2.2.1 HTML elements","text":"message container simple div element:... receives messages. AdminLTE demonstration page, class direct-chat-warning gives yellow color sent messages, received messages always gray. shinydashboardPlus, container defined :important element id parameter makes link custom message handler JavaScript side. message element defined :three parts:author tag, defined messageInfo variable.author image, contained messageImg variable.message , defined messageTxt variable.message class varies depending whether received sent, actually changes position (left right, respectively). Note corresponding HTML classes like direct-chat-text since use JS code.","code":"<div class=\"direct-chat-messages\">...<\/div>\nuserMessages <- function(..., id = NULL, status, width = 4, \n                         height = NULL) {\n  cl <- \"direct-chat-messages direct-chat\"\n  if (!is.null(height)) shiny::validateCssUnit(height)\n  if (!is.null(status)) {\n    validateStatus(status)\n    cl <- paste0(cl, \" direct-chat-\", status)\n  }\n  msgtag <- shiny::tags$div(\n    class = cl, \n    ..., \n    style = if (!is.null(height)) {\n      sprintf(\"height: %s; overflow-y: auto;\", height)\n    } else {\n      \"height: 100%;\"\n    }\n  )\n  \n  shiny::tags$div(\n    id = id,\n    class = if (!is.null(width)) paste0(\"col-sm-\", width),\n    msgtag\n  )\n  \n}\nuserMessage <- function(..., author, date = NULL, image = NULL, \n                        type = c(\"sent\", \"received\")) {\n  \n  type <- match.arg(type)\n  messageCl <- \"direct-chat-msg\"\n  if (type == \"sent\") messageCl <- paste0(messageCl, \" right\")\n  \n  # message info\n  messageInfo <- shiny::tags$div(\n    class = \"direct-chat-info clearfix\",\n    shiny::tags$span(\n      class = if (type == \"right\") {\n        \"direct-chat-name pull-right\"\n      } else {\n        \"direct-chat-name\"\n      }, \n      author\n    ),\n    if (!is.null(date)) {\n      shiny::tags$span(\n        class = if (type == \"right\") {\n          \"direct-chat-timestamp right\"\n        } else {\n          \"direct-chat-timestamp\"\n        }, \n        date\n      )\n    }\n  )\n  \n  # message Text\n  messageTxt <- shiny::tags$div(\n    class = \"direct-chat-text\", \n    ...\n  )\n  \n  # message author image\n  messageImg <- shiny::tags$img(\n    class = \"direct-chat-img\", \n    src = image\n  )\n  \n  shiny::tags$div(\n    class = messageCl,\n    messageInfo,\n    messageImg, \n    messageTxt\n  )\n}"},{"path":"shiny-custom-handler.html","id":"handle-interactions","chapter":"15 Dynamically manage content with handlers","heading":"15.4.2.2.2 Handle interactions","text":"userMessages() userMessage() alone provide static API. Let’s design updateUserMessages() function offers way update message container. function must allow :Add message list.Remove existing message.Update selected message.now, assume add one message time. updateUserMessages() linked userMessages() container id parameter. order delete/update message, define index parameterDon’t forget R starts 1 JS starts 0.Consequently, decrease R index 1 JS receives correct number. must also provide content parameter update existing message content. content compatible userMessage structure. expect user pass list like:Interestingly, may offer ability add input/output element message content (shown ) dependencies yet made available shiny. therefore assume content shiny tag list shiny tags, may contain elements extra dependencies leverage htmltools::renderTags() function R side elements lapply() function. Finally, message sent JS session$sendCustomMessage:also share container id able select appropriate target JS side. reminder, message handler name JS side!Note session$ns actually makes sure function can work within shiny modules.now done R side still design JS interface. first step create custom message handler skeleton:message parameter actually message sent R updateUserMessages() function. recall send list, subsequently converted JS object. Therefore, access container id element, :similarly elements. may nested lists, like message content, complex handle: simply use . JS notation access lower level elements, message.content.text message text.second step store message elements multiple variables separated commas. step mandatory improves code readability:following show process message content. sake simplicity, assume able edit message text. mentioned earlier, two possible cases:text simple text simple HTML without extra dependency, nothing storing meaningful variable.text list shiny tags containing input/output extra dependencies like sliderInput(). leverage renderHtml method correctly process missing dependencies passed R via htmltools::renderTags() updateUserMessages().yields:hasOwnProperty checks whether content text property, avoids running code\nwhenever necessary., next step implement multiple options provided user (update, add, remove). consider simplest case, remove message. remind reader action contains user choice updateUserMessages(). need remove given message?index contained index variable.container id.Remember message direct-chat-msg class.Use remove jQuery method.therefore target main container $(\"#\" + id), look messages find(\".direct-chat-msg\"), specify target using eq(index - 1) (index R value) apply remove method:add security console.warn whenever user wants delete message exist. leave reader exercise.second case consists adding new message. define new variables containing \nauthor, date, image message type. reminder message HTML structure:JS logic, use template replace relevant element (see capital letters)\npreviously created variables. might use string interpolation. wrap elements direct-chat-msg div class may vary depending message type. sent, class direct-chat-msg right direct-chat-msg otherwise. final step target main container $(\"#\" + id), look messages slot find(\".direct-chat-messages\") (message container nested main wrapper) append \nDOM. used append adds message end choose prepend add top\nmessages. behavior may defined programmer option end-user.\nAlternatively, developer expose external parameter control add position.Finally, last case update given message. stated , assume edit \nmessage text date. update message, target messages container $(\"#\" + id),\nlook texts find(\".direct-chat-text\"), refine choice targeting good element \neq(index - 1) call replaceWith containing new text element:Don’t forget unbind, re-initialize bind inputs successively calling Shiny.unbindAll();, Shiny.initializeInputs(); Shiny.bindAll();. ommit part, newly inserted input/output elements won’t work! whole JS code may found :Output shown Figure 15.5. reproduce figure,\nmay click add message, click update message leaving numeric input 1.\nFIGURE 15.5: Chat user interface {shinydashboardPlus}\nwell demonstration:can’t use renderContent JS function, thereby allowing use remove three extra steps (unbind, initialize bind inputs)? lead timing issue. Indeed,\nlet’s say first click add message creates one slider input one plot output.\nworks well first time since element don’t exist Shiny. remove newly created message click add, obtain error message Uncaught Duplicate binding ID distPlot. root cause rather obvious internal renderContent. later called target DOM. means time, actually added second output (identical first one) without unbinding first, thereby causing duplication error.Chapter 20 provide another case study practice custom handler design.","code":"\nimg <- \"https://adminlte.io/themes/v3/dist/img/user2-160x160.jpg\"\nlist(\n  author = \"David\",\n  date = \"Now\",\n  image = img,\n  type = \"received\",\n  text = tagList(\n    sliderInput(\n      \"obs\", \n      \"Number of observations:\",\n      min = 0, \n      max = 1000, \n      value = 500\n    ),\n    plotOutput(\"distPlot\")\n  )\n)\nupdateUserMessages <- function(\n  id, \n  action = c(\"add\", \"remove\", \"update\"), \n  index = NULL, \n  content = NULL, \n  session = shiny::getDefaultReactiveDomain()\n) {\n  action <- match.arg(action)\n  \n  content <- lapply(content, function(c) {\n    if (inherits(c, \"shiny.tag\") || \n        inherits(c, \"shiny.tag.list\")) {\n      # necessary if the user pass input/output with deps\n      # that are not yet available in the page before \n      # inserting the new tag\n      c <- htmltools::renderTags(c)\n    }\n    c\n  })\n  \n  session$sendCustomMessage(\n    \"user-messages\", \n    list(\n      id = session$ns(id), \n      action = action, \n      index = index,\n      body = content\n    )\n  )\n}Shiny.addCustomMessageHandler(\n  \"user-messages\", function(message) {\n    // JS logic\n});message.idShiny.addCustomMessageHandler(\n  \"user-messages\", function(message) {\n    let id = message.id, \n      action = message.action, \n      content = message.body, \n      index = message.index;\n});Shiny.addCustomMessageHandler(\n  \"user-messages\", function(message) {\n  let id = message.id, \n    action = message.action, \n    content = message.body, \n    index = message.index;\n  \n  if (content.hasOwnProperty(\"text\")) {\n    let text;\n    if (content.text.html === undefined) {\n      text = content.text;\n    } else {\n      text = Shiny.renderHtml(\n        content.text.html, \n        $([]), \n        content.text.dependencies\n      ).html;\n    } \n  }\n  \n});if (action === \"remove\") {\n  $(\"#\" + id).find(\".direct-chat-msg\").eq(index - 1).remove();\n}<div class=\"direct-chat-msg\">\n  <div class=\"direct-chat-info clearfix\">\n    <span class=\"direct-chat-name pull-left\">\n      AUTHOR (TO REPLACE)\n    <\/span>\n    <span class=\"direct-chat-timestamp pull-right\">\n      DATE (TO REPLACE)\n    <\/span>\n  <\/div>\n  <!-- /.direct-chat-info -->\n  <img class=\"direct-chat-img\" src=\"IMAGE URL (TO REPLACE)\" \n  alt=\"message user image\">\n    <!-- /.direct-chat-img -->\n  <div class=\"direct-chat-text\">MAIN CONTENT (TO REPLACE)\n  <\/div>\n  <!-- /.direct-chat-text -->\n<\/div>// other condition before ...\nelse if (action === \"add\") {\n  let author = content.author, \n    date = content.date, \n    image = content.image, \n    type = content.type;\n      \n  // build the new message \n  let newMessage = `\n    <div class=\"direct-chat-info clearfix\">\n      <span class=\"direct-chat-name\"> \n        ${author}\n      <\/span>\n      <span class=\"direct-chat-timestamp\" \n        style=\"margin-left: 4px\">\n        ${date}\n      <\/span>\n    <\/div>\n    <img class=\"direct-chat-img\" src=\"${image}\"/> \n    <div class=\"direct-chat-text\">${text}<\/div>`;\n    \n  // build wrapper\n  let newMessageWrapper;\n  if (type === \"sent\") {\n    newMessageWrapper = `\n      <div class=\"direct-chat-msg right\">\n        ${newMessage} \n      <\/div>`;\n  } else {\n    newMessageWrapper = `\n      <div class=\"direct-chat-msg\">\n        ${newMessage} \n      <\/div>`;\n  }\n  \n  // append message\n  $(\"#\" + id)\n    .find(\".direct-chat-messages\")\n    .append(newMessageWrapper);\n}else if (action === \"update\") {\n  // today's date\n  let d = new Date();\n  let month = d.getMonth() + 1;\n  let day = d.getDate();\n  let today = d.getFullYear() + '/' +\n    ((''+month).length<2 ? '0' : '') + month + '/' +\n    ((''+day).length<2 ? '0' : '') + day;\n    \n  // we assume only text may be updated. \n  // Does not make sense to modify author\n  \n  $(\"#\" + id)\n    .find(\".direct-chat-text\")\n    .eq(index - 1)\n    .replaceWith(`\n      <div class=\"direct-chat-text\">\n        <small class=\"text-red\">\n          (modified: ${today})\n        <\/small>\n        <br>\n      <\/div>\n    `)\n}// This code creates a custom handler for userMessages\nShiny.addCustomMessageHandler(\n  \"user-messages\", function(message) {\n  let id = message.id, \n    action = message.action, \n    content = message.body, \n    index = message.index;\n  \n  // message text\n  // We use Shiny.renderHtml to handle the case where \n  // the user pass input/outputs in the updated content \n  // that require a new dependency not available in the \n  // page at startup. \n  if (content.hasOwnProperty(\"text\")) {\n    let text;\n    if (content.text.html === undefined) {\n      text = content.text;\n    } else {\n      text = Shiny.renderHtml(\n        content.text.html, \n        $([]), \n        content.text.dependencies\n      ).html;\n    } \n  }\n  \n  // unbind all\n  Shiny.unbindAll();\n  \n  if (action === \"remove\") {\n    $(\"#\" + id)\n      .find(\".direct-chat-msg\")\n      .eq(index - 1)\n      .remove();\n  } else if (action === \"add\") {\n    let author = content.author, \n      date = content.date, \n      image = content.image, \n      type = content.type;\n    \n    // build the new message \n    let newMessage = `\n      <div class=\"direct-chat-info clearfix\">\n        <span class=\"direct-chat-name\"> \n          ${author}\n        <\/span>\n        <span class=\"direct-chat-timestamp\" \n          style=\"margin-left: 4px\">\n          ${date}\n        <\/span>\n      <\/div>\n      <img class=\"direct-chat-img\" src=\"${image}\"/> \n      <div class=\"direct-chat-text\">${text}<\/div>`;\n      \n    // build wrapper\n    let newMessageWrapper;\n    if (type === \"sent\") {\n      newMessageWrapper = `\n        <div class=\"direct-chat-msg right\">\n          ${newMessage} \n        <\/div>`;\n    } else {\n      newMessageWrapper = `\n        <div class=\"direct-chat-msg\">\n          ${newMessage} \n        <\/div>`;\n    }\n    \n    // append message\n    $(\"#\" + id)\n      .find(\".direct-chat-messages\")\n      .append(newMessageWrapper);\n  } else if (action === \"update\") {\n    \n    // today's date\n    let d = new Date();\n    let month = d.getMonth() + 1;\n    let day = d.getDate();\n    let today = d.getFullYear() + '/' +\n      ((''+month).length<2 ? '0' : '') + month + '/' +\n      ((''+day).length<2 ? '0' : '') + day;\n      \n    // we assume only text may be updated. \n    // Does not make sense to modify author/date\n    \n    $(\"#\" + id)\n      .find(\".direct-chat-text\")\n      .eq(index - 1)\n      .replaceWith(`\n        <div class=\"direct-chat-text\">\n          <small class=\"text-red\">\n            (modified: ${today})\n          <\/small>\n          <br>\n        <\/div>\n      `)\n  }\n  \n  // Calls .initialize() for all of the input \n  // objects in all input bindings,\n  // in the given scope (document)\n  Shiny.initializeInputs();\n  Shiny.bindAll(); // bind all inputs/outputs\n});\nshinyAppDir(system.file(\n  \"vignettes-demos/userMessages\", \n  package = \"shinydashboardPlus\"\n))"},{"path":"custom-templates-selection.html","id":"custom-templates-selection","chapter":"16 Template selection","heading":"16 Template selection","text":"numerous HTML templates web. However, may suitable shiny, reasons mentioned\nChapter 3:shiny built top Bootstrap 3 (HTML, CSS Javascript framework), changing framework trivial endeavor. However, shinymaterial shiny.semantic good examples show possible.shiny relies jQuery. Consequently, templates based upon React, Vue Javascript framework natively supported. , exist examples React shiny generally,\nreactR package developed Kent Russell Alan Dipert. Chapter 28 provides general overview.web provides myriad relevant open source HTML templates like Colorlib Creative Tim. Many RinteRface packages actually built top resources.next chapter, focus pretty tabler.io dashboard template, whose overview may seen Figure 16.1).\nFIGURE 16.1: Tabler dashboard overview\n","code":""},{"path":"custom-templates-dependencies.html","id":"custom-templates-dependencies","chapter":"17 Define dependencies","heading":"17 Define dependencies","text":"Tabler template tiny Bootstrap 4 dashboard template. chapter, describe create R wrapper top , thereby making available shiny users.chapter written two years ago, top 1.0.0-alpha.7 GitHub release.\nTabler library significantly evolved since date, way incorporate \nshiny ecosystem remains unchanged. Hence, methods describe may generalized \ntemplates. recommend read chapter next part 22, \npresent automated workflow, want grasp main concepts.","code":""},{"path":"custom-templates-dependencies.html","id":"discover-the-project","chapter":"17 Define dependencies","heading":"17.1 Discover the project","text":"first step template adaptation consists exploring underlying GitHub repository\nlook mandatory elements, like CSS/JS dependencies.\nsimilar strategy want incorporate htmlwidget well.depicted Figure 17.1, important folders :dist, contains CSS JS files well libraries like Bootstrap jQuery.\nalso good moment look version dependency might conflict Shiny.demo website folder used demonstration purpose.\nsource explore template capabilities depth.scss build folder may used customize tabler template directly. However stated , directions scope book.\nFIGURE 17.1: GitHub project exploration\n","code":""},{"path":"custom-templates-dependencies.html","id":"identify-mandatory-dependencies","chapter":"17 Define dependencies","heading":"17.2 Identify mandatory dependencies","text":"Bootstrap 4, jQuery, tabler.min.css tabler.min.js key elements template,\ncontrary flag icons optional (take lot space).\ngoal release template CRAN, mindful 5 Mb maximum size limit.\npersonal experience, can attest quite challenging manage.inspect dependencies, proceed follows:Download clone GitHub repository.Go demo folder open layout-dark.html file.Open HTML inspector.shown Figure 17.2 left-hand side, need include tabler.min.css header. convinced, try remove DOM see happens. jqvmap actually related external visualization plugin used demo. Finally demo.min.css file demo purpose.\nprevent template working, skip now. far good, need one file thus!\nFIGURE 17.2: tabler dependencies overview\nJavaScript dependencies shown right-hand side located end body tag. need chart-related dependencies like apexcharts, jquery.vmap vmap world, may safely ignore . retain Bootstrap 4, jQuery core tabler.min.js, order.","code":""},{"path":"custom-templates-dependencies.html","id":"bundle-dependencies","chapter":"17 Define dependencies","heading":"17.3 Bundle dependencies","text":"help htmlDependency() function, going create main Tabler HTML dependency containing assets allow template render properly. example, going cheat bit: instead handling local files, use CDN (content delivery network) hosts necessary Tabler assets. avoids include necessary files R package, well GitHub repository.production template, designed go CRAN,\nrecommend host files locally, described Chapter 22.advise reader create one HTML dependency per element. Bootstrap version 4.3.1 jQuery 3.6.0. can also use CDN:finally create dependency manager:Notice dependencies order deps list. exactly order head HTML page. libraries require loaded specific place, like Tabler dependencies must come Bootstrap.Let’s see use add_tabler_deps(). consider <div> placeholder check dependencies findDependencies().\n, wrap add_tabler_deps():shown , dependencies applied div, correct order. order set list list(bs4_deps, jQuery_deps, tablers_deps) allows use avoid potential conflicts. try run simple tag shiny app, notice dependencies added <head> tag, whereas original template loads JavaScript dependencies <body>.Unfortunately, htmltools allow developers distribute dependencies different places yet.impact, might -go templates requiring JavaScript placed body. practice, challenging guess may solved manual testing.Even though add_tabler_deps() function may applied tag, use core HTML template, remain designed!like see dependency system works? Let’s meet next chapter design main dashboard layout.","code":"\nlibrary(htmltools)\ntablers_deps <- htmlDependency(\n  name = \"tabler\",\n  version = \"1.0.7\", # we take that of tabler,\n  src = c(href = \"https://cdn.jsdelivr.net/npm/tabler@1.0.0-alpha.7/dist/\"),\n  script = \"js/tabler.min.js\",\n  stylesheet = \"css/tabler.min.css\"\n)\nbs4_deps <- htmlDependency(\n  name = \"Bootstrap\",\n  version = \"4.3.1\",\n  src = c(href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/\"),\n  script = \"bootstrap.bundle.min.js\"\n)\n\njQuery_deps <- htmlDependency(\n  name = \"jquery\",\n  version = \"3.6.0\",\n  src = c(href = \"https://code.jquery.com/\"),\n  script = \"jquery-3.6.0.slim.min.js\"\n)\n# add all dependencies to a tag. Don't forget to set append to TRUE to preserve any existing dependency\nadd_tabler_deps <- function(tag) {\n  # below, the order is of critical importance!\n  deps <- list(bs4_deps, tablers_deps)\n  attachDependencies(tag, deps, append = TRUE)\n}\ntag <- div()\nfindDependencies(tag)#> NULL\ntag <- add_tabler_deps(div())\nfindDependencies(tag)#> [[1]]\n#> List of 10\n#>  $ name      : chr \"Bootstrap\"\n#>  $ version   : chr \"4.3.1\"\n#>  $ src       :List of 1\n#>   ..$ href: chr \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/\"\n#>  $ meta      : NULL\n#>  $ script    : chr \"bootstrap.bundle.min.js\"\n#>  $ stylesheet: NULL\n#>  $ head      : NULL\n#>  $ attachment: NULL\n#>  $ package   : NULL\n#>  $ all_files : logi TRUE\n#>  - attr(*, \"class\")= chr \"html_dependency\"\n#> \n#> [[2]]\n#> List of 10\n#>  $ name      : chr \"tabler\"\n#>  $ version   : chr \"1.0.7\"\n#>  $ src       :List of 1\n#>   ..$ href: chr \"https://cdn.jsdelivr.net/npm/tabler@1.0.0-alpha.7/dist/\"\n#>  $ meta      : NULL\n#>  $ script    : chr \"js/tabler.min.js\"\n#>  $ stylesheet: chr \"css/tabler.min.css\"\n#>  $ head      : NULL\n#>  $ attachment: NULL\n#>  $ package   : NULL\n#>  $ all_files : logi TRUE\n#>  - attr(*, \"class\")= chr \"html_dependency\"\nlibrary(shiny)\nui <- fluidPage(tag)\nserver <- function(input, output, session) {}\nshinyApp(ui, server)"},{"path":"custom-templates-skeleton.html","id":"custom-templates-skeleton","chapter":"18 Create template elements","heading":"18 Create template elements","text":"list available tabler layouts quite impressive (horizontal, vertical, compressed, right left, dark, …). next steps, focus dark-compressed template, leaving reader try templates exercise.","code":""},{"path":"custom-templates-skeleton.html","id":"identify-template-elements","chapter":"18 Create template elements","heading":"18.1 Identify template elements","text":"quite lucky since nothing fancy tabler layout. usual, let’s inspect layout-condensed-dark.html (located /demo folder) Figure 18.1\nFIGURE 18.1: Tabler condensed layout\ntwo main components:header containing brand logo, navigation dropdownthe content containing dashboard body well footerThe dashboard body mean <body> tag!!","code":""},{"path":"custom-templates-skeleton.html","id":"design-the-page-layout","chapter":"18 Create template elements","heading":"18.2 Design the page layout","text":"","code":""},{"path":"custom-templates-skeleton.html","id":"the-page-wrapper","chapter":"18 Create template elements","heading":"18.2.1 The page wrapper","text":"remember structure basic HTML page seen Chapter 1.3? Well, , reminder.actually don’t need include <html> tag since shiny fly, described details chapter 5.7.1. construct list tags tagList(), including head body. head meta tags multiple purposes:Describe encoding.display app different devices. instance apple-mobile-web-app-status-bar-style iOS devices mobile support.Set favicon, icon representing website icon, one may see right side searchbar. Try twitter instance.page title favicon may changed developer, may included function parameters. remember, also CSS head missing! Actually, insertion dependencies achieved add_tabler_deps() function defined Chapter 17. Tabler comes two main themes, namely white dark, may applied <body> class attribute (respectively antialiased theme-dark antialiased). … parameter contains template elements like header dashboard body, remains designed. shown Figure 16.1 Chapter 16, tabler dashboard template may contain navigation bar well footer. mandatory, don’t create dedicated parameters pass elements ... slot:quickly test tabler element renders well, confirms whether setup adequate. , include random tabler element taken demo HTML page, using HTML().Let’s clear: testing purposes! production, avoid much \npossible security issues bad readability code.also checks basic Shiny input/output system works expected sliderInput()\nlinked plotOutput. finally leverage thematic package plot template background match:Ok, info card shiny element work like charm, good start. Now may focus aesthetics.","code":"<!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n    <!-- head content here -->\n    <title>A title<\/title>\n  <\/head>\n  <body>\n    <!-- body content here -->\n  <\/body>\n<\/html>\ntabler_page <- function(..., dark = TRUE, title = NULL, favicon = NULL){\n  \n  # head\n  head_tag <- tags$head(\n    tags$meta(charset = \"utf-8\"),\n    tags$meta(\n      name = \"viewport\", \n      content = \"\n        width=device-width, \n        initial-scale=1, \n        viewport-fit=cover\"\n    ),\n    tags$meta(`http-equiv` = \"X-UA-Compatible\", content = \"ie=edge\"),\n    tags$title(title),\n    tags$link(\n      rel = \"preconnect\", \n      href = \"https://fonts.gstatic.com/\", \n      crossorigin = NA\n    ),\n    tags$meta(name = \"msapplication-TileColor\", content = \"#206bc4\"),\n    tags$meta(name = \"theme-color\", content = \"#206bc4\"),\n    tags$meta(name = \"apple-mobile-web-app-status-bar-style\", content = \"black-translucent\"),\n    tags$meta(name = \"apple-mobile-web-app-capable\", content = \"yes\"),\n    tags$meta(name = \"mobile-web-app-capable\", content = \"yes\"),\n    tags$meta(name = \"HandheldFriendly\", content = \"True\"),\n    tags$meta(name = \"MobileOptimized\", content = \"320\"),\n    tags$meta(name = \"robots\", content = \"noindex,nofollow,noarchive\"),\n    tags$link(rel = \"icon\", href = favicon, type = \"image/x-icon\"),\n    tags$link(rel = \"shortcut icon\", href = favicon, type=\"image/x-icon\")\n  )\n  \n  # body\n  body_tag <- tags$body(\n    tags$div(\n      class = paste0(\"antialiased \", if (dark) \"theme-dark\"),\n      style = \"display: block;\",\n      tags$div(class = \"page\", ...)\n    )\n  ) %>% add_tabler_deps()\n  \n  tagList(head_tag, body_tag)\n}\nlibrary(shiny)\nlibrary(thematic)\n\nthematic_shiny()\n\nui <- tabler_page(\n  \"test\", \n  sliderInput(\"obs\", \"Number of observations:\",\n              min = 0, max = 1000, value = 500\n  ),\n  plotOutput(\"distPlot\"),\n  br(),\n  HTML(\n    [2004 chars quoted with ''']\n  ),\ntitle = \"Tabler test\"\n)\nserver <- function(input, output) {\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n}\nshinyApp(ui, server)"},{"path":"custom-templates-skeleton.html","id":"the-body-content","chapter":"18 Create template elements","heading":"18.2.2 The body content","text":"part, translate dashboard body HTML code R. reminder, html2r Alan Dipert substantially speeds conversion process. copy code HTML text area, click convert get R shiny output. create function called tabler_body(). … parameter holds dashboard body elements footer dedicated future tabler_footer() function.Let’s test previous example.Way better!","code":"\ntabler_body <- function(..., footer = NULL) {\n  div(\n    class = \"content\",\n    div(class = \"container-xl\", ...),\n    tags$footer(class = \"footer footer-transparent\", footer)\n  )\n}\nui <- tabler_page(tabler_body(h1(\"Hello World\")))\nserver <- function(input, output) {}\nshinyApp(ui, server)"},{"path":"custom-templates-skeleton.html","id":"the-footer","chapter":"18 Create template elements","heading":"18.2.3 The footer","text":"footer composed left right containers.\ndecide create parameters left right user may pass elements:class attributes taken original HTML template.\nalready familiar Bootstrap 4, may easily customize style.\nshort, row means elements aligned row,\ntext-center align-items-center handle text content centering.\nflex-row-reverse display elements reversed order.\nNotice also row element contains columns created col class.\nBootstrap grid system relies Flexible Box Module, also known flexbox., let’s check brand new element.","code":"\ntabler_footer <- function(left = NULL, right = NULL) {\n  div(\n    class = \"container\",\n    div(\n      class = \"row text-center align-items-center flex-row-reverse\",\n      div(class = \"col-lg-auto ml-lg-auto\", right),\n      div(class = \"col-12 col-lg-auto mt-3 mt-lg-0\", left)\n    )\n  )\n}\nui <- tabler_page(\n  tabler_body(\n    p(\"Hello World\"),\n    footer = tabler_footer(\n      left = \"Rstats, 2020\", \n      right = a(href = \"https://www.google.com\", \"More\")\n    )\n  )\n)\nserver <- function(input, output) {}\nshinyApp(ui, server)"},{"path":"custom-templates-skeleton.html","id":"the-navbar-or-header","chapter":"18 Create template elements","heading":"18.2.4 The navbar (or header)","text":"function called tabler_header(). Tabler template, header \nnavbar navbar-expand-md navbar-light classes. don’t need navbar-light class\nsince interested dark theme. shown Figure 18.2,\nheader composed four elements:navbar toggler visible reduce screen width, like mobile devices.brand imageThe navigation menu.dropdown menus (mandatory).\nFIGURE 18.2: Tabler header structure\nmay look Bootstrap 4 documentation extra configuration layout.element considered parameter tabler_navbar() function,\nexcept navbar toggler default element must removed.\nMorever, show brand element provided. …\nparameter slot extra elements (menu dropdowns).\nfollowing, start creating main container, header_tag unique child container_tag. latter four children toggler_tag, brand_tag, dropdown_tag navmenu_tag. situations, htmltools functions like tagAppendChild() tagAppendChildren() game changers better organize code make maintainable. One never knows advance much extra feature added component. Hence cautious beginning crucial!navbar menu main navbar component. … parameter slot menu items.\nCompared original tabler dashboard template navbar-nav class, add least, nav class make sure items correctly activated/inactivated. nav-pills class select pills instead basic tabs (see ), nothing cosmetic consideration. Notice ul tag contain li elements, navbar items:Besides, navbar menu item either simple button contain multiple menu sub-items.\nnow, focus simple items.","code":"\ntabler_navbar <- function(..., brand_url = NULL, brand_image = NULL, \n                          nav_menu, nav_right = NULL) {\n  \n  header_tag <- tags$header(class = \"navbar navbar-expand-md\")\n  container_tag <- tags$div(class = \"container-xl\")\n  \n  # toggler for small devices (must not be removed)\n  toggler_tag <- tags$button(\n    class = \"navbar-toggler\", \n    type = \"button\", \n    `data-toggle` = \"collapse\", \n    `data-target` = \"#navbar-menu\",\n    span(class = \"navbar-toggler-icon\")\n  )\n  \n  # brand elements\n  brand_tag <- if (!is.null(brand_url) || !is.null(brand_image)) {\n    a(\n      href = if (!is.null(brand_url)) {\n        brand_url\n      } else {\n        \"#\"\n      },\n      class = \"navbar-brand navbar-brand-autodark \n      d-none-navbar-horizontal pr-0 pr-md-3\",\n      if(!is.null(brand_image)) {\n        img(\n          src = brand_image, \n          alt = \"brand Image\",\n          class = \"navbar-brand-image\"\n        )\n      }\n    )\n  }\n  \n  dropdown_tag <- if (!is.null(nav_right)) {\n    div(class = \"navbar-nav flex-row order-md-last\", nav_right)\n  }\n  \n  navmenu_tag <- div(\n    class = \"collapse navbar-collapse\", \n    id = \"navbar-menu\",\n    div(\n      class = \"d-flex flex-column flex-md-row flex-fill \n      align-items-stretch align-items-md-center\",\n      nav_menu\n    ),\n    if (length(list(...)) > 0) {\n      div(\n        class = \"ml-md-auto pl-md-4 py-2 py-md-0 mr-md-4 \n        order-first order-md-last flex-grow-1 flex-md-grow-0\", \n        ...\n      )\n    }\n  )\n  \n  container_tag <- container_tag %>% tagAppendChildren(\n    toggler_tag,\n    brand_tag,\n    dropdown_tag,\n    navmenu_tag\n  )\n  \n  header_tag %>% tagAppendChild(container_tag)\n  \n}\ntabler_navbar_menu <- function(...) {\n  tags$ul(class = \"nav nav-pills navbar-nav\", ...)\n}"},{"path":"custom-templates-skeleton.html","id":"tabler-navbar-navigation","chapter":"18 Create template elements","heading":"18.2.4.1 Navbar navigation","text":"navbar crucial since drives template navigation. like associate item separate page body content. allow us navigate new page time change item. brief, similar Shiny tabsetPanel() function.HTML, menu items <> tags (links) given href attribute pointing specific page located server files. Shiny, applications single page design, can’t split content multiple pages. strategy create tabbed navigation, mimic multi-pages layout.Let’s see tab navigation works. menu list, items must :data-toggle attribute set tab pill.href data-target attribute holding unique id, mandatory since points menu item corresponding body content.Importantly, href navigation appears broken shinyapps.io, RStudio Connect (actually rstudio product relying workers spread user load across multiple R processes).\nTherefore, ’ll choose data-target attribute.body side, tab panels contained tabset panel (simple div container), role attribute set tabpanel id corresponding data-target passed menu item. exact match id data-target mandatory, shown Figure 18.3.\nFIGURE 18.3: Tabler tabset main principle\n, propose possible implementation menu item, well corresponding body tab panel. text parameter corresponds nav item text displayed menu. also added optional icon ability select item start:also decided add fade transition effect tabs, per Bootstrap 4 documentation,\nconsists fade extra class:testing shiny app?point might argue even validated template elements.\ninstance, going back tabler_navbar_menu_item function, find following possible issues:happens user provides invalid tabName,\nie text valid jQuery like tab&?++?happens user accidentally activates two tabs start?see later Chapter 21 validate parameters.","code":"\ntabler_navbar_menu_item <- function(text, tabName, icon = NULL, \n                                    selected = FALSE) {\n  \n  item_cl <- paste0(\"nav-link\", if(selected) \" active\")\n  \n  tags$li(\n    class = \"nav-item\",\n    a(\n      class = item_cl,\n      `data-target` = paste0(\"#\", tabName),\n      `data-toggle` = \"pill\",\n      `data-value` = tabName,\n      role = \"tab\",\n      span(class = \"nav-link-icon d-md-none d-lg-inline-block\", icon),\n      span(class = \"nav-link-title\", text)\n    )\n  )\n}\ntabler_tab_items <- function(...) {\n  div(class = \"tab-content\", ...)\n}\n\ntabler_tab_item <- function(tabName = NULL, ...) {\n  div(\n    role = \"tabpanel\",\n    class = \"tab-pane fade container-fluid\",\n    id = tabName,\n    ...\n  )\n}\nui <- tabler_page(\n  tabler_navbar(\n    brand_url = \"https://preview-dev.tabler.io\", \n    brand_image = \"https://preview-dev.tabler.io/static/logo.svg\", \n    nav_menu = tabler_navbar_menu(\n      tabler_navbar_menu_item(\n        text = \"Tab 1\",\n        icon = NULL,\n        tabName = \"tab1\",\n        selected = TRUE\n      ),\n      tabler_navbar_menu_item(\n        text = \"Tab 2\",\n        icon = NULL,\n        tabName = \"tab2\"\n      )\n    )\n  ),\n  tabler_body(\n    tabler_tab_items(\n      tabler_tab_item(\n        tabName = \"tab1\",\n        p(\"Hello World\")\n      ),\n      tabler_tab_item(\n        tabName = \"tab2\",\n        p(\"Second Tab\")\n      )\n    ),\n    footer = tabler_footer(\n      left = \"Rstats, 2020\", \n      right = a(href = \"https://www.google.com\")\n    )\n  )\n)\nserver <- function(input, output) {}\nshinyApp(ui, server)"},{"path":"custom-templates-skeleton.html","id":"fine-tune-tabs-behavior","chapter":"18 Create template elements","heading":"18.2.4.2 Fine tune tabs behavior","text":"Quite good isn’t ? notice however even first tab selected default, content shown. fix , apply jQuery skills. According Bootstrap documentation, must trigger show event active tab start, well add classes show active associated tab panel dashboard body. therefore target nav item active class item found, select first item default activate body content.script included app www folder. see Chapter 19 custom input binding may perfectly handle situation actually preferred.result shown Figure 18.4. ’d also suggest include least one input/output per tab, test whether everything works properly.\nFIGURE 18.4: Tabler template navbar\nLooks like done main template elements. Actually, wouldn’t better include, least, card containers?","code":"$(function() {\n  // this makes sure to trigger the show event on the active   tab at start\n  let activeTab = $('#navbar-menu .nav-link.active');\n  // if multiple items are found\n  if (activeTab.length > 0) {\n    let tabId = $(activeTab).attr('data-value');\n    $(activeTab).tab('show');\n    $(`#${tabId}`).addClass('show active');\n  } else {\n    $('#navbar-menu .nav-link')\n      .first()\n      .tab('show');\n  }\n});\nthematic_shiny()\n# example with custom JS code to activate tabs\nshinyAppDir(system.file(\"tabler/tabler_tabs\", package = \"OSUICode\"))"},{"path":"custom-templates-skeleton.html","id":"card-containers","chapter":"18 Create template elements","heading":"18.2.5 Card containers","text":"Card central piece template may contain visualizations, metrics much . Fortunately, Tabler large range card containers.","code":""},{"path":"custom-templates-skeleton.html","id":"classic-card","chapter":"18 Create template elements","heading":"18.2.5.1 Classic card","text":"call classic card like shinydashboard box() container. card structure key elements:width control space taken card Bootstrap grid.title, general header (tabler always follow rule header optional).body main content.Style elements like color statuses.footer (optional, tabler include ).comprehensive list tabler card features may found . faster, copy following HTML code html2R shiny app convert Shiny tags:result. next step consists replacing content parameters tabler_card() function, whenever necessary. instance, first <div> sets card width. Bootstrap grid ranges 0 12, create width parameter control card size. proceed similarly title, status, body content. seems reasonable allow title NULL (, title shown), thing status. Regarding card default width, value six also makes sense, take half row:meantime, also convenient able display cards row.\nLet’s create tabler_row():, show example tabler_card() function, combination apexcharter package.code output shown Figure 18.5.\nFIGURE 18.5: Tabler card component\n","code":"<div class=\"col-md-6\">\n  <div class=\"card\">\n    <div class=\"card-status-top bg-danger\"><\/div>\n    <div class=\"card-body\">\n      <h3 class=\"card-title\">Title<\/h3>\n      <p>Some Text.<\/p>\n    <\/div>\n  <\/div>\n<\/div>\ntabler_card <- function(..., title = NULL, status = NULL, width = 6,\n                        stacked = FALSE, padding = NULL) {\n\n  card_cl <- paste0(\n    \"card\",\n    if (stacked) \" card-stacked\",\n    if (!is.null(padding)) paste0(\" card-\", padding)\n  )\n\n  status_tag <- if (!is.null(status)) {\n    div(class = paste0(\"card-status-top bg-\", status))\n  }\n\n  body_tag <- div(\n    class = \"card-body\",\n    # we could have a smaller title like h4 or h5...\n    if (!is.null(title)) {\n      h3(class = \"card-title\", title)\n    },\n    ...\n  )\n\n  main_wrapper <- div(class = paste0(\"col-md-\", width))\n  card_wrapper <- div(class = card_cl)\n\n  card_wrapper <- card_wrapper %>% tagAppendChildren(status_tag, body_tag)\n  main_wrapper %>% tagAppendChild(card_wrapper)\n}\ntabler_row <- function(...) {\n  div(class = \"row row-deck\", ...)\n}\nlibrary(apexcharter)\nlibrary(dplyr)\nlibrary(ggplot2)\n# test the card\ndata(\"economics_long\")\neconomics_long <- economics_long %>%\n  group_by(variable) %>%\n  slice((n()-100):n())\n\nspark_data <- data.frame(\n  date = Sys.Date() + 1:20,\n  var1 = round(rnorm(20, 50, 10)),\n  var2 = round(rnorm(20, 50, 10)),\n  var3 = round(rnorm(20, 50, 10))\n)\n\nmy_card <- tabler_card(\n  apexchartOutput(\"my_chart\"), \n  title = \"My card\", \n  status = \"danger\"\n)\n\nthematic_shiny()\n\nui <- tabler_page(\n  tabler_body(\n    tabler_row(\n      my_card,\n      tabler_card(\n        apexchartOutput(\"spark_box\"), \n        title = \"My card\", \n        status = \"success\"\n      ) \n    )\n  )\n)\nserver <- function(input, output) {\n  output$my_chart <- renderApexchart({\n    apex(\n      data = economics_long, \n      type = \"area\", \n      mapping = aes(x = date, y = value01, fill = variable)\n    ) %>%\n      ax_yaxis(decimalsInFloat = 2) %>% # number of decimals to keep\n      ax_chart(stacked = TRUE) %>%\n      ax_yaxis(max = 4, tickAmount = 4)\n  })\n  \n  output$spark_box <- renderApexchart({\n    spark_box(\n      data = spark_data[, c(\"date\", \"var3\")],\n      title = mean(spark_data$var3), \n      subtitle = \"Variable 3\",\n      color = \"#FFF\", background = \"#2E93fA\",\n      title_style = list(color = \"#FFF\"),\n      subtitle_style = list(color = \"#FFF\")\n    )\n  })\n}\nshinyApp(ui, server)"},{"path":"custom-templates-skeleton.html","id":"ribbons-card-components","chapter":"18 Create template elements","heading":"18.2.6 Ribbons: card components","text":"Let’s finish part including card component,\nnamely ribbon.Integrating freshly created ribbon component requires modify card structure since ribbon added body tag, parameter associated slot. also modify tabler_card() function htmltools offers tools help us. Since ribbon put card body, may think tagAppendChild() function, introduced Chapter 2:shown , ribbon successfuly included card tag. Now, check looks shiny app.\nFIGURE 18.6: Tabler ribbon component\n","code":"\ntabler_ribbon <- function(..., position = NULL, color = NULL, bookmark = FALSE) {\n  \n  ribbon_cl <- paste0(\n    \"ribbon\",\n    if (!is.null(position)) sprintf(\" bg-%s\", position),\n    if (!is.null(color)) sprintf(\" bg-%s\", color),\n    if (bookmark) \" ribbon-bookmark\"\n  )\n  div(class = ribbon_cl, ...)\n}\n# add the ribbon to a card\nmy_card <- tabler_card(title = \"Ribbon\", status = \"info\")\n\nstr(my_card)#> List of 3\n#>  $ name    : chr \"div\"\n#>  $ attribs :List of 1\n#>   ..$ class: chr \"col-md-6\"\n#>  $ children:List of 1\n#>   ..$ :List of 3\n#>   .. ..$ name    : chr \"div\"\n#>   .. ..$ attribs :List of 1\n#>   .. .. ..$ class: chr \"card\"\n#>   .. ..$ children:List of 2\n#>   .. .. ..$ :List of 3\n#>   .. .. .. ..$ name    : chr \"div\"\n#>   .. .. .. ..$ attribs :List of 1\n#>   .. .. .. .. ..$ class: chr \"card-status-top bg-info\"\n#>   .. .. .. ..$ children: list()\n#>   .. .. .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n#>   .. .. ..$ :List of 3\n#>   .. .. .. ..$ name    : chr \"div\"\n#>   .. .. .. ..$ attribs :List of 1\n#>   .. .. .. .. ..$ class: chr \"card-body\"\n#>   .. .. .. ..$ children:List of 1\n#>   .. .. .. .. ..$ :List of 3\n#>   .. .. .. .. .. ..$ name    : chr \"h3\"\n#>   .. .. .. .. .. ..$ attribs :List of 1\n#>   .. .. .. .. .. .. ..$ class: chr \"card-title\"\n#>   .. .. .. .. .. ..$ children:List of 1\n#>   .. .. .. .. .. .. ..$ : chr \"Ribbon\"\n#>   .. .. .. .. .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n#>   .. .. .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n#>   .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n#>  - attr(*, \"class\")= chr \"shiny.tag\"\nmy_card$children[[1]] <- my_card$children[[1]] %>% \n  tagAppendChild(\n    tabler_ribbon(\n      icon(\"info-circle\", class = \"fa-lg\"), \n      bookmark = TRUE,\n      color = \"red\"\n    )\n  )\nthematic_shiny()\nui <- tabler_page(\n  tabler_body(\n    my_card\n  )\n)\nserver <- function(input, output) {}\nshinyApp(ui, server)"},{"path":"custom-templates-skeleton.html","id":"icons","chapter":"18 Create template elements","heading":"18.2.7 Icons","text":"mentioned may include fontawesome icons provided Shiny, well libraries.\nMoreover, Tabler internal svg library located .","code":""},{"path":"custom-templates-skeleton.html","id":"exercises-1","chapter":"18 Create template elements","heading":"18.3 Exercises","text":"Consider tab card bottom tabler documentation. Propose implementation feature.look page. Select two elements create corresponding R functions.","code":""},{"path":"custom-templates-inputs.html","id":"custom-templates-inputs","chapter":"19 Develop custom input widgets","heading":"19 Develop custom input widgets","text":"previous chapter, built template dependencies, page skeleton, well containers like cards. Now, great time integrate new inputs, leveraging knowledge Chapter 12.","code":""},{"path":"custom-templates-inputs.html","id":"tabler-action-button","chapter":"19 Develop custom input widgets","heading":"19.1 Tabler action button","text":"Let’s start simple input: action button. Tabler built-HTML buttons substantial amount custom styles, compared classic Shiny action button.","code":""},{"path":"custom-templates-inputs.html","id":"reminders-about-the-action-button","chapter":"19 Develop custom input widgets","heading":"19.1.1 Reminders about the action button","text":"actionButton() code:button tag attributes like\nid, style, type, class, data-val, label children passed via ....app starts, action button value 0 click increments value 1. behavior controlled? recall, due input binding file, specifically one action button:see whole script since focus first method, find. look elements class action-button, making possible define multiple action buttons time.Consequently, go back previous section, actionButton() class action-button, thereby making visible binding. Interestingly, elements class action-button considered shiny input binding.","code":"\nactionButton <- function (inputId, label, icon = NULL, \n                          width = NULL, ...)  {\n  value <- restoreInput(id = inputId, default = NULL)\n  tags$button(\n    id = inputId, \n    style = if (!is.null(width)) {\n      paste0(\"width: \", validateCssUnit(width), \";\")\n    }, \n    type = \"button\", \n    class = \"btn btn-default action-button\", \n    `data-val` = value, \n    list(validateIcon(icon), label), ...\n  )\n}var actionButtonInputBinding = new InputBinding();\n$.extend(actionButtonInputBinding, {\n  find: function(scope) {\n    return $(scope).find(\".action-button\");\n  },\n  getValue: function(el) {\n    return $(el).data('val') || 0;\n  },\n  // ....; Extra code removed\n});"},{"path":"custom-templates-inputs.html","id":"application-to-tabler","chapter":"19 Develop custom input widgets","heading":"19.1.2 Application to Tabler","text":"First , let’s compare tabler HTML button Shiny action button.convert R code. button API contains style leave reader add extra elements\nexercise:Tabler, button status mandatory, reason function parameter. Moreover, add horizontal right margin icon, provided label renders well (mr-1, m stands margin, r right direction 1 margin value). assume default, button blue color, given btn-primary:easily check clicking button increments related input. Thus, one may see easy implement Tabler input button, built top Shiny action button. output shown Figure 19.1.\nFIGURE 19.1: Tabler action button\ngeneral rule, don’t try reinvent wheel see whether existing Shiny element may used instead!","code":"<button class=\"btn btn-primary\">Button<\/button>\ntabler_button <- function(inputId, label, status = NULL, \n                          icon = NULL, width = NULL, ...) {\n  \n  btn_cl <- paste0(\n    \"btn action-button\",\n    if (is.null(status)) {\n      \" btn-primary\"\n    } else {\n      paste0(\" btn-\", status)\n    }\n  )\n  \n  value <- restoreInput(id = inputId, default = NULL)\n  \n  # custom right margin\n  if (!is.null(icon)) icon$attribs$class <- paste0(\n    icon$attribs$class, \" mr-1\"\n  )\n  \n  tags$button(\n    id = inputId, \n    style = if (!is.null(width)) {\n      paste0(\"width: \", validateCssUnit(width), \";\")\n    }, \n    type = \"button\", \n    class = btn_cl, \n    `data-val` = value, \n    list(icon, label), ...\n  )\n}\nui <- tabler_page(\n  tabler_body(\n    tabler_button(\n      \"btn\", \n      HTML(paste(\"Value\", textOutput(\"val\"), sep = \":\")), \n      icon = icon(\"thumbs-up\"), \n      width = \"25%\"\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  output$val <- renderText(input$btn)\n}\n\nshinyApp(ui, server)"},{"path":"custom-templates-inputs.html","id":"toggle-switch","chapter":"19 Develop custom input widgets","heading":"19.2 Toggle Switch","text":"implement toggle switch component.Notice tabler switch checkbox type, similar Shiny checkbox (switch checkbox different style):Therefore, able build top existing input binding. create tabler_switch() function:Besides, may also create update_tabler_switch() function similar updateCheckboxInput(). leverage shiny:::dropNulls, function removes NULL elements list. remember, session$sendInputMessage R received receiveMessage method JavaScript side:following example, action button toggles switch input value clicked, shown Figure 19.2.\nFIGURE 19.2: Tabler action button updating toggle input\nEt voilà! Two inputs just minutes.","code":"<label class=\"form-check form-switch\">\n  <input class=\"form-check-input\" type=\"checkbox\" checked>\n  <span class=\"form-check-label\">Option 1<\/span>\n<\/label>\ncheckboxInput(\"test\", \"Test\", TRUE)#> <div class=\"form-group shiny-input-container\">\n#>   <div class=\"checkbox\">\n#>     <label>\n#>       <input id=\"test\" type=\"checkbox\" checked=\"checked\"/>\n#>       <span>Test<\/span>\n#>     <\/label>\n#>   <\/div>\n#> <\/div>\ntabler_switch <- function(inputId, label, value = FALSE, \n                          width = NULL) {\n  \n  value <- restoreInput(id = inputId, default = value)\n  input_tag <- tags$input(\n    id = inputId, \n    type = \"checkbox\",\n    class = \"form-check-input\"\n  )\n  \n  if (!is.null(value) && value) {\n    input_tag <- input_tag %>% \n      tagAppendAttributes(checked = \"checked\")\n  }\n  \n  input_wrapper <- tags$label(\n    class = \"form-check form-switch\", \n    style = if (!is.null(width)) {\n      paste0(\"width: \", validateCssUnit(width), \";\")\n    }\n  )\n  \n  input_wrapper %>% tagAppendChildren(\n    input_tag,\n    span(class = \"form-check-label\", label)\n  )\n}\ndropNulls <- function (x) {\n  x[!vapply(x, is.null, FUN.VALUE = logical(1))]\n}\n\nupdate_tabler_switch <- function (session, inputId, \n                                  label = NULL, \n                                  value = NULL) {\n  message <- dropNulls(list(label = label, value = value))\n  session$sendInputMessage(inputId, message)\n}\nui <- tabler_page(\n  tabler_body(\n    fluidRow(\n      tabler_button(\n        \"update\", \n        \"Go!\", \n        width = \"25%\", \n        class = \"mr-2\"\n      ),\n      tabler_switch(\n        \"toggle\", \n        \"Switch\", \n        value = TRUE, \n        width = \"25%\"\n      )\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  observe(print(input$toggle))\n  observeEvent(input$update, {\n    update_tabler_switch(\n      session, \n      \"toggle\", \n      value = !input$toggle\n    )\n  })\n}\n\nshinyApp(ui, server)"},{"path":"custom-templates-inputs.html","id":"custom-templates-inputs-navbar","chapter":"19 Develop custom input widgets","heading":"19.3 Navbar menu input","text":"stated Chapter 12, quite straightforward bind elements primary inputs (HTML elements input tag) Shiny. reminder, created custom input binding detect state shinydashboard box.\nchapter 18, designed tabler_navbar() well tabler_navbar_menu() tabler_navbar_menu_item(). shinydashboard, great capture currently selected tab subsequently perform actions server side, updating selected tab based button click.start? First , add id attribute tabler_navbar_menu() holds corresponding input$id. Whether use inputId id parameter name , id personally prefered case:next step JS navbarMenuBinding creation. decide look navbar-nav class find method. , describe binding step step. may find whole working code end example:initialize method, ensure tab selected start, first tab selected default. Otherwise, select activated tab. use template literals ease insertion JS code strings (${menuId} .nav-link.active):role getValue return currently selected tab.\nreminder, tabler_navbar_menu_item() function:function, active item element classes nav-link active. recover tab value stored data-value attribute. bit jQuery trick:setValue function allowing update active tab. Bootstrap 4 already \npredefined methods activate tabs. easiest way select tab name like $('#tabMenu [data-target=\"#tab1\"]').tab('show'). receiveMessage simply applying setValue method:Besides, create update_tabler_tab_item() function:subscribe tells Shiny change current input value made available\nwhole app. may listen multiple events, keeping mind events occur following order:hide.bs.tab (current active tab).show.bs.tab (--shown tab).hidden.bs.tab (previous active tab, one hide.bs.tab event).shown.bs.tab (newly-active just-shown tab, one show.bs.tab event).Hence, makes sense listen shown.bs.tab (wait current tab shown):recap binding creation registration included:include custom input binding package? {OSUICode}, created following HTML dependency:also updated add_tabler_deps, .test new navbar_menu() binding .!","code":"\ntabler_navbar_menu <- function(..., inputId = NULL) {\n  tags$ul(\n    id = inputId, \n    class = \"nav nav-pills navbar-nav\",\n    ...\n  )\n}find: function(scope) {\n  return $(scope).find('.navbar-nav');\n}initialize: function(el) {\n  let menuId = '#' + $(el).attr('id');\n  let activeTab = $(`${menuId} .nav-link.active`);\n  // if multiple items are found\n  if (activeTab.length > 0) {\n    let tabId = $(activeTab).attr('data-value');\n    $(activeTab).tab('show');\n    $(`#${tabId}`).addClass('show active');\n  } else {\n    $(`${menuId} .nav-link`)\n      .first()\n      .tab('show');\n  }\n}\ntabler_navbar_menu_item <- function(text, tabName, \n                                    icon = NULL, \n                                    selected = FALSE) {\n  \n  item_cl <- paste0(\"nav-link\", if(selected) \" active\")\n  \n  tags$li(\n    class = \"nav-item\",\n    a(\n      class = item_cl,\n      `data-target` = paste0(\"#\", tabName),\n      `data-toggle` = \"pill\", \n      `data-value` = tabName,\n      role = \"tab\",\n      span(\n        class = \"nav-link-icon d-md-none d-lg-inline-block\", \n        icon\n      ),\n      span(class = \"nav-link-title\", text)\n    )\n  )\n}getValue: function(el) {\n  let activeTab = $(el).find('a').filter('nav-link active');\n  return $(activeTab).attr('data-value');\n}setValue: function(el, value) {\n  let hrefVal = '#' + value;\n  let menuId = $(el).attr('id');\n  $(`#${menuId} a[data-target=\"${hrefVal}\"]`).tab('show');\n}\n\nreceiveMessage: function(el, data) {\n  this.setValue(el, data);\n}\nupdate_tabler_tab_item <- function(\n  inputId, \n  value, \n  session = getDefaultReactiveDomain()\n) {\n  session$sendInputMessage(inputId, message = value)\n}subscribe: function(el, callback) {\n  // important to use shown.bs.tab and not show.bs.tab!\n  $(el).on('shown.bs.tab.navbarMenuBinding', function(e) {\n    callback();\n  });\n},\n  \nunsubscribe: function(el) {\n  $(el).off('.navbarMenuBinding');\n}$(function() {\n  // Input binding\n  let navbarMenuBinding = new Shiny.InputBinding()\n  $.extend(navbarMenuBinding, {\n    find: function(scope) {\n      return $(scope).find('.navbar-nav');\n    },\n    initialize: function(el) {\n      let menuId = '#' + $(el).attr('id');\n      let activeTab = $(`${menuId} .nav-link.active`);\n      // if multiple items are found\n      if (activeTab.length > 0) {\n        let tabId = $(activeTab).attr('data-value');\n        $(activeTab).tab('show');\n        $(`#${tabId}`).addClass('show active');\n      } else {\n        $(`${menuId} .nav-link`)\n          .first()\n          .tab('show');\n      }\n    },\n    // Given the DOM element for the input, return the value\n    getValue: function(el) {\n      let activeTab = $(el).find('a').filter('.nav-link.active');\n      return $(activeTab).attr('data-value');\n    },\n    setValue: function(el, value) {\n      let hrefVal = '#' + value;\n      let menuId = $(el).attr('id');\n      $(`#${menuId} a[href=\"${hrefVal}\"]`).tab('show');\n    },\n    receiveMessage: function(el, data) {\n      this.setValue(el, data);\n    },\n    subscribe: function(el, callback) {\n      $(el).on('shown.bs.tab.navbarMenuBinding', function(event) {\n        callback();\n      });\n    },\n    unsubscribe: function(el) {\n      $(el).off('.navbarMenuBinding');\n    }\n  });\n  \n  Shiny.inputBindings.register(navbarMenuBinding, 'navbar-menu');\n});\ntabler_custom_js <- htmlDependency(\n  name = \"tabler-bindings\",\n  version = \"1.0.7\",\n  src = \"tabler\",\n  package = \"OSUICode\",\n  script = \"input-bindings/navbarMenuBinding.js\"\n)\nadd_tabler_deps <- function(tag) {\n  # below, the order is of critical importance!\n  deps <- list(bs4_deps, tablers_deps, tabler_custom_js)\n  attachDependencies(tag, deps, append = TRUE)\n}\nui <- tabler_page(\n  tabler_navbar(\n    brand_url = \"https://preview-dev.tabler.io\", \n    brand_image = \"https://preview-dev.tabler.io/static/logo.svg\", \n    nav_menu = tabler_navbar_menu(\n      id = \"current_tab\",\n      tabler_navbar_menu_item(\n        text = \"Tab 1\",\n        icon = NULL,\n        tabName = \"tab1\",\n        selected = TRUE\n      ),\n      tabler_navbar_menu_item(\n        text = \"Tab 2\",\n        icon = NULL,\n        tabName = \"tab2\"\n      )\n    ),\n    tabler_button(\n      \"update\", \n      \"Change tab\", \n      icon = icon(\"exchange-alt\")\n    )\n  ),\n  tabler_body(\n    tabler_tab_items(\n      tabler_tab_item(\n        tabName = \"tab1\",\n        sliderInput(\n          \"obs\", \n          \"Number of observations:\",\n          min = 0,\n          max = 1000, \n          value = 500\n        ),\n        plotOutput(\"distPlot\")\n      ),\n      tabler_tab_item(\n        tabName = \"tab2\",\n        p(\"Second Tab\")\n      )\n    ),\n    footer = tabler_footer(\n      left = \"Rstats, 2020\", \n      right = a(href = \"https://www.google.com\")\n    )\n  )\n)\nserver <- function(input, output, session) {\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n  \n  observeEvent(input$current_tab, {\n    showNotification(\n      paste(\"Hello\", input$current_tab), \n      type = \"message\",\n      duration = 1\n    )\n  })\n  \n  observeEvent(input$update, {\n    newTab <- if (input$current_tab == \"tab1\") {\n      \"tab2\"\n    } else {\n      \"tab1\"\n    }\n    update_tabler_tab_item(\"current_tab\", newTab)\n  })\n}\nshinyApp(ui, server)"},{"path":"custom-templates-inputs.html","id":"exercises-2","chapter":"19 Develop custom input widgets","heading":"19.4 Exercises","text":"look Tabler documentation buttons extend tabler_button function accordingly.Propose implementation Advanced selectboxes shown .Cards central elements templates. tabset panels! Try modify tabler_card() function\ncreate tabler_tab_card() function, adding tab navigation within card header.","code":""},{"path":"custom-templates-interactivity.html","id":"custom-templates-interactivity","chapter":"20 Adding more interactivity","heading":"20 Adding more interactivity","text":"part, going bring even life template element.\nfirst see enhance existing static HTML component, simple progress bar example.\nexplore complex elements involving specific Shiny patterns.JavaScript handlers described gathered HTML dependency, well input binding(s):","code":"\n# contains bindings and other JS code\ntabler_custom_js <- htmlDependency(\n  name = \"tabler-bindings\",\n  version = \"1.0.7\",\n  src = \"tabler\",\n  package = \"OSUICode\",\n  script = c(\n    \"input-bindings/navbarMenuBinding.js\",\n    \"tabler_progress_handler.js\",\n    \"tabler_toast_handler.js\",\n    \"tabler_dropdown_handler.js\",\n    \"tabler_insert_tab_handler.js\"\n  )\n)"},{"path":"custom-templates-interactivity.html","id":"custom-progress-bars","chapter":"20 Adding more interactivity","heading":"20.1 Custom progress bars","text":"Progress bars good way display metric related progress, instance tracking number remaining tasks project. general, elements static HTML. Hence, interesting update current value server side. Since proper input element, implementing input binding inappropriate decide proceed custom handler. first create tabler_progress() tag mainly composed :style gives current progress value. main element.min max bounds, general 0 100.id ensures progress bar uniqueness, thereby avoiding conflicts.next element update_tabler_progress() function sends two elements R JS:progress id.new value.JS side, leverage well known Shiny.addCustomMessageHandler. mentioned Chapter 10, sendCustomMessage addCustomMessageHandler connected type parameter. crucial! Moreover, sent message R list, becomes JSON, meaning elements must accessed . JS:finally test components simple app, output depicted Figure 20.1:\nFIGURE 20.1: Progress bar component updated slider\nhandle custom messages shiny modules? Well, pretty straightforward: wrap id module namespace given session$ns() sending JS. may even default.way directly update progress client avoid exchange data R JS, thereby saving time?idea get rid classic session$sendCustomMessage Shiny.addCustomMessageHandler method. directly create function inserts script UI taking trigger target main parameters. function inserted multiple times multiple triggers update target. JS logic slightly different:wait shiny connected JS Shiny object ready.recover trigger element JS/jQuery method.leverage noUiSlider API listen update range. ’s fine slider instance already initialized shinyWidget input binding. work waiting shiny connected (may try)! Notice use .get() event listener, avoids repeat slider.noUiSliderWe modify width CSS property target like previous example.Question: Run example external web browser, stop app RStudio. Try move sliders. happens progress bars? Compare classic update function. explain ?Overall way bit complex. Yet, assuming complex app data manipulation, tons inputs visualizations, everything can done client (web browser) less work R server part better end-user experience! Building outstanding shiny apps designing amazing user interfaces, ’s also optimization speed mentioned Colin Fay et al. book (Fay et al. 2020).","code":"\ntabler_progress <- function(id = NULL, value) {\n  div(\n    class = \"progress\",\n    div(\n      id = id, \n      class = \"progress-bar\",\n      style = paste0(\"width: \", value, \"%\"),\n      role = \"progressbar\",\n      `aria-valuenow` = as.character(value),\n      `aria-valuemin` = \"0\",\n      `aria-valuemax` = \"100\",\n      span(class = \"sr-only\", \"38% Complete\")\n    )\n  )\n}\n\nupdate_tabler_progress <- function(\n  id, \n  value, \n  session = shiny::getDefaultReactiveDomain()\n) {\n  message <- list(id = session$ns(id), value = value)\n  session$sendCustomMessage(\n    type = \"update-progress\",\n    message\n  )\n}$(function () {\n  Shiny.addCustomMessageHandler(\n    'update-progress', function(message) {\n    $('#' + message.id).css('width', message.value +'%');\n  });\n});\nlibrary(shiny)\nlibrary(OSUICode)\nlibrary(shinyWidgets)\nui <- tabler_page(\n  tabler_body(\n    noUiSliderInput(\n      inputId = \"progress_value\",\n      label = \"Progress value\",\n      min = 0, \n      max = 100,\n      value = 20\n    ),\n    tabler_progress(id = \"progress1\", 12)\n  )\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$progress_value, {\n    update_tabler_progress(\n      id = \"progress1\", \n      input$progress_value\n    )\n  })\n}\nshinyApp(ui, server)$(document).on('shiny:connected', function(event) {\n  let slider = document.getElementById('triggerId');\n  slider.noUiSlider.on('update', function(event) {\n    $('#targetId').css('width', this.get() + '%');\n  });\n});\nupdate_tabler_progress2 <- function(trigger, target) {\n  tags$script(\n    paste0(\n      \"$(document).on('shiny:connected', function(event) {\n        let slider = document.getElementById('\", trigger, \"');\n        slider.noUiSlider.on('update', function(event) {\n          $('#\", target, \"').css('width', this.get() + '%');\n        });\n      });\n      \"\n      )\n  )\n}\n\nui <- tabler_page(\n  update_tabler_progress2(\"progress_value\", \"progress1\"),\n  update_tabler_progress2(\"progress_value2\", \"progress2\"),\n  tabler_body(\n    fluidRow(\n      noUiSliderInput(\n        inputId = \"progress_value\",\n        label = \"Progress value 1\",\n        min = 0, \n        max = 100,\n        value = 20\n      ),\n      noUiSliderInput(\n        inputId = \"progress_value2\",\n        label = \"Progress value 2\",\n        min = 0, \n        max = 100,\n        value = 80,\n        color = \"red\"\n      )\n    ),\n    tabler_progress(id = \"progress1\", 12),\n    br(), br(),\n    tabler_progress(id = \"progress2\", 100)\n  )\n)\n\nserver <- function(input, output, session) {}\nshinyApp(ui, server)"},{"path":"custom-templates-interactivity.html","id":"user-feedback-toasts","chapter":"20 Adding more interactivity","heading":"20.2 User feedback: toasts","text":"Toasts components send discrete user feedback, contrary modals open middle page. Toasts may open sides window similar Shiny notifications (see ). Tabler toast component built top Bootstrap 4. Therefore, rely documentation.","code":""},{"path":"custom-templates-interactivity.html","id":"toast-skeleton","chapter":"20 Adding more interactivity","heading":"20.2.1 Toast skeleton","text":"skeleton HTML structure toast:Toasts mainly composed header body. might close button case toast hide period time. multiple toasts appear one others, stacked, latest bottom stack. position controlled style attribute like style=\"position: absolute; top: 0; right: 0;\" top-right placement. Accessibility parameters like aria-live detailed .","code":"<div class=\"toast show\" role=\"alert\" aria-live=\"assertive\" \naria-atomic=\"true\" data-autohide=\"false\" data-toggle=\"toast\">\n  <div class=\"toast-header\">\n    <span class=\"avatar mr-2\" \n    style=\"background-image: url(...)\"><\/span>\n    <strong class=\"mr-auto\">Mallory Hulme<\/strong>\n    <small>11 mins ago<\/small>\n    <button type=\"button\" class=\"ml-2 close\" \n    data-dismiss=\"toast\" aria-label=\"Close\">\n      <span aria-hidden=\"true\">&times;<\/span>\n    <\/button>\n  <\/div>\n  <div class=\"toast-body\">\n    Hello, world! This is a toast message.\n  <\/div>\n<\/div>"},{"path":"custom-templates-interactivity.html","id":"the-toast-api","chapter":"20 Adding more interactivity","heading":"20.2.2 The toast API","text":"Toasts JS API control behavior, instance $('<toast_selector>').toast(option), option JSON following fields:animation applies CSS fade transition toast TRUE default.autohide automatically hides toast (TRUE default).delay delay hide toast (500 ms).three methods: hide, show dispose (dispose ensures toast appear anymore). Finally, may fine tune toast behavior four events: show.bs.toast, shown.bs.toast, hide.bs.toast, hidden.bs.toast (like tabs).","code":""},{"path":"custom-templates-interactivity.html","id":"r-implementation","chapter":"20 Adding more interactivity","heading":"20.2.3 R implementation","text":"first create toast skeleton. assume toast eventually hide automatically, may remove delete button well data-autohide=\"false attribute. parameters optional except toast id, required toggle toast:create show_tabler_toast() function. Since toast automatically hides, make sense create hide function, well dispose:corresponding JS handler given :first configure toast show . Notice chained jQuery methods (see Chapter 10)! optionally add event listener capture hidden.bs.toast event, may trigger action toast closed. input$id used purpose combination Shiny.setInputValue. Notice extra parameter {priority: 'event'}: basically, toast closed, input$id always TRUE, thereby breaking reactivity. Adding extra parameter forces evaluation input, although constant time.","code":"\ntabler_toast <- function(id, title = NULL, subtitle = NULL, \n                         ..., img = NULL) {\n  \n  toast_header <- div(\n    class = \"toast-header\",\n    if (!is.null(img)) {\n      span(\n        class = \"avatar mr-2\", \n        style = sprintf(\"background-image: url(%s)\", img)\n      )\n    },\n    if (!is.null(title)) strong(class = \"mr-2\", title),\n    if (!is.null(subtitle)) tags$small(subtitle)\n  )\n  \n  toast_body <- div(class = \"toast-body\", ...)\n  \n  toast_wrapper <- div(\n    id = id,\n    class = \"toast\",\n    role = \"alert\",\n    style = \"position: absolute; top: 0; right: 0;\",\n    `aria-live` = \"assertive\",\n    `aria-atomic` = \"true\",\n    `data-toggle` = \"toast\"\n  )\n  \n  toast_wrapper %>% \n    tagAppendChildren(toast_header, toast_body)\n}\nshow_tabler_toast <- function(\n  id, \n  options = NULL, \n  session = getDefaultReactiveDomain()\n) {\n  message <- dropNulls(\n    list(\n      id = id,\n      options = options\n    )\n  )\n  session$sendCustomMessage(type = \"tabler-toast\", message)\n}$(function() {\n  Shiny.addCustomMessageHandler(\n    'tabler-toast', function(message) {\n      $(`#${message.id}`)\n        .toast(message.options)\n        .toast('show');\n\n      // add custom Shiny input to listen to the toast state\n      $(`#${message.id}`).once('hidden.bs.toast', function() {\n        Shiny.setInputValue(\n          message.id, \n          true, \n          {priority: 'event'}\n        );\n      });\n  });\n});"},{"path":"custom-templates-interactivity.html","id":"wrap-up","chapter":"20 Adding more interactivity","heading":"20.2.4 Wrap up","text":"\nFIGURE 20.2: Tabler toast element\n","code":"\nui <- tabler_page(\n  tabler_toast(\n    id = \"toast\", \n    title = \"Hello\", \n    subtitle = \"now\", \n    \"Toast body\",\n    img = \"https://preview-dev.tabler.io/static/logo.svg\"\n  ),\n  tabler_button(\"launch\", \"Go!\", width = \"25%\")\n)\n\nserver <- function(input, output, session) {\n  observe(print(input$toast))\n  observeEvent(input$launch, {\n    removeNotification(\"notif\")\n    show_tabler_toast(\n      \"toast\", \n      options = list(\n        animation = FALSE,\n        delay = 3000\n      )\n    )\n  })\n  \n  observeEvent(input$toast, {\n    showNotification(\n      id = \"notif\",\n      \"Toast was closed\", \n      type = \"warning\",\n      duration = 1,\n      \n    )\n  })\n}\n\nshinyApp(ui, server)"},{"path":"custom-templates-interactivity.html","id":"transform-an-element-in-a-custom-action-button","chapter":"20 Adding more interactivity","heading":"20.3 Transform an element in a custom action button","text":"seen Chapter 19, <button>, <> element holding action-button class may eventually become action button. Tabler template dropdown menus navbar like transform dropdown items action buttons. tabler_dropdown function takes following parameters:id required show_tabler_dropdown (see ) function opens menu.title dropdown menu name.subtitle optional text.img optional image.… hosts tabler_dropdown_item (see ).convert dropdown item action button, add action-button class well id parameter recover corresponding input id.finally create show_tabler_dropdown() well corresponding Shiny message handler.show dropdown, use dropdown method linked data-toggle=\"dropdown\" tabler_dropdown().Let’s play ! (See Figure 20.3)\nFIGURE 20.3: Tabler dropdown element\n","code":"\ntabler_dropdown <- function(..., id = NULL, title, \n                            subtitle = NULL, img = NULL) {\n  \n  img_tag <- if (!is.null(img)) {\n    span(\n      class = \"avatar\", \n      style = sprintf(\"background-image: url(%s)\", img)\n    )\n  }\n  \n  titles_tag <- div(\n    class = \"d-none d-xl-block pl-2\",\n    div(title),\n    if (!is.null(subtitle)) {\n      div(class = \"mt-1 small text-muted\", subtitle)\n    }\n  )\n  \n  link_tag <- a(\n    href = \"#\",\n    id = id, \n    class = \"nav-link d-flex lh-1 text-reset p-0\",\n    `data-toggle` = \"dropdown\",\n    `aria-expanded` = \"false\"\n  ) %>% \n    tagAppendChildren(img_tag, titles_tag)\n  \n  dropdown_tag <- div(\n    class = \"dropdown-menu dropdown-menu-right\", \n    `aria-labelledby` = id, \n    ...\n  )\n  \n  div(class = \"nav-item dropdown\") %>% \n    tagAppendChildren(\n      link_tag,\n      dropdown_tag\n    )\n}\ntabler_dropdown_item <- function(..., id = NULL) {\n  a(\n    id = id, \n    class = \"dropdown-item action-button\", \n    href = \"#\", \n    ...\n  )\n}\nshow_tabler_dropdown <- function(\n  id, \n  session = getDefaultReactiveDomain()\n) {\n  session$sendCustomMessage(\n    type = \"show-dropdown\", \n    message = id\n  )\n}$(function() {\n  Shiny.addCustomMessageHandler(\n   'show-dropdown', function(message) {\n      $(`#${message}`).dropdown('show');\n  });\n});\nui <- tabler_page(\n  tabler_navbar(\n    brand_url = \"https://preview-dev.tabler.io\", \n    brand_image = \"https://preview-dev.tabler.io/static/logo.svg\", \n    nav_menu = NULL, \n    tabler_dropdown(\n      id = \"mydropdown\",\n      title = \"Dropdown\",\n      subtitle = \"click me\",\n      tabler_dropdown_item(\n        id = \"item1\",\n        \"Show Notification\"\n      ),\n      tabler_dropdown_item(\n        \"Do nothing\"\n      )\n    )\n  ),\n  tabler_body(\n    tabler_button(\"show\", \"Open dropdown\", width = \"25%\"),\n    footer = tabler_footer(\n      left = \"Rstats, 2020\", \n      right = a(href = \"https://www.google.com\")\n    )\n  )\n)\nserver <- function(input, output, session) {\n  \n  observeEvent(input$show, {\n    show_tabler_dropdown(\"mydropdown\")\n  })\n  \n  observeEvent(input$item1, {\n    showNotification(\n      \"Success\", \n      type = \"message\",\n      duration = 2,\n      \n    )\n  })\n}\nshinyApp(ui, server)"},{"path":"custom-templates-interactivity.html","id":"tab-events","chapter":"20 Adding more interactivity","heading":"20.4 Tab events","text":"remember navbar element tabsetpanel system Chapter 18? Navs allow organize app several tabs, acting like multi pages application. powerful tool Shiny since currently straightforward create multi-pages Shiny apps like anyone website. Navs rely Bootstrap4 API use JS functions.","code":""},{"path":"custom-templates-interactivity.html","id":"insert-tabs","chapter":"20 Adding more interactivity","heading":"20.4.1 Insert/Remove tabs in tabsetpanel","text":"dynamically inserting/removing tabs tabler_navbar()? chose example since involves extra technical details Shiny.proceed? recall tabler_navbar_menu_item() tabler_tab_item() coupling, inserting tab implies insert trigger navigation menu well content dashboard body. Therefore, need know structure insert. reminder:tabler_navbar_menu_item() <li> elements.tabler_tab_item() <div> element specific classes.design insert_tabler_tab() function similar Shiny insertTab().\nhandle shiny modules, wrap inputId session namespace session$ns. create menu item element based provided new tab:JS side, capture R message (list) two elements:$divTag contains tab content.$liTag contains tab link, ie navigation part.Depending position parameter, use insertAfter() insertBefore() jQuery methods. Finally, newly inserted tab selected, activate corresponding tab element $(tablink).tab('show').tab well inserted, notice slider plot properly shown, illustrated Figure 20.4.\nFIGURE 20.4: newly inserted tab fails render content!\nexplain ? dependency issue: slider input relies specific JS library, namely ionRangesSlider, depicted Figure 20.5. previous example, open HTML inspector, dependency included page.\nFIGURE 20.5: Slider dependencies.\nEven stranger, use renderUI() conditionally render slider, dependency included go button pressed. Shiny include ?Let’s look renderUI:last line returned processDeps(result, shinysession). stated section 15.3, function responsible handle dependencies run time. shiny:::processDeps (R side) works Shiny.renderContent (JS side), already mentioned part 15.3. latter takes tag element well object containing HTML code dependencies, instance:Note , bad practice rely packages internal functions, ’ll rely htmltools::renderTags instead shiny:::processDeps, similar.following, modify insert_tabler_tab() include dependencies processing step.apply Shiny.renderContent method tab content navigation item.check approach works expected.\nFIGURE 20.6: htmltools::renderTags Shiny.renderContent action.\nEt voila! shown Figure 20.6, everything properly displayed.","code":"<li class=\"nav-item\">\n  <a class=\"nav-link\" href=\"#ww\" data-toggle=\"pill\" data-value=\"ww\" role=\"tab\">\n    <span class=\"nav-link-icon d-md-none d-lg-inline-block\"><\/span>\n    <span class=\"nav-link-title\">ww<\/span>\n  <\/a>\n<\/li>\n\n<div role=\"tabpanel\" class=\"tab-pane fade container-fluid\" id=\"ww\"><\/div>\ninsert_tabler_tab <- function(\n  inputId, \n  tab, \n  target, \n  position = c(\"before\", \"after\"),\n  select = FALSE, \n  session = getDefaultReactiveDomain()\n) {\n  \n  inputId <- session$ns(inputId)\n  position <- match.arg(position)\n  navbar_menu_item <- tags$li(\n    class = \"nav-item\",\n    a(\n      class = \"nav-link\",\n      href = \"#\",\n      `data-target` = paste0(\"#\", session$ns(tab$attribs$id)),\n      `data-toggle` = \"pill\",\n      `data-value` = tab$attribs$id,\n      role = \"tab\",\n      tab$attribs$id\n    )\n  )\n  \n  tab <- force(as.character(tab))\n  navbar_menu_item <- force(as.character(navbar_menu_item))\n  \n  message <- dropNulls(\n    list(\n      inputId = inputId,\n      content = tab,\n      link = navbar_menu_item,\n      target = target,\n      position = position,\n      select = select\n    )\n  )\n  session$sendCustomMessage(type = \"insert-tab\", message)\n}$(function() {\n  Shiny.addCustomMessageHandler(\n    'insert-tab', function(message) {\n      // define div and li targets\n      let $divTag = $(message.content);\n      let $liTag = $(message.link);\n      let targetId = '#' + message.target;\n      if (message.position === 'after') {\n        $divTag.insertAfter($(targetId));\n        $liTag.insertAfter(\n          $('[data-target=\"' + targetId + '\"]')\n            .parent()\n        );\n      } else if (message.position === 'before') {\n        $divTag.insertBefore($(targetId));\n        $liTag.insertBefore(\n          $('[data-target=\"' + targetId + '\"]')\n            .parent()\n        );\n      }\n      \n      if (message.select) {\n        // trigger a click on corresponding the new tab button. \n        let newTabId = $divTag.attr('id');\n        $('#' + \n          message.inputId + \n          ' a[data-target=\"#' + \n          newTabId +'\"]').tab('show');\n      }\n  });\n});\ninsert_tabler_tab_example(1)\nui <- fluidPage(\n  shiny::actionButton(\"go\", \"Go!\", class = \"btn-success\"),\n  uiOutput(\"slider\"),\n  plotOutput(\"distPlot\")\n)\n\n# Server logic\nserver <- function(input, output) {\n  \n  output$slider <- renderUI({\n    req(input$go > 0)\n    sliderInput(\n      \"obs\", \n      \"Number of observations:\",\n      min = 0, \n      max = 1000, \n      value = 500\n    )\n  })\n  \n  output$distPlot <- renderPlot({\n    req(input$obs)\n    hist(rnorm(input$obs))\n  })\n}\n\n# Complete app with UI and server components\nshinyApp(ui, server)\nrenderUI <- function (\n  expr, \n  env = parent.frame(), \n  quoted = FALSE, \n  outputArgs = list()\n) {\n  installExprFunction(expr, \"func\", env, quoted)\n  createRenderFunction(func, function(result, shinysession, \n                                      name, ...) {\n    if (is.null(result) || length(result) == 0) \n      return(NULL)\n    processDeps(result, shinysession)\n  }, uiOutput, outputArgs)\n}exports.renderContent($tag[0], {\n  html: $tag.html(),\n  deps: message.tag.deps\n});  \ninsert_tabler_tab <- function(\n  inputId, \n  tab, \n  target, \n  position = c(\"before\", \"after\"),\n  select = FALSE, \n  session = getDefaultReactiveDomain()\n) {\n  \n  inputId <- session$ns(inputId)\n  position <- match.arg(position)\n  navbar_menu_item <- tags$li(\n    class = \"nav-item\",\n    a(\n      class = \"nav-link\",\n      href = \"#\",\n      `data-target` = paste0(\"#\", session$ns(tab$attribs$id)),\n      `data-toggle` = \"pill\",\n      `data-value` = tab$attribs$id,\n      role = \"tab\",\n      tab$attribs$id\n    )\n  )\n  \n  message <- dropNulls(\n    list(\n      inputId = inputId,\n      content = htmltools::renderTags(tab),\n      link = htmltools::renderTags(navbar_menu_item),\n      target = target,\n      position = position,\n      select = select\n    )\n  )\n  session$sendCustomMessage(type = \"insert-tab\", message)\n}$(function() {\n  Shiny.addCustomMessageHandler('insert-tab', function(message) {\n    // define div and li targets\n    let $divTag = $(message.content.html);\n    let $liTag = $(message.link.html);\n    let targetId = '#' + message.target;\n    \n    if (message.position === 'after') {\n      $divTag.insertAfter($(targetId));\n      $liTag.insertAfter(\n        $('[data-target=\"' + targetId +   '\"]')\n          .parent()\n      );\n    } else if (message.position === 'before') {\n      $divTag.insertBefore($(targetId));\n      $liTag.insertBefore(\n        $('[data-target=\"' + targetId +   '\"]')\n          .parent()\n      );\n    }\n    \n    // needed to render input/output in newly added tab. It takes the possible\n    // deps and add them to the tag. Indeed, if we insert a tab, its deps are not\n    // included in the page so it can't render properly\n    Shiny.renderContent(\n      $liTag[0], \n      {html: $liTag.html(), deps: message.link.dependencies}\n    );\n    Shiny.renderContent(\n      $divTag[0], \n      {html: $divTag.html(), deps: message.content.dependencies}\n    );\n    \n    if (message.select) {\n      // trigger a click on corresponding the new tab button. \n      let newTabId = $divTag.attr('id');\n      $('#' + \n        message.inputId + \n        ' a[data-target=\"#' + \n        newTabId   \n        +'\"]').tab('show');\n    }\n  });\n});\ninsert_tabler_tab_example(2)"},{"path":"custom-templates-interactivity.html","id":"exercises-3","chapter":"20 Adding more interactivity","heading":"20.5 Exercises","text":"Taking inspiration insert_tabler_tab() function, write remove_tabler_tab() function.Based Tabler documentation, add tabler_tooltip() function. Hint: may also check corresponding Bootstrap 4 help.","code":""},{"path":"custom-templates-testing.html","id":"custom-templates-testing","chapter":"21 Testing and validating templates elements","heading":"21 Testing and validating templates elements","text":"now, building template boilerplate, main skeleton functions (page, navbar, navbar menu, …) well components cards, ribbons, progress bars. also exposed techniques substantially give interactivity template, leveraging freshly acquired JavaScript skills. mean ready make template public? yet since essentials steps missing:Input validation crucial step toward success. Briefly, consists checking user inputs functions fail safely elegantly providing meaningful error messages warnings. concept already covered R Data Science (Wickham Grolemund 2017), Advanced R (Hadley 2019) lot resources. Hence, trying reinvent wheel rely already existing patterns, whose effectiveness longer demonstrated. Welcome defensive programming world!hand, testing components allows check functions supposed . Consequently, proof robustness, increases reproducibility. significantly reduces mental load comes start code refactoring, thereby making feel slightly less guilty creating breaking changes since, time, tests able capture errors.","code":""},{"path":"custom-templates-testing.html","id":"validate-template-functions","chapter":"21 Testing and validating templates elements","heading":"21.1 Validate template functions","text":"","code":""},{"path":"custom-templates-testing.html","id":"create-your-own-validations","chapter":"21 Testing and validating templates elements","heading":"21.1.1 Create your own validations","text":", showcase examples validate user inputs. first consider tabler_card() element Chapter 18:first thing think validate. , see least three test:Checking status value.Checking width value.Checking padding value.Writing validation tests requires knowledge underlying mechanisms. case, must know Bootstrap 4 grid rules valid color statuses. Bootstrap 4 grid ranges 1 12. words, card width 12 take full page whereas, may align three cards width 4. Valid statuses primary, secondary, success, info, danger, warning, light dark.therefore pretty straightforward validate card width must numeric 1 12. Moreover, since template containers including width parameter, create function rule :check status parameter, save valid statuses vector take validStatuses function shinydashboard utils. also make sense create function since parameter widely used among template components.\nContrary shinydashboard function, custom valid_status() fail\nstatus NULL since mandatory parameter.finish padding validation. According Tabler documentation,\nthree possible choices, namely sm, md lg:apply validation card element.R 4.0.0, stopifnot() function may good alternative stop().recommend reasonable validate every single parameter, might productive.","code":"\nlibrary(shiny)\ntabler_card <- function(..., title = NULL, status = NULL, width = 6,\n                        stacked = FALSE, padding = NULL) {\n\n  card_cl <- paste0(\n    \"card\",\n    if (stacked) \" card-stacked\",\n    if (!is.null(padding)) paste0(\" card-\", padding)\n  )\n\n  status_tag <- if (!is.null(status)) {\n    div(class = paste0(\"card-status-top bg-\", status))\n  }\n\n  body_tag <- div(\n    class = \"card-body\",\n    # we could have a smaller title like h4 or h5...\n    if (!is.null(title)) {\n      h3(class = \"card-title\", title)\n    },\n    ...\n  )\n\n  main_wrapper <- div(class = paste0(\"col-md-\", width))\n  card_wrapper <- div(class = card_cl)\n\n  card_wrapper <- card_wrapper %>% tagAppendChildren(status_tag, body_tag)\n  main_wrapper %>% tagAppendChild(card_wrapper)\n}\nvalidate_width <- function(width) {\n  if (is.numeric(width)) {\n    if (width < 1 || width > 12) {\n      stop(\n        \"width must belong to [1, 12], as per \n        Bootstrap 4 grid documentation. \n        See more at https://getbootstrap.com/docs/4.0/layout/grid/\"\n      )\n    }\n  } else {\n    stop(\"width must be numeric\")\n  }\n}\n\nvalidate_width(4)\ntry(validate_width(-1)) # will fail#> Error in validate_width(-1) : width must belong to [1, 12], as per \n#>         Bootstrap 4 grid documentation. \n#>         See more at https://getbootstrap.com/docs/4.0/layout/grid/\ntry(validate_width(13)) # will fail#> Error in validate_width(13) : width must belong to [1, 12], as per \n#>         Bootstrap 4 grid documentation. \n#>         See more at https://getbootstrap.com/docs/4.0/layout/grid/\ntry(validate_width(\"string\")) # will fail#> Error in validate_width(\"string\") : width must be numeric\nvalid_statuses <- c(\n  \"primary\", \n  \"secondary\",\n  \"success\", \n  \"info\", \n  \"warning\", \n  \"danger\",\n  \"light\",\n  \"dark\"\n)\n\nvalidate_status <- function(status) {\n\n  if (is.null(status)) {\n    return(TRUE) \n  } else {\n    if (status %in% valid_statuses) {\n      return(TRUE)\n    }\n  }\n\n  stop(\"Invalid status: \", status, \". Valid statuses are: \",\n       paste(valid_statuses, collapse = \", \"), \".\")\n}\nvalid_paddings <- c(\"sm\", \"md\", \"lg\")\n\nvalidate_padding <- function(padding) {\n  if (!is.null(padding)) {\n    if (!(padding %in% valid_paddings)) {\n      stop(\"Invalid status: \", padding, \". Valid choices are: \",\n       paste(valid_paddings, collapse = \", \"), \".\")\n    }\n  }\n}\ntabler_card <- function(..., title = NULL, status = NULL, \n                        width = 6, stacked = FALSE, \n                        padding = NULL) {\n  \n  validate_status(status)\n  validate_width(width)\n  validate_padding(padding)\n  \n  card_cl <- paste0(\n    \"card\",\n    if (stacked) \" card-stacked\",\n    if (!is.null(padding)) paste0(\" card-\", padding)\n  )\n\n  status_tag <- if (!is.null(status)) {\n    div(class = paste0(\"card-status-top bg-\", status))\n  }\n\n  body_tag <- div(\n    class = \"card-body\",\n    # we could have a smaller title like h4 or h5...\n    if (!is.null(title)) {\n      h3(class = \"card-title\", title)\n    },\n    ...\n  )\n\n  main_wrapper <- div(class = paste0(\"col-md-\", width))\n  card_wrapper <- div(class = card_cl)\n\n  card_wrapper <- card_wrapper %>% tagAppendChildren(status_tag, body_tag)\n  main_wrapper %>% tagAppendChild(card_wrapper)\n}"},{"path":"custom-templates-testing.html","id":"existing-utils-functions","chapter":"21 Testing and validating templates elements","heading":"21.1.2 Existing utils functions","text":"","code":""},{"path":"custom-templates-testing.html","id":"validating-tags","chapter":"21 Testing and validating templates elements","heading":"21.1.2.1 Validating tags","text":"approach, takes time create validation functions. Fortunately, packages like shinydashboard include really powerful validation functions, especially tagAssert(). function included book side package ({OSUICode}) may use time:Importantly, tagAssert() raises error condition fulfilled. Another function, tagMatches() simply returns TRUE FALSE. looks ìd, class, name tag attribute like data-value. Like tagAssert(), tagMatches() also available {OSUICode}.","code":"\nlibrary(OSUICode)\nmyTag <- div(class = \"bg-blue\")\n\ntagAssert(myTag, type = \"div\")\ntry(tagAssert(myTag, type = \"li\")) # will fail#> Error in tagAssert(myTag, type = \"li\") : Expected tag to be of type li\ntagAssert(myTag, class = \"bg-blue\")\ntagMatches(myTag, id = \"d\")#> [1] FALSE\ntagMatches(myTag, class = \"bg-blue\")#> [1] TRUE"},{"path":"custom-templates-testing.html","id":"validating-css-units","chapter":"21 Testing and validating templates elements","heading":"21.1.2.2 Validating CSS units","text":"validateCssUnit() function belongs Shiny exported function. useful quickly check parameter involving CSS unit like width height.","code":""},{"path":"custom-templates-testing.html","id":"example-refine-navbar-menu-items","chapter":"21 Testing and validating templates elements","heading":"21.1.3 Example: refine navbar menu items","text":"","code":""},{"path":"custom-templates-testing.html","id":"avoid-wrong-jquery-selectors","chapter":"21 Testing and validating templates elements","heading":"21.1.3.1 Avoid wrong jQuery selectors","text":"Chapter 18, developed tabler_navbar_menu_item() function. tabName parameter critical since responsible driving navigation. must ensure value provided user compatible jQuery selectors conventions. illustrate problem, consider example , second tab name hello%%&1:Notice see second tab content. proposal validate_tab() function. first detect punctuation provided input [[:punct:]]. trick capture _ valid jQuery. use negative look-ahead assertion (?!_).\nfinally raise error punctuation found:validate_tabName() must inserted beginning tabler_navbar_menu_item() well tabler_tab_item(), latter also relying tabName.","code":"\nui <- tabler_page(\n  tabler_navbar(\n    brand_url = \"https://preview-dev.tabler.io\", \n    brand_image = \"https://preview-dev.tabler.io/static/logo.svg\", \n    nav_menu = tabler_navbar_menu(\n      inputId = \"mymenu\",\n      tabler_navbar_menu_item(\n        text = \"Tab 1\",\n        icon = NULL,\n        tabName = \"tab1\",\n        selected = TRUE\n      ),\n      tabler_navbar_menu_item(\n        text = \"Tab 2\",\n        icon = NULL,\n        tabName = \"hello%%&1\"\n      )\n    )\n  ),\n  tabler_body(\n    tabler_tab_items(\n      tabler_tab_item(\n        tabName = \"tab1\",\n        sliderInput(\n          \"obs\", \n          \"Number of observations:\",\n          min = 0,\n          max = 1000, \n          value = 500\n        ),\n        plotOutput(\"distPlot\")\n      ),\n      tabler_tab_item(\n        tabName = \"hello%%&1\",\n        p(\"Second Tab\")\n      )\n    ),\n    footer = tabler_footer(\n      left = \"Rstats, 2020\", \n      right = a(href = \"https://www.google.com\", \"More\")\n    )\n  )\n)\nserver <- function(input, output) {\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n}\nshinyApp(ui, server)\nvalidate_tabName <- function(tabName) {\n  forbidden <- \"(?!_)[[:punct:]]\"\n  wrong_selector <- grepl(forbidden, tabName, perl = TRUE)\n  if (wrong_selector) {\n    stop(\n      paste(\n        \"Please do not use punctuation characters in tabNames.\n        This might cause JavaScript issues.\"\n      )\n    )\n  }\n}\nvalidate_tabName(\"plop\")\ntry(validate_tabName(\"test%\")) # will fail#> Error in validate_tabName(\"test%\") : \n#>   Please do not use punctuation characters in tabNames.\n#>         This might cause JavaScript issues."},{"path":"custom-templates-testing.html","id":"checking-for-multiple-selected-items","chapter":"21 Testing and validating templates elements","heading":"21.1.3.2 Checking for multiple selected items","text":"Another issue possibility multiple selected tab items start. Looking back tabler_navbar_menu(), surprising since absolutely checks!classic method inspect items provided tabler_navbar_menu() capture list. extract children items via lapply(list(...), `[[`, \"children\"). reminder, shiny tag structure containing tag name, named list attributes, children (See chapter 2). children apply shinydashboard internal function findAttribute(), allows search specific attribute value given tag. use vapply() return atomic vector (like c(1, 2), lists vectors recursive!) compute sum vector. TRUE occurrence counted 1 FALSE 0. Therefore, latter higher 1, means user provided 1 selected tab, subsequently raise error:","code":"\ntabler_navbar_menu <- function(...) {\n  tags$ul(class = \"nav nav-pills navbar-nav\", ...)\n}\ntabler_navbar_menu <- function(...) {\n  \n  items <- unlist(\n    lapply(list(...) , `[[`, \"children\"), \n    recursive = FALSE\n  )\n  res <- sum(\n    vapply(\n      items, \n      findAttribute, \n      \"class\", \n      \"nav-link active\", \n      FUN.VALUE = logical(1)\n    )\n  )\n  if (res > 1) {\n    stop(\"Cannot have multiple selected items at start!\")\n  }\n  \n  tags$ul(class = \"nav nav-pills navbar-nav\", ...)\n}\n\n# will fail\ntry({\n  menu <- tabler_navbar_menu(\n    tabler_navbar_menu_item(\n      text = \"Tab 1\",\n      icon = NULL,\n      tabName = \"tab1\",\n      selected = TRUE\n    ),\n    tabler_navbar_menu_item(\n      text = \"Tab 2\",\n      icon = NULL,\n      tabName = \"tab2\",\n      selected = FALSE\n    )\n  )\n})"},{"path":"custom-templates-testing.html","id":"testing-templates-elements","chapter":"21 Testing and validating templates elements","heading":"21.2 Testing templates elements","text":"Imagine one day, someone accidentally remove width validation function, significant refactoring. Later, receive new message GitHub, stating someone opened new issue. According report, card properly displayed although error thrown. Among 400 lines code provided, hardly notice width parameter set 13, line Bootstrap 4 documentation, remain 1 12. lost 10 minutes end user, even worse.proper testing pipeline, problem avoided. Ironically, writing corresponding test takes two minutes.reference testing functions {testthat} package (Wickham 2021). short, unit test consists setting expectations function check whether fail pass. instance, previous tabler_card() example, validate_width() must fail given width expected bounds numeric. apply test_that() function description containing test context, followed expectations inside curly brackets.test validate_status() validate_padding().far good. lines code, substantially increased robustness function without increasing complexity. Now, let’s try remove validate_width() step tabler_card().Notice three tests elegantly fail. provided context (“validate width works”) immediately indicates culprit, game changer debugging.","code":"\nlibrary(testthat)\ntest_that(\"validate width works\", {\n  expect_error(tabler_card(width = -1))\n  expect_error(tabler_card(width = 13))\n  expect_error(tabler_card(width = \"hello world\"))\n})#> Test passed 🎊\ntest_that(\"validate status works\", {\n  expect_error(tabler_card(status = \"toto\"))\n})#> Test passed 🥳\ntest_that(\"validate padding works\", {\n  expect_error(tabler_card(width = \"xs\"))\n})#> Test passed 🎉\ntabler_card <- function(..., title = NULL, status = NULL, \n                        width = 6, stacked = FALSE, \n                        padding = NULL) {\n  \n  # validation\n  # validate_width(width)\n  validate_status(status)\n  validate_padding(padding)\n  \n  card_cl <- paste0(\n    \"card\", \n    if (stacked) \" card-stacked\",\n    if (!is.null(padding)) paste0(\" card-\", padding)\n  )\n  \n  div(\n    class = paste0(\"col-md-\", width),\n    div(\n      class = card_cl,\n      if (!is.null(status)) {\n        div(class = paste0(\"card-status-top bg-\", status))\n      },\n      div(\n        class = \"card-body\",\n        # we could have a smaller title like h4 or h5...\n        if (!is.null(title)) {\n          h3(class = \"card-title\", title)\n        },\n        ...\n      )\n    )\n  )\n  \n}\n\n\ntest_that(\"validate width works\", {\n  expect_error(tabler_card(width = -1))\n  expect_error(tabler_card(width = 13))\n  expect_error(tabler_card(width = \"hello world\"))\n})#> ── Failure (<text>:38:3): validate width works ─────────────────────────────────\n#> `tabler_card(width = -1)` did not throw an error.\n#> \n#> ── Failure (<text>:39:3): validate width works ─────────────────────────────────\n#> `tabler_card(width = 13)` did not throw an error.\n#> \n#> ── Failure (<text>:40:3): validate width works ─────────────────────────────────\n#> `tabler_card(width = \"hello world\")` did not throw an error."},{"path":"custom-templates-testing.html","id":"testing-template-behavior","chapter":"21 Testing and validating templates elements","heading":"21.2.1 Testing template behavior","text":"Testing JavaScript behavior one biggest challenge validate template. \nR component carefully validated, mean JavaScript effects\n! instance, let’s consider tabler_progress() may updated update_tabler_progress(). check whether progress value correctly set?","code":""},{"path":"custom-templates-testing.html","id":"r-side","chapter":"21 Testing and validating templates elements","heading":"21.2.1.1 R side","text":"Testing R side quite easy. Let’s recall update_tabler_progress() function:function two things:Captures id targeted progress new value.Sends message JS.test consists checking whether send elements session. first create\ndummy session environment contains ns mimic session$ns function\nsendCustomMessage test message handler part:, sendCustomMessage simply stores last sent message session$lastCustomMessage, session$ns returns provided element:call update_tabler_progress() random parameters capture \nlast sent message res variable:Importantly, don’t forget set session parameter session, otherwise,\ndefault shiny::getDefaultReactiveDomain NULL outside Shiny app.Now can set expectations:res must list length 2.expected custom handler type update-progress.sent value 10.sent id myprogress.translate testthat:test set, ensures seamlessly capture breaking change API.","code":"\nupdate_tabler_progress <- function(\n  id, \n  value, \n  session = shiny::getDefaultReactiveDomain()\n) {\n  message <- list(id = session$ns(id), value = value)\n  session$sendCustomMessage(type = \"update-progress\", message)\n}\nsession <- as.environment(\n  list(\n    ns = identity,\n    sendCustomMessage = function(type, message) {\n      session$lastCustomMessage <- list(\n        type = type, \n        message = message\n      )\n    }\n  )\n)\nsession$ns(\"test\")#> [1] \"test\"\nsession$sendCustomMessage(\"test\", message = \"hello\")\nsession$lastCustomMessage#> $type\n#> [1] \"test\"\n#> \n#> $message\n#> [1] \"hello\"\nlibrary(OSUICode)\nupdate_tabler_progress(\n  id = \"myprogress\", \n  value = 10, \n  session = session\n)\nres <- session$lastCustomMessage\ntest_that(\"update progress works\", {\n  update_tabler_progress(\n    id = \"myprogress\", \n    value = 10, \n    session = session\n  )\n  res <- session$lastCustomMessage\n  \n  expect_length(res, 2)\n  expect_equal(res$type, \"update-progress\")\n  expect_length(res$message, 2)\n  expect_equal(res$message$id, \"myprogress\")\n  expect_equal(res$message$value, 10)\n})#> Test passed 😸"},{"path":"custom-templates-testing.html","id":"custom-templates-testing-js","chapter":"21 Testing and validating templates elements","heading":"21.2.1.2 JS side","text":"following, test whether corresponding JS handler works expected:leverage crrry packages developed Colin Fay ThinkR.\nOverall, crrry adaptation crrri, specifically optimized shiny, native Chrome Remote Interface R using Chrome Debugging Protocol. words, provides tools programmatically control\nweb browser many things like inspecting web page,\ntaking screenshots, testing… may know shinytest relies another technology,\nphantomjs. latter play well Bootstrap 4 templates, don’t use \n.crrry already introduced Engineering Production-Grade Shiny Apps book (Fay et al. 2020).first step call update_tabler_progress() example locally add returned\nurl following code. run app another process processx:way, can run test main R process, checking task p alive. app\nloads immediately may wait time computations:wait Shiny ready:Note output --remote-debugging-port=31683 gives link Chrome devtools link\ninspect current app, shown Figure 21.1.\nFIGURE 21.1: Tabler progress bar debug tools\nnow time write JS testing logic. know moving slider triggers\nupdate_tabler_progress() function. change slider value,\nthanks noUiSlider API. first\nselect slider DOM element call noUiSlider.set selected instance:use call_js() update slider value within testing pipeline:According Figure 21.2, slider properly updated,\nprogress bar also seems expected value.\nFIGURE 21.2: Updated slider\nrecover progress value knowing contained aria-valuenow\nattribute, string. convert number parseInt:test success, meaning update_tabler_progress(), especially associated\ncustom message handler, works. test simple involve input elements.\nYet, crrry also support setting input values shiny_set_input(id, value).","code":"Shiny.addCustomMessageHandler(\n  'update-progress', function(message) {\n    $('#' + message.id)\n      .css('width', message.value +'%')\n      .attr('aria-valuenow', message.value);\n});\np <- processx::process$new(\n  \"Rscript\", \n  c(\n    \"-e\",  \n    \"options('shiny.port'= 3515);\n     OSUICode::update_tabler_progress_example()\"\n  )\n)\n\nSys.sleep(2)\n\np$is_alive()\n#> [1] TRUE\nlibrary(crrry)\nlibrary(testthat)\ntest <- CrrryOnPage$new(\n  chrome_bin = pagedown::find_chrome(),\n  chrome_port = httpuv::randomPort(),\n  url = \"http://localhost:3515/\",\n  headless = TRUE\n)\n#> Running '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome' --no-first-run --headless \\\n#>   '--user-data-dir=/Users/david/Library/Application Support/r-crrri/chrome-data-dir-qvxnsycg' \\\n#>   '--remote-debugging-port=31683'\ntest$wait_for_shiny_ready()\n#> Shiny is computing\n#> ✔ Shiny is still runningvar slider = document.getElementById('progress_value');\nslider.noUiSlider.set(50);\ntest$call_js(\n  \"var slider = document.getElementById('progress_value');\n   slider.noUiSlider.set(50);\n  \"\n)\n#> ── Launching JS: var slider = document.getElementById('progress_value');\n#>     slider.noUiSlider.set(50);\n#>     ───────────────────────────────────────────────────────────\n#> Shiny is computing\n#> ✔ Shiny is still running\nval <- test$call_js(\n  \"parseInt($('#progress1').attr('aria-valuenow'), 10);\n  \"\n)\n#> ── Launching JS: parseInt($('#progress1').attr('aria-valuenow'), 10);\n#>     ──────────────────────────────────────────────────────────────\n#> Shiny is computing\n#> ✔ Shiny is still running\nexpect_equal(val$result$value, 50)\n\n# stop the test whenever satisfied\ntest$stop()"},{"path":"custom-templates-testing.html","id":"test-input-bindings","chapter":"21 Testing and validating templates elements","heading":"21.2.2 Test input bindings","text":"decide add complexity show test home made input binding. going \ntest tabler navbar JavaScript logic developed Chapter 19.3.\nstarting test, define expectations:tabler_navbar_menu_item() selected default, start, first item selected.\nmust active class . Hence, check whether first <class=\"nav-link\">\nactive class.Moreover, one item selected start, make sure item active class.ensure clicking another link switch currently selected link \ncorresponding input R side properly updated.call update_tabler_tab_item() check whether active link \nsuccessfully changed.time navbar item active, corresponding body tabler_tab_item() must hold \nactive show class, make sure tab content visible. tab may classes time.described , run app another R process, keep main process\ntest:start, link selected, meaning expect first link active shown. navbar\nmay targeted using navbar-nav class use find locate active child, must\nnav-link active classes. also control one item selected inspecting length\nactive nav link items. extract index index contained data-value attribute:Now let’s see whether body tab good index. target tab-content class look\nelement active show classes. recover id contains tab name:programmatically change active tab clicking second link, click. use\n.nav-link:eq(1) select second link use .nav-link:(.active) since\n2 links. also recover index selected link corresponding tab. \neverything happens well, expect value 2:click “change tab” button, update id. latter,\nactually triggers update_tabler_tab_item(). also want check behavior expect\nback tab 1:test successful, means receiveMessage setValue methods\nwork expected. finally test input value setting value tab2 shiny_set_input.\nShiny input values stored Shiny.shinyapp.$inputValues object, shown Chapter 13:effect navbar triggers notification.exercise, leave reader write test check app behavior \nsecond tab active start.","code":"\np <- processx::process$new(\n  \"Rscript\", \n  c(\n    \"-e\",  \n    \"options('shiny.port'= 3515); \n    OSUICode::update_tabler_navbar_example()\" \n  )\n)\n\nSys.sleep(2)\n\np$is_alive()\n#> [1] TRUE\n\ntest <- CrrryOnPage$new(\n  chrome_bin = pagedown::find_chrome(),\n  chrome_port = httpuv::randomPort(),\n  url = \"http://localhost:3515/\",\n  headless = TRUE\n)\n#> Running '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome' --no-first-run --headless \\\n#>   '--user-data-dir=/Users/david/Library/Application Support/r-crrri/chrome-data-dir-gwzcnjjd' \\\n#>   '--remote-debugging-port=11028'\n\ntest$wait_for_shiny_ready()\n#> Shiny is computing\n#> ✔ Shiny is still running\nactive <- test$call_js(\n  \"$('.navbar-nav').find('.nav-link.active').length\"\n)\n#> ── Launching JS: $('.navbar-nav').find('.nav-link.active').length \n#>     ───────────────────────────────────────────────────────────\n#> Shiny is computing\n#> ✔ Shiny is still running\nexpect_equal(active$result$value, 1)\n\ntest$wait_for_shiny_ready()\n#> Shiny is computing\n#> ✔ Shiny is still running\n\nres1 <- test$call_js(\n  \"$('.navbar-nav')\n    .find('.nav-link.active')\n    .attr('data-value')\"\n)\n#> ── Launching JS: $('.navbar-nav')\n#>     .find('.nav-link.active')\n#>     .attr('data-value')\n#>     ───────────────────────────────────────────────────────────\n#> Shiny is computing\n#> ✔ Shiny is still running\nexpect_equal(res1$result$value, \"tab1\")\nres2 <- test$call_js(\n  \"$('.tab-content').find('.active.show').attr('id')\"\n)\n#> ── Launching JS: $('.tab-content').find('.active.show').attr('id') \n#>     ───────────────────────────────────────────────────────────\n#> Shiny is computing\n#> ✔ Shiny is still running\nexpect_equal(res1$result$value, res2$result$value)\ntest$call_js(\"$('.navbar-nav .nav-link:eq(1)').click();\")\n\nres3 <- test$call_js(\n  \"$('.navbar-nav')\n    .find('.nav-link.active')\n    .attr('data-value')\"\n)\n#> ── Launching JS: $('.navbar-nav')\n#>     .find('.nav-link.active')\n#>     .attr('data-value') \n#>     ───────────────────────────────────────────────────────────\n#> Shiny is computing\n#> ✔ Shiny is still running\nexpect_equal(res3$result$value, \"tab2\")\n\ntest$wait_for_shiny_ready()\n#> Shiny is computing\n#> ✔ Shiny is still running\n\nres4 <- test$call_js(\n  \"$('.tab-content')\n    .find('.active.show')\n    .attr('id')\"\n)\n#> ── Launching JS: $('.tab-content')\n#>     .find('.active.show')\n#>     .attr('id')\n#>     ───────────────────────────────────────────────────────────\nexpect_equal(res3$result$value, res4$result$value)\ntest$call_js(\"$('#update').click();\")\n#> ── Launching JS: $('#update').click(); \n#>     ───────────────────────────────────────────────────────────\n#> Shiny is computing\n#> ✔ Shiny is still running\n\nres5 <- test$call_js(\n  \"$('.navbar-nav')\n    .find('.nav-link.active')\n    .attr('data-value')\"\n)\n#> ── Launching JS: $('.navbar-nav')\n#>     .find('.nav-link.active')\n#>     .attr('data-value')\n#>     ───────────────────────────────────────────────────────────\n#> Shiny is computing\n#> ✔ Shiny is still running\nexpect_equal(res5$result$value, \"tab1\")\n\ntest$wait_for_shiny_ready()\n#> Shiny is computing\n#> ✔ Shiny is still running\n\nres6 <- test$call_js(\n  \"$('.tab-content')\n    .find('.active.show')\n    .attr('id')\"\n)\n#> Shiny is computing\n#> ✔ Shiny is still running\nexpect_equal(res5$result$value, res6$result$value)\ntest$shiny_set_input(\"current_tab\", \"tab2\")\n#> ── Setting id current_tab with value tab2 \n#>     ───────────────────────────────────────────────────────────\n#> Shiny is computing\n#> ✔ Shiny is still running\ntab_input <- test$call_js(\n  \"Shiny.shinyapp.$inputValues.current_tab\"\n)\n#> ── Launching JS: Shiny.shinyapp.$inputValues.current_tab \n#>     ───────────────────────────────────────────────────────────\n#> Shiny is computing\n#> ✔ Shiny is still running\nexpect_equal(tab_input$result$value, \"tab2\")\ntest$stop()"},{"path":"workflow-charpente.html","id":"workflow-charpente","chapter":"22 Introduction to {charpente}","heading":"22 Introduction to {charpente}","text":"\nFIGURE 22.1: {charpente} package\n","code":""},{"path":"workflow-charpente.html","id":"motivations-1","chapter":"22 Introduction to {charpente}","heading":"22.1 Motivations","text":"Translating HTML template R API requires creation package. good practice proceed follows:Imagine repeat process twenty components. R package structure provides many advantages like:Develop comprehensive documentation underlying APIDesign unit tests guaranty code robustness improve long term planRelevant file organization","code":"\nui <- fluidPage(\n  useShinydashboard(),\n  tags$script(\n    [1172 chars quoted with '\"']\n  ),\n  \n  box2(\n    title = textOutput(\"box_state\"),\n    \"Box body\",\n    inputId = \"mybox\",\n    collapsible = TRUE,\n    plotOutput(\"plot\")\n  ),\n  actionButton(\"toggle_box\", \"Toggle Box\")\n)\n\nserver <- function(input, output, session) {\n  output$plot <- renderPlot({\n      req(!input$mybox$collapsed)\n      plot(rnorm(200))\n    })\n    \n    output$box_state <- renderText({\n      state <- if (input$mybox$collapsed) \"collapsed\" else \"uncollapsed\"\n      paste(\"My box is\", state)\n    })\n    \n    observeEvent(input$toggle_box, {\n      updateBox2(\"mybox\")\n    })\n}\n\nshinyApp(ui, server)"},{"path":"workflow-charpente.html","id":"general-idea","chapter":"22 Introduction to {charpente}","heading":"22.2 General idea","text":"{charpente} game changer custom template creation widely used help developing RinteRface packages.\ncharpente (Granjon Coene 2021) drastically:Eases import external dependencies.Speeds HTML R conversion, quite frankly rather boring process,\nallowing focus features rather syntax. feature builds top {html2R} shiny app Alan Dipert, already mentioned Chapter 2.Eases JS code management, leveraging esbuild.Let’s try html_2_R:html_2_R prefix parameter adds tags$ prefix TRUE. \nTRUE default prevents errors non exported Shiny tags like nav.second main benefit charpente dependency management system.","code":"\nlibrary(charpente)\nhtml_2_R('<div class=\"divclass\" id = \"someid\"><\/div>')#> #> ── Converting code ... ──#> #> ✓ Code converted with success.#> ℹ Copy and paste the following R code#> ────────────────────────────────────────────────────────────────────────────────#> tags$div(\n#>   class = \"divclass\",\n#>   id = \"someid\"\n#> )"},{"path":"workflow-charpente.html","id":"a-case-study-shinybulma","chapter":"22 Introduction to {charpente}","heading":"22.3 A case study: {shinybulma}","text":"following, ’ll illustrate charpente’s workflow, R Pharma workshop exercises focused shinybulma.bulma popular open source CSS framework web.\nImportantly, isn’t JavaScript bulma core code.\n’ll see later recent bulma JS provides implementation.\nnow, focus HTML CSS.initialize charpente package, run:sets minimal viable package git optionally GitHub remote setup,\nFigure 22.2.\nFIGURE 22.2: Package structure {charpente}\ndefault, package DESCRIPTION Imports field shiny, htmltools \nutils. charpente never required dependency package since might\ninvasive../R folder, charpente creates mypkg-utils.R script containing:Tools facilitate HTML dependency management like add_dependencies (see corresponding section ).validation functions mentioned Chapter 21.Finally, may see exotic folders files like srcjs, package.json, package-lock.json node_modules. Fear , describe later 22.3.6. Overall, support JS code management.","code":"\npath <- file.path(tempdir(), \"mypkg\")\ncreate_charpente(path, license = \"mit\")"},{"path":"workflow-charpente.html","id":"build-the-html-dependency","chapter":"22 Introduction to {charpente}","heading":"22.3.1 Build the HTML dependency","text":"interested reader may look Getting started guide,\nknow get bulma. install bulma dependencies, several ways:CDN method (content delivery network) consists getting dependencies dedicated server.\nFiles stored locally may problem one internet.local method consists downloading production files (minified CSS).Using npm installs bulma sources well production files. means one can modify\nsources anytime, recommended since hard \nmaintain.case, show two first methods, third scope book.shown previous Chapter 17,\nbuild bulma dependency follows:already takes much time. charpente comes play.\nSpecifically, create_dependency function automatically downloads/points specified dependency just providing name. means know looking . Best practice look jsdelivr website (charpente built top jsdelivr) find correct repository, shown Figure 22.3. create_dependency also create add_<DEP_NAME>_deps function <DEP_NAME>--dependencies.R script open .charpente_options(local = FALSE) allows fine tune behavior. local FALSE,\ncharpente points CDN without downloading files. However, end users require\ninternet connection able access static assets required Shiny app.\nTherefore, package developers prefer option local = TRUE ensure dependencies always accessible.\nExtra parameters like tag control downloaded version since HTML templates\nmay several flavors. always good able test multiple versions select\nbest option.\nFIGURE 22.3: jsdelivr result bulma\nsatisfied, simply run code get latest version, specific\nversion tag used:Moreover, create_dependency able filter files, charpente_options:minified targets files .min, TRUE.bundle targets files containing .bundle, TRUE.lite targets files lite keyword, TRUE.rtl target files .rtl, TRUE. rtl design stands right left\ncommon countries instance.may imagine charpente_options targets .min files default. don’t find\nscript, probably change options. instance, templates\nlike Bootstrap Framework7 bundle.min files (charpente_options(bunlde = TRUE)), whereas bulma doesn’t.can test new dependency:works like charm. chose local option, also get inst/bulma-<BULMA-VERSION> folder\nrelevant files sorted type. bulma-dependencies.R script contains \nnewly created add_bulma_deps function, either pointing CDN local\nfiles, depending chosen strategy:charpente sets roxygen skeleton don’t worry function\nimports.","code":"\nlibrary(htmltools)\nbulma_deps <- htmlDependency(\n  name = ...,\n  version = ...,\n  src = c(href = ...),\n  stylesheet = ...\n)\n\nadd_bulma_deps <- function(tag) {\n  tagList(..., bulma_deps)\n}\n# CDN method \ncreate_dependency(\"bulma\", options = charpente_options(local = FALSE))\ncreate_dependency(\"bulma\", tag = \"0.7.0\", options = charpente_options(local = FALSE))\n\n# local method (default)\ncreate_dependency(\"bulma\")\ndevtools::load_all()\nfindDependencies(add_bulma_deps(div()))\n# local dependency script output\n\n#' bulma dependencies utils\n#'\n#' @description This function attaches bulma. dependencies to the given tag\n#'\n#' @param tag Element to attach the dependencies.\n#'\n#' @importFrom htmltools tagList htmlDependency\n#' @export\nadd_bulma_deps <- function(tag) {\n bulma_deps <- htmlDependency(\n  name = \"bulma\",\n  version = \"0.9.3\",\n  src = c(file = \"bulma-0.9.3\"),\n  stylesheet = \"css/bulma.min.css\",\n  package = \"mypkg\",\n )\n tagList(tag, bulma_deps)\n}\n\n# -----------------------------------------------\n\n# CDN dependencies\n\n#' bulma dependencies utils\n#'\n#' @description This function attaches bulma. dependencies to the given tag\n#'\n#' @param tag Element to attach the dependencies.\n#'\n#' @importFrom htmltools tagList htmlDependency\n#' @export\nadd_bulma_deps <- function(tag) {\n bulma_deps <- htmlDependency(\n  name = \"bulma\",\n  version = \"0.9.3\",\n  src = c(href = \"https://cdn.jsdelivr.net/npm/bulma@0.9.3/\"),\n  stylesheet = \"css/bulma.min.css\"\n )\n tagList(tag, bulma_deps)\n}"},{"path":"workflow-charpente.html","id":"set-up-the-minimal-page-template","chapter":"22 Introduction to {charpente}","heading":"22.3.2 Set up the minimal page template","text":"According bulma documentation, starter page template :Adding charpente magic html_2_R, set path parameter /html get entire template. , replace ... appropriate content (see ). Since copied HTML contains double quotations marks like <p class=\"subtitle\"><\/p>, put string single quotation marks.run time, shiny adds html around UI, thereby making necessary include.\nalso don’t need link(rel = \"stylesheet\", href = \"https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\")\nsince add_bulma_deps already attach dependencies page.prefix parameter defaults TRUE, don’t worry whether tags functions exported\nshiny (see Chapter 2).bulma_page function defined , save R package folder:practice, going step one bulma page templates literally takes three minutes,\ntaken 30 minutes hand. time, may replace\ndependency another version. careful, since charpente make snapshots\nold versions.","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Hello Bulma!<\/title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\">\n  <\/head>\n  <body>\n    <section class=\"section\">\n      <div class=\"container\">\n        <h1 class=\"title\">\n          Hello World\n        <\/h1>\n        <p class=\"subtitle\">\n          My first website with <strong>Bulma<\/strong>!\n        <\/p>\n      <\/div>\n    <\/section>\n  <\/body>\n<\/html>\nhtml_2_R('\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Hello Bulma!<\/title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\">\n  <\/head>\n  <body>\n    <section class=\"section\">\n      <div class=\"container\">\n        <h1 class=\"title\">\n          Hello World\n        <\/h1>\n        <p class=\"subtitle\">\n          My first website with <strong>Bulma<\/strong>!\n        <\/p>\n      <\/div>\n    <\/section>\n  <\/body>\n<\/html>\n  ',\n  path = \"/html\"\n)#> #> ── Converting code ... ──#> #> ✓ Code converted with success.#> ℹ Copy and paste the following R code#> ────────────────────────────────────────────────────────────────────────────────#> tags$html(\n#>   tags$head(\n#>     tags$meta(charset = \"utf-8\"),\n#>     tags$meta(\n#>       name = \"viewport\",\n#>       content = \"width=device-width, initial-scale=1\"\n#>     ),\n#>     tags$title(\"Hello Bulma!\"),\n#>     tags$link(\n#>       rel = \"stylesheet\",\n#>       href = \"https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\"\n#>     )\n#>   ),\n#>   tags$body(tags$section(\n#>     class = \"section\",\n#>     tags$div(\n#>       class = \"container\",\n#>       tags$h1(\n#>         class = \"title\",\n#>         \"Hello World\"\n#>       ),\n#>       tags$p(\n#>         class = \"subtitle\",\n#>         \"My first website with\",\n#>         tags$strong(\"Bulma\"),\n#>         \"!\"\n#>       )\n#>     )\n#>   ))\n#> )\nbulma_page <- function(..., title = NULL) {\n  tagList(\n    tags$head(\n      tags$meta(charset = \"utf-8\"),\n      tags$meta(\n        name = \"viewport\",\n        content = \"width=device-width, initial-scale=1\"\n      ),\n      tags$title(title)\n    ),\n    add_bulma_deps(tags$body(...)) \n  )\n}"},{"path":"workflow-charpente.html","id":"exercise-add-bulmajs","chapter":"22 Introduction to {charpente}","heading":"22.3.3 Exercise: add bulmaJS","text":"stated , bulma contains CSS code! means need\neither develop custom JS code add interactivity rely third party existing API.\nbulma JS one !example written tested bulmaJS 0.12.1.\nfeatures may change future releases.Using charpente, create bulma js dependency. point vizuaalog/bulmajs since bulmajs already exist want. Run following code R console.shown code output, bulmajs minified JS CSS files. Therefore, install dependency, specify charpente_options(minified = FALSE):Notice many files added dependency. , work notifications:keep notification.js remove unnecessary filesOnly keep bulma.js gather plugins 1 script.best practice usually keep need since scripts may heavy load!Run devtools::load_all(). Modify code test newly created dependency. Hint: toggle HTML inspector check appropriate dependencies !","code":"\nget_dependency_assets(\"@vizuaalog/bulmajs\")#> ℹ Trying with https://data.jsdelivr.com/v1/package/npm/@vizuaalog/bulmajs#> ✓ Success!#> ────────────────────────────────────────────────────────────────────────────────#> $url\n#> [1] \"https://cdn.jsdelivr.net/npm/@vizuaalog/bulmajs@0.12.1/dist/\"\n#> \n#> $files\n#>               name                                         hash\n#> 1         alert.js 0Tq89d1U9WqE3xunn1SJLwD3qQvoiDU/ujdOQAxNGME=\n#> 2         bulma.js vbERfMn7TdJ3ZyBfxd+sGJf/fWG/GnWmvMn88FdhfAE=\n#> 3      dropdown.js a4jYH26F8++608JkISGhK0djf4oBOfa+MeKGzi0yM3U=\n#> 4          file.js auA7tFsecFictV+ZLehk+avAsr6QHjDvxXXGEyq2bbw=\n#> 5       message.js xIxQKW6ezuEuLxsEGB+voTYg0ZWjIldWZoZltlJIUjA=\n#> 6         modal.js hBvcaTjLTgUEz5N2JhIeJz2jXagbOVG7KNxn406heMI=\n#> 7        navbar.js kZ1bvDA2eaAtPwCmyZJyQDlhmhXVXGmJot30R6iEXDY=\n#> 8  notification.js DLFq8emqUPpFOt948fP+iWl1/SdJdYRiFA1yLEeowpw=\n#> 9         panel.js NSnEBEPnog3obqVUCnTAn4d9+333/jvQpQsNlYDoYUk=\n#> 10    panelTabs.js YYhbFo+xIExSfq9YIa/gDkKunSv852A+Lay4qbP6/+w=\n#> 11         tabs.js /DBuPkvCsQJ6pg+nqBqwFsOHXphtW12e2TQmIs9+tNU=\n#> \n#> $hasSubfolders\n#> [1] FALSE\ncreate_dependency(..., options = charpente_options(minified = FALSE))\n# Where should the html dependency be added?\nui <- bulma_page()\nserver <- function(input, output, session) {}\nshinyApp(ui, server)"},{"path":"workflow-charpente.html","id":"add-custom-js","chapter":"22 Introduction to {charpente}","heading":"22.3.4 Add custom JS","text":"Notifications always useful send user feedback. Shiny notification system shiny::showNotification. Like Shiny, Bulma notifications entirely built JS (need HTML code).API works follows:Bulma(target).notification(config) creates notification based JSON option list (config).\ntarget expects jQuery selector.show toggles newly instantiated notificationIn words code attaches notification body:following design R interface JavaScript handler (event listener).\ncharpente function creates pieces, namely create_custom_handler:obtain notification-handler.R script:corresponding JavaScript piece notification.js,\nderived golem::add_js_handler function:default, JS file created srcjs directory. special directory\nstore JavaScript files depend package author. instance,\nbulmaJS external dependency unlikely edited package author. reason,\nremains inst folder like external dependencies.","code":"Bulma('body').notification({\n  body: 'Example notification',\n  color: 'info'\n}).show();\ncreate_custom_handler(\"notification\")\nsend_notification_message <- function(\n  id = NULL, \n  options = NULL, \n  session = shiny::getDefaultReactiveDomain()\n) {\n message <- list(\n  # your logic\n )\n \n session$sendCustomMessage(type = \"notification\", message)\n}$(function() {\n  Shiny.addCustomMessageHandler('notification', function(message) {\n \n  });\n});"},{"path":"workflow-charpente.html","id":"add-custom-inputoutput-bindings","chapter":"22 Introduction to {charpente}","heading":"22.3.5 Add custom input/output bindings","text":"part 12.2, created better shinydashboard boxes one\nmay programmatically collapse, close, restore. now, way \nsetup input binding skeleton one copy paste time \ncode. charpente create_input_binding create_output_binding (functions \ncan also find development version golem). Contrary custom handler case,\ncreate_input_binding generates JavaScript piece since R part highly variable \none input another. get plug--play box input binding, call:gives input-boxBinding.js script srcjs folder:function multiple options:initialized FALSE default. TRUE, adds initialized method\nbinding.dev adds console.log elements whenever relevant help debugging\nprocess.event list containing events related binding. default, generates\nclick event without rate policy. add extra events \nlist(name = c(\"click\", \"whatever\"), rate_policy = c(FALSE, TRUE)).Similarly, create_output_binding function creates ready use output binding JS script,\nsrcjs folder (create_output_binding(\"menuOutput\")):","code":"\ncreate_input_binding(\"boxBinding\")var boxBinding = new Shiny.InputBinding();\n$.extend(boxBinding, {\n  find: function(scope) {\n    // JS logic $(scope).find('whatever')\n  },\n  getValue: function(el) {\n    // JS code to get value\n  },\n  setValue: function(el, value) {\n    // JS code to set value\n  },\n  receiveMessage: function(el, data) {\n    // this.setValue(el, data);\n  },\n  subscribe: function(el, callback) {\n    $(el).on('click.boxBinding', function(e) {\n      callback();\n    });\n\n  },\n  unsubscribe: function(el) {\n    $(el).off('.boxBinding');\n  }\n});\nShiny.inputBindings.register(boxBinding, 'shiny.whatever');var menuOutput = new Shiny.OutputBinding();\n$.extend(menuOutput, {\n  find: function(scope) {\n    // JS logic $(scope).find('whatever')\n  },\n  renderValue: function(el, data) {\n    // JS logic\n  }\n});\nShiny.outputBindings.register(menuOutput, 'shiny.whatever');"},{"path":"workflow-charpente.html","id":"organize-your-js","chapter":"22 Introduction to {charpente}","heading":"22.3.6 Organize your JS code","text":"naturally leads us part JS code organization. Shiny developers\nmay lot custom JS scripts, generally bad idea put \ninst. Instead, store srcjs. charpente function providing\ntool bundle JS code production development, build_js():compresses, mangles JS files concatenate one minified file called mypkg.min.js. mode dev, files minified.production mode (mode prod, default), additionally generates source maps.esbuild concatenates file order provided ./srcjs/main.js entry point, automatically generated create_charpente(). configuration provided charpente package.json file.script mypkg.min.js human readable generated source map\nallows reconstruct original code, location web browser srcjs folder, like Shiny JS files. , can access mapped script start debugging process like setting break points.production, variable names, functions, mangled. instance, variable\nconfig called t minified file, may lead confusion.Additionally, build_js creates mypkg-dependencies.R file containing HTML\ndependency pointing newly generated JS file (production):Switching prod dev automatically updates mypkg-dependencies.R JS files.Finally, hood, create_js(), create_input_binding(), create_output_binding() create_custom_handler() add reference newly created script main.js entry point, may look like:export import must called top level script. instance,\nlive inside $( document ).ready(function(...)});, trigger build error.charpente currently provide similar process CSS, still work progress. tools exist like {packer} John Coene, leverages webpack handle JS code.","code":"\n#' mypkg dependencies utils\n#'\n#' @description This function attaches mypkg dependencies to the given tag\n#'\n#' @param tag Element to attach the dependencies.\n#'\n#' @importFrom utils packageVersion\n#' @importFrom htmltools tagList htmlDependency\n#' @export\nadd_mypkg_deps <- function(tag) {\n mypkg_deps <- htmlDependency(\n  name = \"mypkg\",\n  version = packageVersion(\"mypkg\"),\n  src = c(file = \"mypkg-0.0.0.9000\"),\n  script = \"js/mypkg.min.js\",\n  package = \"mypkg\",\n )\n tagList(tag, mypkg_deps)\n}// Gather all files to import here\nimport './init.js'\nimport './widgets.js'\nimport './test.js'"},{"path":"workflow-charpente.html","id":"combine-multiple-dependencies","chapter":"22 Introduction to {charpente}","heading":"22.3.7 Combine multiple dependencies","text":"add_dependencies allows select dependency available ./R folder,\nprovided follow convention <depName>_dependencies.R\n(always case use charpente):instance add_dependencies(div(), deps = c(\"bulma\", \"bulmajs\")) adds bulma (first) \nbulmajs dependencies div tag. may change order see fit, \ntime, order matters. update bulma_page benefit new dependencies:mentioned , add_dependencies belongs mypkg-utils.R script\ndon’t import charpente DESCRIPTION Imports field.","code":"\n#' Attach all created dependencies in the ./R directory to the provided tag\n#'\n#' This function only works if there are existing dependencies. Otherwise,\n#' an error is raised.\n#'\n#' @param tag Tag to attach the dependencies.\n#' @param deps Dependencies to add. Expect a vector of names. If NULL, all dependencies\n#' are added.\n#' @export\n#'\n#' @examples\n#' \\dontrun{\n#'  library(htmltools)\n#'  findDependencies(add_dependencies(div()))\n#'  findDependencies(add_dependencies(div(), deps = \"bulma\"))\n#' }\nadd_dependencies <- function(tag, deps = NULL) {\n  if (is.null(deps)) {\n    temp_names <- list.files(\"./R\", pattern = \"dependencies.R$\")\n    deps <- unlist(\n      lapply(temp_names, strsplit, split = \"-dependencies.R\")\n    )\n  }\n\n  if (length(deps) == 0) stop(\"No dependencies found.\")\n\n  deps <- lapply(deps, function(x) {\n    dep <- eval(\n      parse(\n        text = sprintf(\n          \"htmltools::findDependencies(add_%s_deps(htmltools::div()))\", \n          x\n        )\n      )\n    )\n    dep\n  })\n  # flatten list by one level\n  deps <- unlist(deps, recursive = FALSE)\n\n  htmltools::tagList(tag, deps)\n}\nbulma_page <- function(..., title = NULL) {\n  tagList(\n    tags$head(\n      tags$meta(charset = \"utf-8\"),\n      tags$meta(\n        name = \"viewport\",\n        content = \"width=device-width, initial-scale=1\"\n      ),\n      tags$title(title)\n    ),\n    add_dependencies(\n      tags$body(...),\n      deps = c(\"bulma\", \"mypkg\")\n    ) \n  )\n}"},{"path":"workflow-charpente.html","id":"other-charpente-helpers","chapter":"22 Introduction to {charpente}","heading":"22.3.8 Other {charpente} helpers","text":"Let’s finish section listing useful charpente tools.\nknow create_dependency install external dependency.\nshown earlier, code installs bulma dependencies:However, don’t necessarily know package versions may need\nbulma 0.9.3 bulma 0.7.0. get_dependency_versions allows look \nexisting versions:Specifying latest = TRUE ensures recover last stable version\n(excludes alpha/beta versions).may explore also dependency files get_dependency_assets, even \nspecific version tag:helpful fine tune charpente_options, stated previously. indeed possible\ndon’t want bundles, minified, lite rtl versions scripts. Internally, create_dependency\nrelies get_dependency_assets.get_installed_dependency allows inspect dependencies installed. works\ndependencies created locally, charpente_options(local = TRUE).Finally, one may ask update given dependency. update_dependency , provided \ndependency installed locally. default, installs latest version targeted dependency.\ngives diagnosis comparing current installed version\nlatest available version. 3 possible cases: dependencies date\nupdate_dependency(\"bulma\") yields:installed dependencies outdated (0.7.0 create_dependency(\"bulma\", tag = \"0.7.0\", options = charpente_options(local = TRUE))), function shows targeted version well \nlast one:last use case downgrade, may possible package maintainer realizes\ndependency version unstable. following, bulma-0.9.3 installed\ndowngrade 0.7.0 update_dependency(\"bulma\", version_target = \"0.7.0\"):","code":"\ncreate_dependency(\"bulma\")\nget_dependency_versions(\"bulma\")#> ℹ Trying with https://data.jsdelivr.com/v1/package/npm/bulma#> ✓ Success!#> ────────────────────────────────────────────────────────────────────────────────#>  [1] \"0.9.3\"  \"0.9.2\"  \"0.9.1\"  \"0.9.0\"  \"0.8.2\"  \"0.8.1\"  \"0.8.0\"  \"0.7.5\" \n#>  [9] \"0.7.4\"  \"0.7.3\"  \"0.7.2\"  \"0.7.1\"  \"0.7.0\"  \"0.6.2\"  \"0.6.1\"  \"0.6.0\" \n#> [17] \"0.5.3\"  \"0.5.2\"  \"0.5.1\"  \"0.5.0\"  \"0.4.4\"  \"0.4.3\"  \"0.4.2\"  \"0.4.1\" \n#> [25] \"0.4.0\"  \"0.3.2\"  \"0.3.1\"  \"0.3.0\"  \"0.2.3\"  \"0.2.1\"  \"0.2.0\"  \"0.1.2\" \n#> [33] \"0.1.1\"  \"0.1.0\"  \"0.0.28\" \"0.0.27\" \"0.0.26\" \"0.0.25\" \"0.0.24\" \"0.0.23\"\n#> [41] \"0.0.22\" \"0.0.21\" \"0.0.20\" \"0.0.19\" \"0.0.18\" \"0.0.17\" \"0.0.16\" \"0.0.15\"\n#> [49] \"0.0.14\" \"0.0.13\" \"0.0.12\" \"0.0.11\" \"0.0.10\" \"0.0.9\"  \"0.0.8\"  \"0.0.7\" \n#> [57] \"0.0.6\"  \"0.0.5\"  \"0.0.4\"\nget_dependency_versions(\"bulma\", latest = TRUE)#> ℹ Trying with https://data.jsdelivr.com/v1/package/npm/bulma#> ✓ Success!#> ────────────────────────────────────────────────────────────────────────────────#> [1] \"0.9.3\"\nget_dependency_assets(\"bulma\")#> ℹ Trying with https://data.jsdelivr.com/v1/package/npm/bulma#> ✓ Success!#> ────────────────────────────────────────────────────────────────────────────────#> $url\n#> [1] \"https://cdn.jsdelivr.net/npm/bulma@0.9.3/\"\n#> \n#> $files\n#>                name                                         hash\n#> 1         bulma.css QWzsjhiaNlONAp479EIeaY+tQvrt3v1iOYtBMVZ7RJc=\n#> 2     bulma.css.map 039vv4Mje70ZS33gGww4tRQgCnEKI2C87RydZz8KHig=\n#> 3     bulma.min.css UDtbUHqpVVfXmdJcQVU/bfDEr9xldf3Dbd0ShD0Uf/Y=\n#> 4     bulma-rtl.css TUHS7Sxzy8yNpSvZw/kemcmvnax3Js9PHq1cPdo7i7U=\n#> 5 bulma-rtl.css.map jrQYx00fN25Pxm81v1gPZtcutWE2KvnijIX5nR/V9uc=\n#> 6 bulma-rtl.min.css LchhQrhf3t9LP/bBuIq1SvOWEIiX8bpgQedoeytbSV0=\n#> \n#> $hasSubfolders\n#> [1] TRUEℹ Trying with https://data.jsdelivr.com/v1/package/npm/bulma\n✓ Success!\n──────────────────────────────────────────────────────────────────────────────\nError in update_dependency(\"bulma\") : Versions are identicalℹ Trying with https://data.jsdelivr.com/v1/package/npm/bulma\n✓ Success!\n──────────────────────────────────────────────────────────────────────────────\nℹ current version: 0.7.0 ||\ntarget version: 0.9.3 ||\nlatest version: 0.9.3\n! Upgrading bulma to 0.9.3\n✓ Directory inst/bulma-0.9.3/css successfully created\n! Remove existing file R/bulma-dependencies.Rℹ Trying with https://data.jsdelivr.com/v1/package/npm/bulma\n✓ Success!\n──────────────────────────────────────────────────────────────────────────────\nℹ current version: 0.9.3 ||\ntarget version: 0.7.0 ||\nlatest version: 0.9.3\n! Downgrading bulma to 0.7.0\n✓ Directory inst/bulma-0.7.0/css successfully created\n! Remove existing file R/bulma-dependencies.R"},{"path":"workflow-charpente.html","id":"other-tips","chapter":"22 Introduction to {charpente}","heading":"22.4 Other tips","text":"","code":""},{"path":"workflow-charpente.html","id":"validate-javascript","chapter":"22 Introduction to {charpente}","heading":"22.4.1 Validate JavaScript","text":"finish chapter without mentioning tools validate JavaScript code. JSHint, comes {jstools}. example check shinyMobile JavaScript input bindings :may fine tune jshint_file behavior jshint_options. One often tempted call eval JS code, result JSHint error. option called evil exists disable corresponding test. However, recommend play game, accept error try fix instead cheating options! important remark validation check whether code\n. just focus checking whether code probably execute! test\nJavaScript logic, please refer Chapter 21.2.1.2.\nextremely careful: consider example mentioned section 10.6.2, \nfollowing code valid JavaScript:pass validation step without error:Yet code won’t work since Shiny.notification exist.","code":"\nshinyMobileJS <- system.file(\n  sprintf(\n    \"shinyMobile-%s/js/shinyMobile.js\", \n    packageVersion(\"shinyMobile\")\n  ), \n  package = \"shinyMobile\"\n)\n# jstools print messages to the console\n# We don't want to see them all in the book ...\ninvisible(capture.output(\n  temp <- jshint_file(\n    input = shinyMobileJS, \n    options = jshint_options(\n      jquery = TRUE, \n      globals = list(\"Shiny\", \"app\")\n    )\n  )\n))\n\nhead(tibble::as_tibble(temp$errors[, c(\"line\", \"reason\")]))#>  [38;5;246m# A tibble: 6 x 2 [39m\n#>    line reason                                                                  \n#>    [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<chr> [39m [23m                                                                   \n#>  [38;5;250m1 [39m    33 'template literal syntax' is only available in ES6 (use 'esversion: 6').\n#>  [38;5;250m2 [39m    37 'template literal syntax' is only available in ES6 (use 'esversion: 6').\n#>  [38;5;250m3 [39m    41 'template literal syntax' is only available in ES6 (use 'esversion: 6').\n#>  [38;5;250m4 [39m    42 'template literal syntax' is only available in ES6 (use 'esversion: 6').\n#>  [38;5;250m5 [39m    52 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: …\n#>  [38;5;250m6 [39m    64 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: …const sendNotif = (message, type, duration) => {\n  Shiny.notification.show({\n    html: `<strong>${message}<\/strong>`,\n    type: type,\n    duration: duration\n  });\n};\n\nsendNotif('Hello')\njshint(\n  \"const sendNotif = (message, type, duration) => {\n  Shiny.notification.show({\n    html: `<strong>${message}<\/strong>`,\n    type: type,\n    duration: duration\n  });\n  };\n  sendNotif('Hello');\n  \",\n  options = jshint_options(\n    esversion = 6,\n    jquery = TRUE, \n    globals = list(\"Shiny\", \"app\")\n  )\n)$errors#> NULL"},{"path":"workflow-charpente.html","id":"beautify-js-code","chapter":"22 Introduction to {charpente}","heading":"22.4.2 Beautify JS code","text":"work RStudio IDE, JS code maybe sometimes messy bad indentation.\njstools also provides function addin fix problem. prettier_js(code) \nprettier_file(input = \"path//file.js\", output = \"path//reformated.js\") .\noften use Prettier addin way faster typing function call (Figure 22.4).\nFIGURE 22.4: Better JS formatting\n","code":""},{"path":"workflow-charpente.html","id":"test-js-code","chapter":"22 Introduction to {charpente}","heading":"22.4.3 Test JS code","text":"charpente provides starting point test JS code test_js(), leveraging mocha library. tests assumed contained within srcjs/test folder. Inside, find test_basic.js, created upon package initialization, boilerplate:test starts describe function, similar testthat context() function, provide general idea behind test. equivalent test_that(), describe specific feature tested. Inside, write series instructions, failing, others passing. Naturally, mocha works better assertions libraries like expect.js .js, whose details scope book.","code":"describe('Basic test', () => {\n  it('should not fail', (done) => {\n    done();\n  });\n});"},{"path":"mobile-shiny-intro.html","id":"mobile-shiny-intro","chapter":"23 Introduction","heading":"23 Introduction","text":"","code":""},{"path":"mobile-shiny-intro.html","id":"case-study-objectives","chapter":"23 Introduction","heading":"23.1 Case study objectives","text":"previously mentioned templates, except Framework7, best suited desktop usage.\nEven though like bs4Dash work quite well mobile platforms,\ndon’t get native look feel mobile apps like twitter,\nshown Figure 23.1.\nFIGURE 23.1: Twitter design mobile devices\ngoal short chapter introduce mobile development Shiny. going \nreconstruct shinyMobile package help charpente \nlearnt since beginning book.","code":""},{"path":"mobile-shiny-intro.html","id":"about-mobile-development","chapter":"23 Introduction","heading":"23.2 About mobile development","text":"Mobile app development consists developing application mobile devices \ntablets, phones (Android, iPadOS). call native app dedicated specified\nplatform. instance, iOS applications developed using Objective-C Swift whereas Android apps mainly developed\nJava. apps faster web apps since exploit full capabilities platform. UI also\nconsistent, may installed via stores (App store, google play), work offline.\nmain issue need know multiple languages maintain multiple code bases.Isn’t something pure web apps native apps?","code":""},{"path":"mobile-shiny-intro.html","id":"progressive-web-apps","chapter":"23 Introduction","heading":"23.3 Progressive web apps","text":"","code":""},{"path":"mobile-shiny-intro.html","id":"introduction-4","chapter":"23 Introduction","heading":"23.3.1 Introduction","text":"Progressive web apps (PWA) improve classic web apps\ncapabilities able full screen display, installable, provide launch screen,\nlike native apps consistent UI. must obey three rules:capable: media control, file system access, …reliable: fast usable offline. Transparent failures.installable: Standalone use, launch user’s home screen.","code":""},{"path":"mobile-shiny-intro.html","id":"what-does-installable-mean","chapter":"23 Introduction","heading":"23.3.2 What does “installable” mean?","text":"several criteria meet installable state:app must served HTTPS.Include manifest, JSON file specifying app metadata like name, short name (short_name), icons use\nuser’s home screen launch screen (displayed image first paint),\nstart url (start_url), display mode (generally standalone),\nsplash screen background color (background_color)…registered service worker, can cache app content, thereby making sure provide offline\nsupport.criteria fulfilled, web browser may shows installation prompt start process.","code":""},{"path":"mobile-shiny-intro.html","id":"how-to-develop-a-pwa","chapter":"23 Introduction","heading":"23.3.3 How to develop a PWA?","text":"Nowadays, exist tools develop native looking apps common language, JavaScript.\ncase Framework7. shinyMobile (Figure 23.2) developed using template. tools like Google PWA compatibility script\nsignificantly reduces pain make apps installable multiple platforms.\nFIGURE 23.2: Twitter design mobile devices\nLet’s meet next part start mobile development journey!","code":""},{"path":"mobile-shinyMobile.html","id":"mobile-shinyMobile","chapter":"24 Reconstruct {shinyMobile}","heading":"24 Reconstruct {shinyMobile}","text":"section written tested Framework7 5.7.14.\nfeature may change future releases.\nHowever, fear ! process follows general principles.reminder, code examples shown throughout chapter gathered {OSUICode} package accessible .","code":""},{"path":"mobile-shinyMobile.html","id":"introduction-to-framework7","chapter":"24 Reconstruct {shinyMobile}","heading":"24.1 Introduction to Framework7","text":"Framework7 HTML/CSS/JavaScript engine fuels shinyMobile.\nflexible toolkit build native looking web apps progressive\nweb apps (PWA). incredibly rich ecosystem:Provides core JavaScript API, React API, Vue API, Svelte API.CLI (command line interface) ease creation PWA, provide boilerplate starter templates.full set native icons.Hundreds components different look iOS material design, even desktop.comprehensive set documentation.supportive community.","code":""},{"path":"mobile-shinyMobile.html","id":"initiate-the-package","chapter":"24 Reconstruct {shinyMobile}","heading":"24.2 Initiate the package","text":"time initialize package structure extract Framework7 dependencies.\nget idea package file structure, run:browse package page,\nprovides details necessary components. going use bundle version since\nlite approach missing several components, particularly Framework7 widgets. therefore need framework7.bundle.min.js framework7.bundle.min.css, create_dependency() default options:package created opened, download Framework7 dependencies, specifying\nfollowing version, 5.7.14, targeting bundle.min files:Besides, generates framework7-dependencies.R script:","code":"\nlibrary(charpente)\nget_dependency_assets(\"framework7\", tag = \"5.7.14\") #> $url\n#> [1] \"https://cdn.jsdelivr.net/npm/framework7@5.7.14/\"\n#> \n#> $files\n#>                                 name\n#> 1              framework7.bundle.css\n#> 2          framework7.bundle.min.css\n#> 3          framework7.bundle.rtl.css\n#> 4      framework7.bundle.rtl.min.css\n#> 5                     framework7.css\n#> 6                 framework7.min.css\n#> 7                 framework7.rtl.css\n#> 8             framework7.rtl.min.css\n#> 9             framework7.bundle.d.ts\n#> 10              framework7.bundle.js\n#> 11          framework7.bundle.min.js\n#> 12      framework7.bundle.min.js.map\n#> 13                   framework7.d.ts\n#> 14                     framework7.js\n#> 15                 framework7.min.js\n#> 16             framework7.min.js.map\n#> 17       framework7-lite.bundle.d.ts\n#> 18         framework7-lite.bundle.js\n#> 19     framework7-lite.bundle.min.js\n#> 20 framework7-lite.bundle.min.js.map\n#> 21              framework7-lite.d.ts\n#> 22                framework7-lite.js\n#> 23            framework7-lite.min.js\n#> 24        framework7-lite.min.js.map\n#>                                            hash\n#> 1  YA5mseIVhInliYtikYRZXMu02ZtTL0aTZDgXLyekyVE=\n#> 2  P0Yv9hUd1e2zLYv9F3eEiJ29wz3ZOSIbdHGEj3Jwzyo=\n#> 3  Jf84PHy+HQHHMfpE6eFK+m+R/ZiJcJAIJ3KxJK/3VXk=\n#> 4  77ICWQzoVsU4kBzOaltDqMzYsGJRQnFWLOakCMK+2l0=\n#> 5  lBrADLIA45Kk+regpi8+6sBwQyw4qgTl3mH8MGxUTeI=\n#> 6  fYS3dYPbdZeiQAM9wTUQiLP82ZTcVoA970gb2Ov7EFY=\n#> 7  Rkt1PlgdYPX/QdVNkrWLKLkeHpbi2+RB85QU68HcfRc=\n#> 8  TxiXOzoiF7dTC9KGoHXtjal+H/6KCQaaJ1bejNhgx1o=\n#> 9  NDeSbfVb8gqcD5GjKn4eM9EBw2bWvwMH/hXO7bDqgwc=\n#> 10 eeyt4w3J20JKKbIjZU5rVdWCMOpCnkV5YfETCK6TG9I=\n#> 11 k0i6vZYYH7MIgZvxSp4eQFS2HCEXy1ae5BF/YWSMyys=\n#> 12 W7ZS2O2d0HDT2wg6eMGE1JVLK94go1DprhQl6PTgY7g=\n#> 13 NDeSbfVb8gqcD5GjKn4eM9EBw2bWvwMH/hXO7bDqgwc=\n#> 14 LnwOSNWeY9ay/kP7HqcMFUe+hgNrR+DuA5V4xFWXJlA=\n#> 15 FJ+5ZHj8V2fzT7Lts0ELaWSC4ZJtmxQzRuWeWwke9a0=\n#> 16 LgaeFFaNlGJazQMp8ZFsI1LTfTOtaNIYzP0DSFrc4ao=\n#> 17 NDeSbfVb8gqcD5GjKn4eM9EBw2bWvwMH/hXO7bDqgwc=\n#> 18 EiVuejoa3kTItzhZ5mw7WhB+Ah75R5HpM+34hijj7wA=\n#> 19 LKMinGOXYGPI4wdD4ZIPp5kx84PP3f7EkD8dUxFPRAI=\n#> 20 Rf7iPAlJpZGCxDCyGFL5Ofr+USJ0Wda9RavvMgKQnyY=\n#> 21 NDeSbfVb8gqcD5GjKn4eM9EBw2bWvwMH/hXO7bDqgwc=\n#> 22 m5y65vVROjQsoTp4QgDQ8fqaeRtd/iNZAqpmIDOJ5bY=\n#> 23 liT0rss/O3G2MtXQ3/zAu+8jmTrrPhwiqV+Pd58qJJo=\n#> 24 wrr0UFxN7RxGa/uk0gzGMHRkFi6GVJY+DdymSk1Ujgg=\n#> \n#> $hasSubfolders\n#> [1] TRUE\npath <- file.path(tempdir(), \"shinyMobile\")\ncreate_charpente(path, license = \"mit\")\ncreate_dependency(\n  \"framework7\", \n  tag = \"5.7.14\", \n  options = charpente_options(bundle = TRUE)\n)\nadd_framework7_deps <- function(tag) {\n framework7_deps <- htmltools::htmlDependency(\n  name = \"framework7\",\n  version = \"5.7.14\",\n  src = c(file = \"framework7-5.7.14\"),\n  script = \"js/framework7.bundle.min.js\",\n  stylesheet = \"css/framework7.bundle.min.css\",\n  package = \"shinyMobile\",\n )\n htmltools::tagList(tag, framework7_deps)\n}"},{"path":"mobile-shinyMobile.html","id":"framework7-layouts","chapter":"24 Reconstruct {shinyMobile}","heading":"24.3 Framework7 Layouts","text":"Framework7 three predefined layouts (Figure 24.1):Single page layout.Multi tabs layout.Split layout, targeting tablet/desktop. composed sidebar main panel.\nFIGURE 24.1: Framework7 layouts\nLet’s start simple choose single page layout, whose corresponding HTML \ngiven :head tag contains meta tags (required PWA features) discussed next Chapter 25.\nimportant part dependencies included. Note \norder matters: Framework7 dependencies go first, dependencies follow.\nbody tag composed several layers. first one app root element, \ncrucial template initialization. ’ll come back point next section.\n, find view component, inside located page, hosting\nnavbar, toolbar (bottom bar) page content. Although, Framework7 inserts JavaScript code end body, can include head well.Leveraging charpente html_2_R(), convert code R extract f7_page function. replace title content title parameter, paying attention remove CSS JS links, already included add_dependencies() function applied body. page content contained ... parameter.\nalso move navbar toolbar content create two layout functions:navbar toolbar components. navbar title parameter \ntoolbar may contain items ... parameter. practice may contain elements,\nenough now:Don’t forget regularly insert roxygen documentation insert roxygen skeleton\nRStudio feature.point, can try run simple shiny app. Best practice save app.R file \ninst/examples/simple folder:displays nothing, returns error. actually forgot app initialization step.","code":"<!DOCTYPE html>\n<html>\n  <head>\n    <!-- Required meta tags-->\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, \n      initial-scale=1, maximum-scale=1, minimum-scale=1, \n      user-scalable=no, viewport-fit=cover\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <!-- Color theme for statusbar (Android only) -->\n    <meta name=\"theme-color\" content=\"#2196f3\">\n    <!-- Your app title -->\n    <title>My App<\/title>\n    <!-- Path to Framework7 Library Bundle CSS -->\n    <link rel=\"stylesheet\" \n      href=\"path/to/framework7.bundle.min.css\">\n    <!-- Path to your custom app styles-->\n    <link rel=\"stylesheet\" href=\"path/to/my-app.css\">\n  <\/head>\n  <body>\n    <!-- App root element -->\n    <div id=\"app\">\n\n      <!-- Your main view, should have \"view-main\" class -->\n      <div class=\"view view-main\">\n        <!-- Initial Page, \"data-name\" contains page name -->\n        <div data-name=\"home\" class=\"page\">\n\n          <!-- Top Navbar -->\n          <div class=\"navbar\">\n            <div class=\"navbar-bg\"><\/div>\n            <div class=\"navbar-inner\">\n              <div class=\"title\">Awesome App<\/div>\n            <\/div>\n          <\/div>\n\n          <!-- Bottom Toolbar -->\n          <div class=\"toolbar toolbar-bottom\">\n            <div class=\"toolbar-inner\">\n              <!-- Toolbar links -->\n              <a href=\"#\" class=\"link\">Link 1<\/a>\n              <a href=\"#\" class=\"link\">Link 2<\/a>\n            <\/div>\n          <\/div>\n\n          <!-- Scrollable page content -->\n          <div class=\"page-content\">\n            <p>Page content goes here<\/p>\n            <!-- Link to another page -->\n            <a href=\"/about/\">About app<\/a>\n          <\/div>\n        <\/div>\n      <\/div>\n    <\/div>\n    <!-- Path to Framework7 Library Bundle JS-->\n    <script type=\"text/javascript\" \n      src=\"path/to/framework7.bundle.min.js\"><\/script>\n    <!-- Path to your app js-->\n    <script type=\"text/javascript\" \n      src=\"path/to/my-app.js\"><\/script>\n  <\/body>\n<\/html>\nf7_page <- function(..., navbar, toolbar, title = NULL) {\n  tagList(\n    tags$head(\n      tags$meta(charset = \"utf-8\"),\n      tags$meta(\n        name = \"viewport\",\n        content = \"width=device-width, initial-scale=1, \n        maximum-scale=1, minimum-scale=1, user-scalable=no, \n        viewport-fit=cover\"\n      ),\n      tags$meta(\n        name = \"apple-mobile-web-app-capable\",\n        content = \"yes\"\n      ),\n      tags$meta(\n        name = \"theme-color\",\n        content = \"#2196f3\"\n      ),\n      tags$title(title)\n    ),\n    add_dependencies(\n      tags$body(\n        tags$div(\n          id = \"app\",\n          tags$div(\n            class = \"view view-main\",\n            tags$div(\n              class = \"page\",\n              navbar,\n              toolbar,\n              tags$div(\n                class = \"page-content\",\n                ...\n              )\n            )\n          )\n        )\n      ),\n      deps = \"framework7\",\n    )\n  )\n}\nf7_navbar <- function(title) {\n  tags$div(\n    class = \"navbar\",\n    tags$div(class = \"navbar-bg\"),\n    tags$div(\n      class = \"navbar-inner\",\n      tags$div(\n        class = \"title\",\n        title\n      )\n    )\n  )\n}\n\nf7_toolbar <- function(...) {\n  tags$div(\n    class = \"toolbar toolbar-bottom\",\n    tags$div(\n      class = \"toolbar-inner\",\n      ...\n    )\n  )\n}\ndevtools::load_all()\nlibrary(shiny)\n\nui <- f7_page(\n  \"Test\",\n  navbar = f7_navbar(\"Title\"),\n  toolbar = f7_toolbar(),\n  title = \"shinyMobile\"\n)\n\nserver <- function(input, output, session) {}\nshinyApp(ui, server)"},{"path":"mobile-shinyMobile.html","id":"app-initialization-1","chapter":"24 Reconstruct {shinyMobile}","heading":"24.4 App initialization","text":"step mandatory activate template components (router, panels, …).\ncreate custom script create_js, automatically updates charpente provided main.js entry point:add following piece JS inside init.js:Importantly, made app global access scopes. currently\neasy way workaround issue.code inside init.js wrapped function waits document ready interacting DOM. necessary since configuration retrieved script DOM element inserted application starts, thus immediately available. try remove $( document ).ready(function(...)});, error raised since configuration properly retrieved.script creates app instance necessary leverage Framework7 methods,\ninitialize widgets, interact layout elements listen app events (offline, online, …). Since root element direct child body, root property \nmandatory. full configuration list may found .\nnext step consists initializing main view, add line right app creation:done, compress corresponding JS file create shinyMobile.min.js code,\nupdate f7_page include new dependency, Framework7 one,\ndocument package setup package imports:working app shown Figure 24.2.\nright panel displays developer tools inside can seamlessly debug JS code, \nleveraging source maps.\nFIGURE 24.2: First working {shinyMobile} app\nnow, can add welcome notification message notification API. two steps:Create notification instance app.notification.create(parameters).Tell app open notification start app.notification.open().add following code init.js call build_js():opens app start closes swipe gesture. Framework7 API quite easy \nunderstand extremely powerful. Chapter 26 gives better introduction main Framework7 widgets.","code":"\ncreate_js(\"init\")$( document ).ready(function() {\n  app = new Framework7({\n    // App root element\n    root: '#app',\n    // App Name\n    name: 'My App',\n    // other options\n  });\n});let mainView = app.views.create('.view-main');\nbuild_js()\n\n# updated f7_page\nf7_page <- function(..., navbar, toolbar, title = NULL) {\n  tagList(\n    tags$head(\n      tags$meta(charset = \"utf-8\"),\n      tags$meta(\n        name = \"viewport\",\n        content = \"width=device-width, initial-scale=1, \n        maximum-scale=1, minimum-scale=1, user-scalable=no, \n        viewport-fit=cover\"\n      ),\n      tags$meta(\n        name = \"apple-mobile-web-app-capable\",\n        content = \"yes\"\n      ),\n      tags$meta(\n        name = \"theme-color\",\n        content = \"#2196f3\"\n      ),\n      tags$title(title)\n    ),\n    add_dependencies(\n      tags$body(\n        tags$div(\n          id = \"app\",\n          tags$div(\n            class = \"view view-main\",\n            tags$div(\n              class = \"page\",\n              navbar,\n              toolbar,\n              tags$div(\n                class = \"page-content\",\n                ...\n              )\n            )\n          )\n        )\n      ),\n      deps = c(\"framework7\", \"shinyMobile\")\n    )\n  )\n}\n\n# Initalize NAMESPACE file\ndevtools::document()let notification = app.notification.create({\n  text: 'Welcome to shinyMobile!',\n  on: {\n    opened: function () {\n      console.log('Notification opened')\n    }\n  }\n}).open();"},{"path":"mobile-shinyMobile.html","id":"app-configuration","chapter":"24 Reconstruct {shinyMobile}","heading":"24.5 App configuration","text":"app object tremendous amount methods parameters. section, briefly describe significant set .\nAmong parameters, metadata parameters like name version. app initialized, app parameters accessible . notation. instance, set version number, accessible later app.version.","code":""},{"path":"mobile-shinyMobile.html","id":"global-theme","chapter":"24 Reconstruct {shinyMobile}","heading":"24.5.1 Global theme","text":"theme controls overall app design (Figure 24.3):ios corresponds iOS design.md stands material design.aurora desktop optimized design.parameter set auto, Framework7 detects \ncurrent device stored app.device, accordingly adapts design. Nothing prevents forcing iOS layout android devices, even though quite irrelevant. many properties review.\nFIGURE 24.3: Framework7 skins: iOS (left), md (right).\n","code":""},{"path":"mobile-shinyMobile.html","id":"events-1","chapter":"24 Reconstruct {shinyMobile}","heading":"24.5.2 Events","text":"app able emit events whenever relevant like init, resize, online, offline, \nallows add interactivity:","code":"app = new Framework7({\n  on: {\n    init: function () {\n      console.log('App initialized');\n    },\n    // other events\n  }\n});"},{"path":"mobile-shinyMobile.html","id":"components-configuration","chapter":"24 Reconstruct {shinyMobile}","heading":"24.5.3 Components configuration","text":"Framework7 components highly customizable. Yet, know \nparameters going change, good idea make global share \nacross instances. example, notifications global options. Let’s add code\ninit.js script directly inside var app = new Framework7({ ... }):means notifications close three seconds App title.\nadd another notification init.js script delay one second \ntest global feature. Note use internal Framework7 utils app.utils.nextTick, nothing setTimeout function. point, init.js look like :","code":"notification: {\n  title: 'My App',\n  closeTimeout: 3000,\n}$( document ).ready(function() {\n // create app instance\n  app = new Framework7({\n    // App root element\n    root: '#app',\n    // App Name\n    name: 'My App',\n    // other options\n    notification: {\n      title: 'My App',\n      closeTimeout: 3000,\n    }\n  });\n\n  // init main view\n  let mainView = app.views.create('.view-main');\n\n\n  let notification = app.notification.create({\n    text: 'Hello, how are you?',\n    on: {\n      opened: function () {\n        console.log('Notification opened');\n      }\n    }\n  }).open();\n  \n  \n  let otherMessage = app.notification.create({\n    text: 'You look great!'\n  });\n  \n  // equivalent to setTimeout ...\n  app.utils.nextTick(function() {\n    otherMessage.open();\n  }, 1000);\n  \n});"},{"path":"mobile-shinyMobile.html","id":"allow-end-user-configuration","chapter":"24 Reconstruct {shinyMobile}","heading":"24.5.4 Allow end-user configuration","text":"sections, described parameters configure app. Yet,\nsetup values directly JavaScript. allow end user provide\nparameters?idea following:create options argument f7_page function accepts list\nparameters.convert JSON format store tag, ideally next body element.recover data JS side update app initialization method.f7_page may accordingly modified:code still deserves explanations, even though exploit method already defined section 12.2. convert options list JSON jsonlite::toJSON embed script tag.\ndata-attribute id attribute guarantees uniqueness configuration script:create intermediate body_tag component insert configuration tag.\nJS side, data collection must occur app initialization quite easy\njQuery find method:accordingly update app initialization:happens user forgets supply version number? data.version undefined\napp still works! biggest advantage approach fact TRUE\nFALSE (R) converted true false (JS), avoids unnecessary conversion steps.\nHowever, still missing many potential configuration options. instance, code,\nroot, name, version, theme, notifications, touch considered. user\nprovides option, ignored.theory, make sure elements considered:assumed user exactly knows provide list, especially mandatory elements.\nKnowing tremendous number options, might slightly complex new user.\nsuggest extract important components direct f7_page parameters \nkeep less important parameters options list. example,\nthink theme crucial (truly ), :makes API bit accessible (event though complex maintain)\nneed add one line documentation roxygen part. Alternatively, also put parameters options provide default value f7_page like:write app = new Framework7(config); JS side.good compromise since avoids create many parameters, without sacrificing \ndocumentation. Don’t forget since config object,\nmay add properties, methods, fly . notation app.utils.extend.finally may ask put dark, color filled options list given \npart app API parameters. unknown parameter considered\nFramework7 class, can definitely keep , easier treat JS side.","code":"\nf7_page <- function(..., navbar, toolbar, title = NULL, \n                    options = NULL) {\n\n  config_tag <- tags$script(\n    type = \"application/json\",\n    `data-for` = \"app\",\n    jsonlite::toJSON(\n      x = options,\n      auto_unbox = TRUE,\n      json_verbatim = TRUE\n    )\n  )\n\n  # create body_tag\n  body_tag <- tags$body(\n    tags$div(\n      id = \"app\",\n      tags$div(\n        class = \"view view-main\",\n        tags$div(\n          class = \"page\",\n          navbar,\n          toolbar,\n          tags$div(\n            class = \"page-content\",\n            ...\n          )\n        )\n      )\n    ),\n    config_tag\n  )\n\n  tagList(\n    tags$head(\n      tags$meta(charset = \"utf-8\"),\n      tags$meta(\n        name = \"viewport\",\n        content = \"width=device-width, initial-scale=1, \n        maximum-scale=1, minimum-scale=1, user-scalable=no, \n        viewport-fit=cover\"\n      ),\n      tags$meta(\n        name = \"apple-mobile-web-app-capable\",\n        content = \"yes\"\n      ),\n      tags$meta(\n        name = \"theme-color\",\n        content = \"#2196f3\"\n      ),\n      tags$title(title)\n    ),\n    add_dependencies(\n      body_tag,\n      deps = c(\"framework7\", \"shinyMobile\")\n    )\n  )\n}\nconfig_tag <- shiny::tags$script(\n  type = \"application/json\",\n  `data-for` = \"app\",\n  jsonlite::toJSON(\n    x = options,\n    auto_unbox = TRUE,\n    json_verbatim = TRUE\n  )\n)let config = $(document).find(\"script[data-for='app']\");\nconfig = JSON.parse(config.html());app = new Framework7({\n  // App root element\n  root: '#app',\n  // App Name\n  name: 'My App',\n  version: config.version,\n  // other options\n  theme: config.theme,\n  notification: {\n    title: 'My App',\n    closeTimeout: 3000,\n  }\n});app = new Framework7(config);\nf7_page <- function(..., navbar, toolbar, \n                    theme = c(\"ios\", \"md\", \"aurora\"), \n                    title = NULL, options = NULL) {\n\n  theme <- match.arg(theme)\n  options$theme <- theme\n  \n  config_tag <- shiny::tags$script(\n    type = \"application/json\",\n    `data-for` = \"app\",\n    jsonlite::toJSON(\n      x = options,\n      auto_unbox = TRUE,\n      json_verbatim = TRUE\n    )\n  )\n  \n# ...\n  \n}\nf7_page <- function(\n  # other parameters are not mentioned\n  options = list(\n    theme = c(\"ios\", \"md\", \"auto\", \"aurora\"),\n    dark = TRUE,\n    filled = FALSE,\n    color = \"#007aff\",\n    iosTranslucentBars = FALSE,\n    navbar = list(\n      iosCenterTitle = TRUE,\n      hideOnPageScroll = TRUE\n    ),\n    toolbar = list(\n      hideOnPageScroll = FALSE\n    ),\n    # remaining options ...\n  )\n) {\n  # function body ...\n}"},{"path":"mobile-shinyMobile.html","id":"modify-configuration","chapter":"24 Reconstruct {shinyMobile}","heading":"24.5.5 Modify configuration","text":"previously stated, app configuration passed initialization process, \nnew Framework7(config). user wants programmatically change options\napp running?Since app parameters located app.params, idea extend list:example changes default buttons text modal dialog.far know, options won’t work like global theme, \nrequire re-initialize app possible.","code":"let newParams = {\n  dialog: {\n    buttonOk:  \"Yeaaaah!\",\n    buttonCancel: \"Ouuups!\"\n  }\n}\napp.utils.extend(app.params, newParams);"},{"path":"mobile-shinyMobile.html","id":"mobile-global-data","chapter":"24 Reconstruct {shinyMobile}","heading":"24.5.6 Global data and methods","text":"Framework7 data parameters allows store global elements, data, use different scripts. illustrate feature, consider tooltip example. tooltip help text generally displayed hover (click) specific element. commonly used improve user experience websites. Framework7 provides two tooltips APIs:purely UI side API tooltip attached tag.server side API tooltip dynamically injected page content.first approach obviously interesting us since involve \nsingle line JS, second approach heavily relies app.data object. one\nchoose explain, shinyMobile package. R side, consider two functions:addF7Tooltip() sends custom message JS called add_tooltip. \nmessage composed tooltip options (content, …), well selector\napply tooltip (id selector custom CSS selector).updateF7Tooltip() sends custom message JS, update_tooltip change\ntooltip state (active/inactive) content.code defined :Framework7 provide native enable/disable method, means \ntooltip activated given element, visible forever, unless destroyed.\nmain purpose updateF7Tooltip() avoid , temporarily disabling tooltip \nreactivating later.JS part activate tooltip put tooltips.js (created via init_js(\"tooltips\")):mentioned earlier, fine since message JSON element. can also chain methods\nlike app.tooltip.create(message).show();. however problem: add_tooltip fired\ntime user triggers specific element R side. means tooltip instance \ncreated time, optimal. fix issue, set tooltips cache app.data\nobject accordingly modify init.js:Importantly, app.data must function returning one multiple elements. first\nreturn empty tooltips array update tooltips.js file :Check tooltip instance already cached app.data creating instance.\nalready , nothing done.time create new instance, save app.data cache retrieve later.Notice store current instance: app.data.tooltips[message.targetEl] = t;.\nreference given message.targetEl target apply tooltip .\nmultiple tooltips created, may search target name, \nreasonable choice. instance app.data.tooltips[\"#mybutton\"] points \ntooltip associated element #mybutton id. far good!enable/disable tooltip ? updateF7Tooltip()\nR function role. corresponding JS handler:Checks specified tooltip instance exists update case.Handles two situations: update tooltip content toggle tooltip visibility.\nactually just showing/hiding tooltip. Remember tooltip shown\nhover applying hide visible tooltip effect user\nhovers tooltip, useless.updateF7Tooltip() sends three elements JS, namely tooltip target element message.targetEl, optional new text, message.text action perform message.action (either update toggle state). Let’s first update tooltip element. tooltip.js, add:corresponding tooltip instance accessed app.data app.data.tooltips[message.targetEl]\nstored local variable, t. apply setText user action corresponds update.handle toggle case. first thing check whether current instance active.\napp.tooltip.get method targeted message.targetEl. instance \nalive, get object, obtain undefined exist. call app.tooltip.destroy method\ncurrent instance:Wait moment! two issues code. t variable pointing\ncurrent instance, destroy instance, t point destroyed element next time called, action like setText raise error. trick create shallow clone Object.assign won’t affected destroy method, save shallow clone app.data cache destroy old instance. Therefore update tooltips.js script:also check whether instance alive updating . still missing re-activation step consists rebuilding tooltip instance based cached data app.data.tooltips[message.targetEl] previously saved. parameters contained params object (instance element):final JS code :Similarly methods hosts global app methods, functions may re-use different parts. Like app.data, access app.methods.Since Framework7 6.0.0, app.data removed favor flexible alternative called store. documented .","code":"\nvalidateSelector <- function(id, selector) {\n  if (!is.null(id) && !is.null(selector)) {\n    stop(\"Please choose either target or selector!\")\n  }\n}\n\n\nsendCustomMessage <- function(type, message, session) {\n  session$sendCustomMessage(\n    type,\n    jsonlite::toJSON(\n      message,\n      auto_unbox = TRUE,\n      json_verbatim = TRUE\n    )\n  )\n}\n\n\"%OR%\" <- function(a, b) if (!is.null(a)) a else b\n\naddF7Tooltip <- function(\n  id = NULL, \n  selector = NULL, options,\n  session = shiny::getDefaultReactiveDomain()\n) {\n  # We use already defined popover functions\n  validateSelector(id, selector)\n  if (!is.null(id)) id <- paste0(\"#\", session$ns(id))\n  options$targetEl <- id %OR% selector\n  sendCustomMessage(\"add_tooltip\", options, session)\n}\n\n\nupdateF7Tooltip <- function(\n  id = NULL, \n  selector = NULL,\n  action = c(\"toggle\", \"update\"), \n  text = NULL,\n  session = shiny::getDefaultReactiveDomain()\n) {\n  validateSelector(id, selector)\n  if (!is.null(id)) id <- paste0(\"#\", session$ns(id))\n  targetEl <- id %OR% selector\n  message <- dropNulls(\n    list(\n      targetEl = targetEl, \n      action = action, \n      text = text\n    )\n  )\n  sendCustomMessage(\"update_tooltip\", message, session)\n}Shiny.addCustomMessageHandler('add_tooltip', function(message) {\n  app.tooltip.create(message).show();\n});config.data = function() {\n  return {\n    tooltips: []\n  };\n};Shiny.addCustomMessageHandler('add_tooltip', function(message) {\n  // We store all created instances in app data so that we don't\n  // recreate them later if they exist ...\n  if (app.data.tooltips[message.targetEl] === undefined) {\n    // create instance\n    let t = app.tooltip.create(message);\n    // Open tooltip\n    t.show();\n    // Storage in app data (tooltips array)\n    app.data.tooltips[message.targetEl] = t;\n  }\n});Shiny.addCustomMessageHandler(\n  'update_tooltip', function(message) {\n  // Don't do anything if the instance is not there in app data\n    if (app.data.tooltips[message.targetEl] !== undefined) {\n      let t = app.data.tooltips[message.targetEl];\n      if (message.action === \"update\") {\n        t.setText(message.text);\n      }\n    }\n});Shiny.addCustomMessageHandler(\n  'update_tooltip', function(message) {\n    // Don't do anything if the instance is not there in app data\n    if (app.data.tooltips[message.targetEl] !== undefined) {\n      let t = app.tooltip.get(message.targetEl);\n      if (message.action === \"update\") {\n        t.setText(message.text);\n      } else if (message.action === \"toggle\") {\n        // destroy\n        if (t) {\n          t.destroy();\n        }\n      }\n    }\n});Shiny.addCustomMessageHandler(\n  'update_tooltip', function(message) {\n    if (app.data.tooltips[message.targetEl] !== undefined) {\n      // Try to get the instance\n      let t = app.tooltip.get(message.targetEl);\n      if (message.action === \"update\") {\n        if (t) {\n          t.setText(message.text);\n        }\n      } else if (message.action === \"toggle\") {\n        if (t) {\n          // create copy that won't be modified if \n          // t is destroyed!\n          let cachedTooltip = Object.assign({}, t);\n          // save copy to replace the deleted one in the app data\n          app.data.tooltips[message.targetEl] = cachedTooltip;\n          // destroy current instance\n          t.destroy();\n        } \n      }\n    }\n});// Capture parameters\nlet pars = app.data.tooltips[message.targetEl].params;\n// Recreate the tooltip based on the copy configuration\nt = app.tooltip.create(pars);\n// Replace the app data instance\napp.data.tooltips[message.targetEl] = t;Shiny.addCustomMessageHandler(\n  'update_tooltip', function(message) {\n  if (app.data.tooltips[message.targetEl] !== undefined) {\n    // Try to get the instance\n    let t = app.tooltip.get(message.targetEl);\n    if (message.action === \"update\") {\n      if (t) {\n        t.setText(message.text);\n      }\n    } else if (message.action === \"toggle\") {\n      if (t) {\n        // create copy that won't be modified if t is destroyed!\n        let cachedTooltip = Object.assign({}, t);\n        // save copy to replace the deleted one in the app data\n        app.data.tooltips[message.targetEl] = cachedTooltip;\n        // destroy current instance\n        t.destroy();\n      } else {\n        // Parameters\n        let pars = app.data.tooltips[message.targetEl].params;\n        // recreate the tooltip based on the copy configuration\n        t = app.tooltip.create(pars);\n        app.data.tooltips[message.targetEl] = t;\n      }\n    }\n  }\n});"},{"path":"mobile-shinyMobile.html","id":"other-elements","chapter":"24 Reconstruct {shinyMobile}","heading":"24.5.7 Other elements","text":"Framework7 provides mobile specific modules like touch, long press event (750 ms). something can usually many mobile apps. touch module parameters defined follows:translates named list R:activate feature, pass following list options f7_page function:create button element add taphold event init.js:app.R script look like:app running, don’t forget open developer tools \nset device mobile mode (iPhone android) since taphold fire\ndesktop (Figure 24.4). may place breakpoint\ninside taphold event listener check properly triggered.taphold also triggers events related click like text selection, \nrarely desirable. Hence, add following code init.js, making sure\ncheck touch exists:disables classic text selection long press window.\nFIGURE 24.4: Long press taphold event\nimportant remark click handling Framework7. Framework7 internal router allows pass data pages perform quite\nadvanced actions. remember app.views.create('.view-main'); step? real purpose actually activate internal router. extremely convenient classic web apps,\nfeature completely suited Shiny natively support multi pages apps.\nrecent work field promising plays well\nshinyMobile (see ) scope chapter. internal router strong implications, instance clicking \n<href=\"https://www.google.com/\">Click <\/> fail (works like\ncharm classic shiny app), shown :fix issue, Framework7 clicks module options, accepting valid CSS selector.\ndefault configuration:Consequently, order skip internal router, links must .external class.One might tempted target elements: bad idea,\nalso target tabs navigation, eventually fails! Therefore, best\npractice add external class necessary links like (href = \"https://www.google.com/\", \"Click \", class = \"external\")","code":"touch: {\n  tapHold: true,\n  tapHoldDelay: 750,\n}\nlist(\n  tapHold = TRUE,\n  tapHoldDelay = 750,\n  # other touch options\n)\noptions <- list(\n    theme = \"auto\",\n    dark = TRUE,\n    filled = FALSE,\n    color = \"#007aff\",\n    # TOUCH MODULE OPTIONS\n    touch = list(\n      tapHold = TRUE,\n      tapHoldDelay = 750,\n      iosTouchRipple = FALSE\n    ),\n    iosTranslucentBars = FALSE,\n    navbar = list(\n      iosCenterTitle = TRUE,\n      hideOnPageScroll = TRUE\n    ),\n    toolbar = list(\n      hideOnPageScroll = FALSE\n    )\n    # remaining options ...\n  )$('#mybutton').on('taphold', function () {\n  app.dialog.alert('Tap hold fired!');\n});\nui <- f7_page(\n  options = options,\n  \"Test\",\n  tags$div(\n    class = \"list inset\",\n    tags$ul(\n      tags$li(\n        tags$a(\n          href = \"#\",\n          id = \"mybutton\",\n          class = \"list-button color-red\",\n          \"Large Red Button\"\n        )\n      )\n    )\n  ),\n  navbar = f7_navbar(\"Title\"),\n  toolbar = f7_toolbar(),\n  title = \"shinyMobile\"\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)// tapHold custom css\nif (config.hasOwnProperty(\"touch\")) {\n  if (config.touch.tapHold) {\n    $(\"<style>\")\n      .prop(\"type\", \"text/css\")\n      .html(\n        `-moz-user-select: none;\n        -webkit-user-select: none;\n        user-select: none;`\n      )\n      .appendTo(\"head\");\n  }\n}\nmylink <- a(href = \"https://www.google.com/\", \"Click me\")\n\n# shinyMobile\nui <- f7_page(\n  mylink,\n  navbar = f7_navbar(\"Title\"),\n  toolbar = f7_toolbar(),\n  title = \"shinyMobile\"\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n# classic shiny\nui <- fluidPage(mylink)\nshinyApp(ui, server)clicks: {\n  externalLinks: '.external',\n}"},{"path":"mobile-shinyMobile.html","id":"theming-and-colors","chapter":"24 Reconstruct {shinyMobile}","heading":"24.6 Theming and colors","text":"Framework7 offers 15 color themes dark/light global appearance. apply , add color-theme-COLOR \nparent element. Best practice target body since parent page\ncontent, thereby ensuring global consistency. dark theme triggered adding \ntheme-dark class html. Since body belongs f7_page html (added \nShiny startup), can apply color R, dark mode activated\nJS:approach assumes user pass color name parameter like pink, yellow.\nwant allow flexibility add existing HEX color?\nFramework7 tools, namely app.utils.colorThemeCSSProperties, JS method\ncreating required CSS fly depending provided HEX color. instance, select \ncyberpunk green color:commented code injected app CSS. personally don’t think problem\nlook specific HEX code, knowing many tools can help. Therefore, prefer \nsecond approach. edit init.js code adding following JS snippet:config.hasOwnProperty('color') ensures code run color missing \nprovided config. , generate object containing theme color properties app.utils.colorThemeCSSProperties(config.color).\nImportantly, object, can’t insert string. However, can extract \nproperties 1 1 generate relevant piece CSS. add style tag head\ncontaining following CSS rule:property like --f7-theme-color, recover corresponding value \ncolorCSS object, colorCSS[\"--f7-theme-color\"]. done, recompile JS\nbuild_js try following app:can go apply filled theme, alternative design \nnavbar, toolbar, … filled theme color. case, add following CSS:Like , JS side init.js:result displayed Figure 24.5. Don’t forget\npass filled property config list!\nFIGURE 24.5: Filled green color theme\nLet’s finish section dark mode. leverage Framework7 app method\nelement since also toggle dark mode circumstances. add \ntoggleDarkTheme function methods object trigger depending value\nconfig. user don’t provide value, set config.dark false:point init.js :dark mode app example:overall expected result shown Figure 24.6.\nFIGURE 24.6: Dark mode {shinyMobile}\nmay run R console:","code":"\nf7_page <- function(..., navbar, toolbar, \n                    theme = c(\"ios\", \"md\", \"aurora\"), \n                    color = NULL, title = NULL, \n                    options = NULL) {\n  \n  body_cl <- NULL\n  if (!is.null(color)) body_cl <- sprintf(\"color-theme-color\")\n  \n  # Modify the body tag to add a class\n  tags$body(\n    class = body_cl,\n    tags$div(\n      id = \"app\",\n      tags$div(\n        class = \"view view-main\",\n        tags$div(\n          class = \"page\",\n          navbar,\n          toolbar,\n          tags$div(\n            class = \"page-content\",\n            ...\n          )\n        )\n      )\n    ),\n    config_tag\n  )\n  \n  # ...\n  \n}app.utils.colorThemeCSSProperties('#42f5a1');\n// /* Custom color theme */\n// {\n//   \"--f7-theme-color\": \"#42f5a1\";\n//   \"--f7-theme-color-rgb\": \"66, 245, 161\";\n//   \"--f7-theme-color-shade\": \"#1bf38e\";\n//   \"--f7-theme-color-tint\": \"#69f7b4\";\n// }if (config.hasOwnProperty('color')) {\n  let colorCSS = app.utils.colorThemeCSSProperties(config.color);\n  $('<style>')\n    .prop('type', 'text/css')\n    .html(`:root {\n      --f7-theme-color: ${colorCSS[\"--f7-theme-color\"]};\n      --f7-theme-color-rgb: ${colorCSS[\"--f7-theme-color-rgb\"]};\n      --f7-theme-color-shade: ${colorCSS[\"--f7-theme-color-shade\"]};\n      --f7-theme-color-tint: ${colorCSS[\"--f7-theme-color-tint\"]};\n    }`)\n    .appendTo(\"head\");\n}/* Custom color theme */\n:root {\n  --f7-theme-color: #42f5a1;\n  --f7-theme-color-rgb: 66, 245, 161;\n  --f7-theme-color-shade: #1bf38e;\n  --f7-theme-color-tint: #69f7b4;\n}\ndevtools::load_all()\n\nui <- f7_page(\n    tags$div(\n        class = \"list inset\",\n        tags$ul(\n            tags$li(\n                tags$a(\n                    href = \"#\",\n                    id = \"mybutton\",\n                    class = \"list-button\",\n                    \"Large Green Button\"\n                )\n            )\n        )\n    ),\n    navbar = f7_navbar(\"Title\"),\n    toolbar = f7_toolbar(),\n    title = \"shinyMobile\",\n    options = list(\n      theme = \"ios\", \n      version = \"1.0.0\",\n      filled = TRUE,\n      color = \"#42f5a1\"\n    )\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)/* Invert navigation bars to fill style */\n:root,\n:root.theme-dark,\n:root .theme-dark {\n  --f7-bars-bg-color: var(--f7-theme-color);\n  --f7-bars-bg-color-rgb: var(--f7-theme-color-rgb);\n  --f7-bars-translucent-opacity: 0.9;\n  --f7-bars-text-color: #fff;\n  --f7-bars-link-color: #fff;\n  --f7-navbar-subtitle-text-color: rgba(255,255,255,0.85);\n  --f7-bars-border-color: transparent;\n  --f7-tabbar-link-active-color: #fff;\n  --f7-tabbar-link-inactive-color: rgba(255,255,255,0.54);\n  --f7-sheet-border-color: transparent;\n  --f7-tabbar-link-active-border-color: #fff;\n}\n.appbar,\n.navbar,\n.toolbar,\n.subnavbar,\n.calendar-header,\n.calendar-footer {\n  --f7-touch-ripple-color: var(--f7-touch-ripple-white);\n  --f7-link-highlight-color: var(--f7-link-highlight-white);\n  --f7-button-text-color: #fff;\n  --f7-button-pressed-bg-color: rgba(255,255,255,0.1);\n}\n.navbar-large-transparent,\n.navbar-large.navbar-transparent {\n  --f7-navbar-large-title-text-color: #000;\n\n  --r: 0;\n  --g: 122;\n  --b: 255;\n  --progress: var(--f7-navbar-large-collapse-progress);\n  --f7-bars-link-color: rgb(\n    calc(var(--r) + (255 - var(--r)) * var(--progress)),\n    calc(var(--g) + (255 - var(--g)) * var(--progress)),\n    calc(var(--b) + (255 - var(--b)) * var(--progress))\n  );\n}\n.theme-dark .navbar-large-transparent,\n.theme-dark .navbar-large.navbar-transparent {\n  --f7-navbar-large-title-text-color: #fff;\n}if (!config.hasOwnProperty('filled')) config.filled = false;\nif (config.filled) {\n  let filledCSS = `\n    :root,\n    :root.theme-dark,\n    :root .theme-dark {\n      --f7-bars-bg-color: var(--f7-theme-color);\n      --f7-bars-bg-color-rgb: var(--f7-theme-color-rgb);\n      --f7-bars-translucent-opacity: 0.9;\n      --f7-bars-text-color: #fff;\n      --f7-bars-link-color: #fff;\n      --f7-navbar-subtitle-text-color: rgba(255,255,255,0.85);\n      --f7-bars-border-color: transparent;\n      --f7-tabbar-link-active-color: #fff;\n      --f7-tabbar-link-inactive-color: rgba(255,255,255,0.54);\n      --f7-sheet-border-color: transparent;\n      --f7-tabbar-link-active-border-color: #fff;\n    }\n    .appbar,\n    .navbar,\n    .toolbar,\n    .subnavbar,\n    .calendar-header,\n    .calendar-footer {\n      --f7-touch-ripple-color: var(--f7-touch-ripple-white);\n      --f7-link-highlight-color: var(--f7-link-highlight-white);\n      --f7-button-text-color: #fff;\n      --f7-button-pressed-bg-color: rgba(255,255,255,0.1);\n    }\n    .navbar-large-transparent,\n    .navbar-large.navbar-transparent {\n      --f7-navbar-large-title-text-color: #000;\n    \n      --r: 0;\n      --g: 122;\n      --b: 255;\n      --progress: var(--f7-navbar-large-collapse-progress);\n      --f7-bars-link-color: rgb(\n        calc(var(--r) + (255 - var(--r)) * var(--progress)),\n        calc(var(--g) + (255 - var(--g)) * var(--progress)),\n        calc(var(--b) + (255 - var(--b)) * var(--progress))\n      );\n    }\n    .theme-dark .navbar-large-transparent,\n    .theme-dark .navbar-large.navbar-transparent {\n      --f7-navbar-large-title-text-color: #fff;\n  }`;\n  \n  $('<style>')\n    .prop('type', 'text/css')\n    .html(`${filledCSS}`)\n    .appendTo(\"head\");\n}config.methods = {\n  toggleDarkTheme: function () {\n    let self = this;\n    let $html = self.$('html');\n    $html.toggleClass('theme-dark');\n  }\n}\n\nif (!config.hasOwnProperty('dark')) config.dark = false;\n\nif (config.dark) {\n  app.methods.toggleDarkTheme();\n}$( document ).ready(function() {\n  // collect all data elements stored in body\n  let config = $(document).find(\"script[data-for='app']\");\n  config = JSON.parse(config.html());\n\n  // always erase existing root value just in case \n  // the user changes the root. This may be harmful\n  config.root = \"#app\";\n  \n  // store app methods\n  config.methods =  {\n      toggleDarkTheme: function() {\n        var self = this;\n        var $html = self.$(\"html\");\n        $html.toggleClass(\"theme-dark\");\n      }\n    };\n\n  // create app instance\n  app = new Framework7(config);\n\n  // init main view\n  let mainView = app.views.create('.view-main');\n  \n  // tapHold custom css\n  if (config.hasOwnProperty(\"touch\")) {\n    if (config.touch.tapHold) {\n      $(\"<style>\")\n        .prop(\"type\", \"text/css\")\n        .html(\n          `-moz-user-select: none;\n          -webkit-user-select: none;\n          user-select: none;`\n        )\n        .appendTo(\"head\");\n    }\n  }\n\n  let notification = app.notification.create({\n    text: 'Hello, how are you?',\n    on: {\n      opened: function () {\n        console.log('Notification opened');\n      }\n    }\n  }).open();\n\n  let otherMessage = app.notification.create({\n    text: 'You look great!'\n  });\n\n  // equivalent to setTimeout ...\n  app.utils.nextTick(function() {\n    otherMessage.open();\n  }, 1000);\n\n  // taphold test\n  $('#mybutton').on('taphold', function () {\n    app.dialog.alert('Tap hold fired!');\n  });\n\n  // Set color theme\n  if (config.hasOwnProperty('color')) {\n    let colorCSS = app.utils.colorThemeCSSProperties(config.color);\n    $('<style>')\n      .prop('type', 'text/css')\n      .html(`:root {\n        --f7-theme-color: ${colorCSS[\"--f7-theme-color\"]};\n        --f7-theme-color-rgb: ${colorCSS[\"--f7-theme-color-rgb\"]};\n        --f7-theme-color-shade: ${colorCSS[\"--f7-theme-color-shade\"]};\n        --f7-theme-color-tint: ${colorCSS[\"--f7-theme-color-tint\"]};\n      }`)\n      .appendTo(\"head\");\n  }\n\n  // Filled theme\n  if (!config.hasOwnProperty('filled')) config.filled = false;\n  if (config.filled) {\n    let filledCSS = `\n      :root,\n      :root.theme-dark,\n      :root .theme-dark {\n        --f7-bars-bg-color: var(--f7-theme-color);\n        --f7-bars-bg-color-rgb: var(--f7-theme-color-rgb);\n        --f7-bars-translucent-opacity: 0.9;\n        --f7-bars-text-color: #fff;\n        --f7-bars-link-color: #fff;\n        --f7-navbar-subtitle-text-color: rgba(255,255,255,0.85);\n        --f7-bars-border-color: transparent;\n        --f7-tabbar-link-active-color: #fff;\n        --f7-tabbar-link-inactive-color: rgba(255,255,255,0.54);\n        --f7-sheet-border-color: transparent;\n        --f7-tabbar-link-active-border-color: #fff;\n      }\n      .appbar,\n      .navbar,\n      .toolbar,\n      .subnavbar,\n      .calendar-header,\n      .calendar-footer {\n        --f7-touch-ripple-color: var(--f7-touch-ripple-white);\n        --f7-link-highlight-color: var(--f7-link-highlight-white);\n        --f7-button-text-color: #fff;\n        --f7-button-pressed-bg-color: rgba(255,255,255,0.1);\n      }\n      .navbar-large-transparent,\n      .navbar-large.navbar-transparent {\n        --f7-navbar-large-title-text-color: #000;\n      \n        --r: 0;\n        --g: 122;\n        --b: 255;\n        --progress: var(--f7-navbar-large-collapse-progress);\n        --f7-bars-link-color: rgb(\n          calc(var(--r) + (255 - var(--r)) * var(--progress)),\n          calc(var(--g) + (255 - var(--g)) * var(--progress)),\n          calc(var(--b) + (255 - var(--b)) * var(--progress))\n        );\n      }\n      .theme-dark .navbar-large-transparent,\n      .theme-dark .navbar-large.navbar-transparent {\n        --f7-navbar-large-title-text-color: #fff;\n    }`;\n    \n    $('<style>')\n      .prop('type', 'text/css')\n      .html(`${filledCSS}`)\n      .appendTo(\"head\");\n  }\n\n  // dark mode\n  if (!config.hasOwnProperty('dark')) config.dark = false;\n  if (config.dark) {\n    app.methods.toggleDarkTheme();\n  }\n});\nui <- f7_page(\n    tags$div(\n        class = \"list inset\",\n        tags$ul(\n            tags$li(\n                tags$a(\n                    href = \"#\",\n                    id = \"mybutton\",\n                    class = \"list-button\",\n                    \"Large Green Button\"\n                )\n            )\n        )\n    ),\n    navbar = f7_navbar(\"Title\"),\n    toolbar = f7_toolbar(),\n    title = \"shinyMobile\",\n    options = list(\n      theme = \"ios\", \n      version = \"1.0.0\", \n      color = \"#42f5a1\", \n      filled = TRUE, \n      dark = TRUE\n    )\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)\nshinyAppDir(system.file(\"shinyMobile/simple\", package = \"OSUICode\"))"},{"path":"mobile-shinyMobile.html","id":"modularize-js-code","chapter":"24 Reconstruct {shinyMobile}","heading":"24.7 Modularize JS code","text":"shown , init.js code starts grow good sign.\nsection, show utilize import export statements, possible\nowing esbuild JS bundler. Note modern version writing equivalent module.exports require shown 10.4.6.1.R console, run create_js(\"helpers_config\", reference = FALSE), creates new JS script import main.js esbuild entry point. Inside extract function containing steps set app configuration object:function argument must return config variable subsequently injected new Framework7(config) initialize app. init.js script, import setConfig() function call within $( document ).ready:can bundle code build_js(). invite reader modularize features mentioned , final product available . Alternatively, may run R console open HTML inspector check JS code:function side effect, instance modify variable located another scope, must return transformed variable output, can tracked upper level.now set foundations. next chapter, see convert shinyMobile app (vanilla shiny app) progressive web app.","code":"export const setConfig = () => {\n  // collect all data elements stored in body\n let config = $(document).find(\"script[data-for='app']\");\n config = JSON.parse(config.html());\n\n // always erase existing root value just in case the user \n // changes the root. This may be harmful\n config.root = \"#app\";\n\n  // store app methods\n  config.methods =  {\n    toggleDarkTheme: function() {\n      let self = this;\n      let $html = self.$(\"html\");\n      $html.toggleClass(\"theme-dark\");\n    }\n  };\n\n  // check if the app is intended to be a PWA\n  let isPWA = $('body').attr('data-pwa') === \"true\";\n\n  if (isPWA) {\n    config.serviceWorker = {\n      path: window.location.pathname + \"service-worker.js\",\n      scope: window.location.pathname\n    };\n  }\n\n  // Widgets cache\n  config.data = function() {\n    return {\n      // any other widget type to cache ...\n      gauge: []\n    };\n  };\n\n  return config;\n}import { setConfig } from './helpers_config.js'\n\n$( document ).ready(function() {\n  let config = setConfig();\n  // create app instance\n  app = new Framework7(config);\n  // ...\n});\nshinyAppDir(system.file(\"shinyMobile/pwa\", package = \"OSUICode\"))"},{"path":"mobile-pwa.html","id":"mobile-pwa","chapter":"25 {shinyMobile} and PWA","heading":"25 {shinyMobile} and PWA","text":"Transforming classic Shiny app PWA game changer end users.\nfirst step setup valid web manifest icons favicon.PWA features won’t work iOS, like \ninstall prompt.reminder, code examples shown throughout chapter gathered {OSUICode} package accessible , specifically PWA apps available .","code":""},{"path":"mobile-pwa.html","id":"introduction-5","chapter":"25 {shinyMobile} and PWA","heading":"25.1 Introduction","text":", review one one necessary steps convert shiny app PWA.\nget good idea mission exactly , leverage Application tab \ndeveloper tools.overall expected result shown Figure 25.1. Alternatively, one\nmay use Google Lighthouse utility provide general diagnosis app, illustrated Figure 25.2. many categories like performance, accessibility. case, let’s just select PWA category, check mobile device radio click generate report.\nFIGURE 25.1: Application tab developers tools\n\nFIGURE 25.2: Google Lightouse utility\nAccording diagnostic result displayed Figure 25.3, don’t meet requirements, importantly :manifest.service worker.icons.\nFIGURE 25.3: Lighthouse audit result\n","code":""},{"path":"mobile-pwa.html","id":"charpente-and-pwa-tools","chapter":"25 {shinyMobile} and PWA","heading":"25.2 {charpente} and PWA tools","text":"charpente tools help design PWA, particularly set_pwa function previously mentioned steps one line code. however prerequisites:app must belong package.function must target app directory.Let’s create inst/examples/pwa-app sub-folder app.R file:set PWA configuration set_pwa. Overall, function generates manifest.webmanifest file, downloads Google PWA compatibility\nscript, adds custom dependency pointing manifest.webmanifest file 144x144 icon file, copies boilerplate service-worker.js offline.html page registers service worker (whose code borrowed web.dev):shinyMobile case, Framework7 already registers provided service\nworker, don’t need initialization script. Therefore, skip creation\nsw-register.js importing main.js, actually call:Importantly, function handle icon creation. tools \nappsco \napp-manifest, create\ncustom icons splash screens, need .following, provide detail mentioned steps.","code":"\nlibrary(shiny)\nlibrary(shinyMobile)\n\nui <- f7_page(\n  \"Test\",\n  navbar = f7_navbar(\"Title\"),\n  toolbar = f7_toolbar(),\n  title = \"shinyMobile\",\n  options = list(\n    theme = \"ios\",\n    version = \"1.0.0\",\n    touch = list(\n      tapHold = TRUE\n    ),\n    color = \"#42f5a1\",\n    filled = TRUE,\n    dark = TRUE\n  )\n)\n\nserver <- function(input, output, session) {}\nshinyApp(ui, server)window.addEventListener('load', () => {\n  if ('serviceWorker' in navigator) {\n    var pathname = window.location.pathname;\n    navigator.serviceWorker\n      .register(pathname + 'service-worker.js', { scope: pathname})\n      .then(function() { console.log('Service Worker Registered'); });\n  };\n});\nset_pwa(\"inst/examples/pwa-app\", register_service_worker = FALSE)"},{"path":"mobile-pwa.html","id":"create-the-manifest","chapter":"25 {shinyMobile} and PWA","heading":"25.2.1 Create the manifest","text":"like create JSON configuration file like :file accessible app, hence best practice put /www folder,\nicon images hosted /www/icons sub-directory. charpente create_manifest function writes JSON file provided location.\nInterestingly shortcuts fields gives ability start app specific state, end users save time. feature supported latest Android devices well date Windows 10 computers (Apple support). practice, shortcut url can processed shiny::parseQueryString server side. instance, url contains query string like https://domain/path/?foo=1, :web manifest icons included head Google PWA compatibility script:set_pwa() internally calls create_pwa_dependency() creates HTML dependency containing necessary resources:practice, since package already relies dependencies like Framework7, leverage add_dependencies() function add dependencies .provided icons must follow convention icon-<size_in_px>.png like\nicon-144.png, default.","code":"{\n  \"short_name\": \"My App\",\n  \"name\": \"Super amazing app\",\n  \"description\": \"This app is just mind blowing\",\n  \"icons\": [\n    {\n      \"src\": \"icons/icon.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    }\n    // ...\n  ],\n  \"start_url\": \"<APP_URL>\",\n  \"background_color\": \"#3367D6\",\n  \"display\": \"standalone\",\n  \"scope\": \"/\",\n  \"theme_color\": \"#3367D6\",\n  \"shortcuts\": [\n    {\n      \"name\": \"Open toast\",\n      \"short_name\": \"Shortcut\",\n      \"description\": \"Do something\",\n      \"url\": \"<APP_URL>/...\",\n      \"icons\": [{ \"src\": \"icons/shortcut.png\", \"sizes\": \"192x192\" }]\n    }\n  ]\n}\nobserveEvent(session$clientData$url_search, {\n  query <- parseQueryString(session$clientData$url_search)\n  req(length(query) > 0)\n  # Ways of accessing the values\n  if (as.numeric(query$foo) == 1) {\n    f7Toast(text = \"Plop\")\n  }\n})<link rel=\"manifest\" href=\"manifest.webmanifest\" />\n<!-- include icon also from manifest -->\n<link rel=\"icon\" type=\"image/png\" \n  href=\"icons/icon-144.png\" sizes=\"144x144\" />\n#' PWA dependencies utils\n#'\n#' @description This function attaches PWA manifest and icons to the given tag\n#'\n#' @param tag Element to attach the dependencies.\n#'\n#' @importFrom utils packageVersion\n#' @importFrom htmltools tagList htmlDependency\n#' @export\nadd_pwa_deps <- function(tag) {\n pwa_deps <- htmlDependency(\n  name = \"pwa-utils\",\n  version = packageVersion(\"shinyMobile\"),\n  src = c(file = \"shinyMobile-0.0.0.9000\"),\n  head = \"<link rel=\\\"manifest\\\" \n    href=\\\"manifest.webmanifest\\\"/>\n    <link rel=\\\"icon\\\" type=\\\"image/png\\\" \n    href=\\\"icons/icon-144.png\\\" sizes=\\\"144x144\\\" />\",\n  package = \"mypkg2\",\n )\n tagList(tag, pwa_deps)\n}"},{"path":"mobile-pwa.html","id":"google-pwa-compatibility","chapter":"25 {shinyMobile} and PWA","heading":"25.2.2 Google PWA compatibility","text":"use Google PWA compatibility script, include least one icon\nlike <link rel=\"icon\" type=\"image/png\" href=\"res/icon-128.png\" sizes=\"128x128\" />.\nHowever, found discrepancies developer tools recommendations \nPWA compatibility script. Therefore, recommend follow developer tools prescriptions, \ninclude least one icon size 144x144. elements generated script ,\nconvenient. Indeed, handle possible screen sizes different OS particularly\ntricky, repetitive, interesting.HTML dependency downloaded create_dependency(\"pwacompat\", options = charpente_options(bundle = FALSE)).\nDon’t forget update add_dependencies() call f7_page() including two new dependencies:Calling devtools::load_all() running app , see new dependencies\nhead (Figure 25.4).\nFIGURE 25.4: New PWA dependencies head tag.\nYet, according Figure 25.5, still miss service worker,\nshown manifest diagnostic. demonstrates powerful developer tools \nend user always guided step step.\nFIGURE 25.5: Missing service worker registration.\n","code":"\nf7_page <- function(..., navbar, toolbar, title = NULL, \n                    options = NULL) {\n\n  config_tag <- tags$script(\n    type = \"application/json\",\n    `data-for` = \"app\",\n    jsonlite::toJSON(\n      x = options,\n      auto_unbox = TRUE,\n      json_verbatim = TRUE\n    )\n  )\n\n  # create body_tag\n  body_tag <- tags$body(\n    tags$div(\n      id = \"app\",\n      tags$div(\n        class = \"view view-main\",\n        tags$div(\n          class = \"page\",\n          navbar,\n          toolbar,\n          tags$div(\n            class = \"page-content\",\n            ...\n          )\n        )\n      )\n    ),\n    config_tag\n  )\n\n  tagList(\n    tags$head(\n      tags$meta(charset = \"utf-8\"),\n      tags$meta(\n        name = \"viewport\",\n        content = \"width=device-width, initial-scale=1, \n        maximum-scale=1, minimum-scale=1, user-scalable=no, \n        viewport-fit=cover\"\n      ),\n      tags$meta(\n        name = \"apple-mobile-web-app-capable\",\n        content = \"yes\"\n      ),\n      tags$meta(\n        name = \"theme-color\",\n        content = \"#2196f3\"\n      ),\n      tags$title(title)\n    ),\n    add_dependencies(\n      body_tag,\n      deps = c(\"framework7\", \"shinyMobile\", \"pwa\", \"pwacompat\")\n    )\n  )\n}"},{"path":"mobile-pwa.html","id":"service-worker-and-offline-page","chapter":"25 {shinyMobile} and PWA","heading":"25.2.3 Service worker and offline page","text":"second mandatory step make app installable service worker.\nborrowed modified code web.dev. set_pwa() copies code provided app /www folder:Overall, service worker composed three steps:Installation: cache initialized assets like HTML page, CSS, JS, images asynchronously cached. addition caching offline.html page, also\ncache necessary assets. respective path taken server location, instance, Framework7 assets located framework7-5.7.14/... jQuery assets shared/. Best practice look developer tools Source tab provides right location.Activation.Fetch: service worker intercepts network requests sent client returns answers according predefined strategy. set “network first” strategy, meaning always try return answer network fall back cache request failed (instance case missing internet connection). code, two kind requests: navigation, related HTML page requests corresponding static assets like CSS JS. Therefore, else statement consider two cases. like know caching strategies please refer Google documentation: https://developers.google.com/web/tools/workbox/modules/workbox-strategies.service worker redirects end user offline cached page (offline.html) whenever app offline, thereby offering better user experience.strongly advise keep file names.next step involves service worker registration. Framework7 dedicated module app configuration. modify config init.js initializing app run build_js() update minified file:process successful, get result shown Figure 25.6.\nFIGURE 25.6: Registered service worker.\nnew PWA standard imposes return valid response app offline. offline page also copied charpente:Notice jQuery, required easier DOM interactions, well Framework7 CSS JS assets cached service worker script, thereby making \navailable offline.html. offline fallback relies Framework7 consistency reasons replace HTML page, keeping mind update\nservice worker.Now, let’s audit app : congrats! installable reliable, although\nPWA optimization may provided.\nFIGURE 25.7: Installable shinyMobile app.\ncommon source error browser cache. best practice regularly empty . Alternatively, one may runs incognito mode, cache files.","code":"/*\nCopyright 2015, 2019, 2020 Google LLC. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\n// Incrementing OFFLINE_VERSION will kick off the install event and force\n// previously cached resources to be updated from the network.\nconst OFFLINE_VERSION = 1;\nconst CACHE_NAME = \"offline\";\n// Customize this with a different URL if needed.\nconst OFFLINE_URL = \"offline.html\";\n\nself.addEventListener(\"install\", (event) => {\n  event.waitUntil(\n    (async () => {\n      const cache = await caches.open(CACHE_NAME);\n      // Setting {cache: 'reload'} in the new request will \n      // ensure that the response isn't fulfilled from the \n      // HTTP cache; i.e., it will be from the network.\n      await cache.add(new Request(OFFLINE_URL, { cache: \"reload\" }));\n      await cache.add( new Request(\"framework7-5.7.14/css/framework7.bundle.min.css\", { cache: \"reload\" }) );\n      await cache.add( new Request(\"framework7-5.7.14/js/framework7.bundle.min.js\", { cache: \"reload\" }) );\n      await cache.add( new Request(\"shared/jquery.min.js\", { cache: \"reload\" }) );\n    })()\n  );\n  // Force the waiting service worker to become the active service worker.\n  self.skipWaiting();\n});\n\nself.addEventListener(\"activate\", (event) => {\n  event.waitUntil(\n    (async () => {\n      // Enable navigation preload if it's supported.\n      // See https://developers.google.com/web/updates/2017/02/navigation-preload\n      if (\"navigationPreload\" in self.registration) {\n        await self.registration.navigationPreload.enable();\n      }\n    })()\n  );\n\n  // Tell the active service worker to take control of \n  // the page immediately.\n  self.clients.claim();\n});\n\nself.addEventListener(\"fetch\", (event) => {\n\n  // Fix service-worker bug\n  if (event.request.cache === 'only-if-cached') return;\n\n  // We only want to call event.respondWith() if this \n  // is a navigation request for an HTML page ...\n  if (event.request.mode === \"navigate\") {\n    event.respondWith(\n      (async () => {\n        try {\n          // First, try to use the navigation preload response \n          // if it's supported.\n          const preloadResponse = await event.preloadResponse;\n          if (preloadResponse) {\n            return preloadResponse;\n          }\n\n          // Always try the network first.\n          const networkResponse = await fetch(event.request);\n          return networkResponse;\n        } catch (error) {\n          // catch is only triggered if an exception is thrown, \n          // which is likely due to a network error.\n          // If fetch() returns a valid HTTP response with a \n          // response code in the 4xx or 5xx range, the catch() \n          // will NOT be called.\n          console.log(\"Returning offline page instead.\", error);\n\n          const cache = await caches.open(CACHE_NAME);\n          const cachedResponse = await cache.match(OFFLINE_URL);\n          return cachedResponse;\n        }\n      })()\n    );\n  } else {\n    // ... but also serve other cached assets \n    // (not a navigation request).\n    event.respondWith(\n      (async () => {\n        \n        try {\n          // Always try the network first.\n          const networkResponse = await fetch(event.request);\n          return networkResponse;\n          \n        } catch (error) {\n          \n          const cache = await caches.open(CACHE_NAME);\n          const cachedResponse = await cache.match(event.request);\n          if (cachedResponse) return cachedResponse;\n          \n        }\n      })()\n    );\n  }\n\n  // If our if() condition is false, then this fetch handler \n  // will still intercept the\n  // request and tries to return an answer either from \n  // network or from the relevant cache location. If there \n  // are any other fetch handlers registered, they will get a\n  // chance to call event.respondWith(). If no fetch handlers \n  // call event.respondWith(), the request will be handled by \n  // the browser as if there were no service worker involvement.\n});config.serviceWorker = {\n  path: window.location.pathname + 'service-worker.js',\n  scope: window.location.pathname\n}<!DOCTYPE html>\n<html>\n  <head>\n    <!-- Required meta tags-->\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" \n    content=\"width=device-width, \n    initial-scale=1, \n    maximum-scale=1, \n    minimum-scale=1, \n    user-scalable=no, \n    viewport-fit=cover\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <!-- Color theme for statusbar (Android only) -->\n    <meta name=\"theme-color\" content=\"#2196f3\">\n    <!-- Your app title -->\n    <title>Oups<\/title>\n    <!-- Path to Framework7 Library Bundle CSS -->\n    <link \n      rel=\"stylesheet\" \n      href=\"framework7-5.7.14/css/framework7.bundle.min.css\">\n    <!-- Path to your custom app styles-->\n  <\/head>\n  <body>\n    <!-- App root element -->\n    <div id=\"app\">\n\n      <!-- Your main view, should have \"view-main\" class -->\n      <div class=\"view view-main\">\n        <!-- Initial Page, \"data-name\" contains page name -->\n        <div data-name=\"home\" class=\"page\">\n\n          <!-- Top Navbar -->\n          <div class=\"navbar\">\n            <div class=\"navbar-bg\"><\/div>\n            <div class=\"navbar-inner\">\n              <div class=\"title\">Offline page<\/div>\n            <\/div>\n          <\/div>\n\n          <!-- Bottom Toolbar -->\n          <div class=\"toolbar toolbar-bottom\">\n            <div class=\"toolbar-inner\">\n              <!-- Toolbar links -->\n              <a href=\"#\" class=\"link\">Link 1<\/a>\n              <a href=\"#\" class=\"link\">Link 2<\/a>\n            <\/div>\n          <\/div>\n\n          <!-- Scrollable page content -->\n          <div class=\"page-content\">\n            <div class=\"block\">\n              <p>Welcome to the offline page<\/p>\n              <button \n                onclick=\"location.reload();\" \n                class=\"toast-button button color-red col\">\n                Reload\n              <\/button>\n            <\/div>\n          <\/div>\n        <\/div>\n      <\/div>\n    <\/div>\n    <!-- jQuery -->\n    <script \n      type=\"text/javascript\" \n      src=\"shared/jquery.min.js\">\n    <\/script>\n    <!-- Path to Framework7 Library Bundle JS -->\n    <script \n      type=\"text/javascript\"     \n      src=\"framework7-5.7.14/js/framework7.bundle.min.js\">\n    <\/script>\n    <!-- Path to your app js -->\n    <script>\n      var app = new Framework7({\n        // App root element\n        root: '#app',\n        // App Name\n        name: 'My App',\n        // App id\n        id: 'com.myapp.test',\n        // Enable swipe panel\n        panel: {\n          swipe: true,\n        },\n        autoDarkTheme: true,\n        // ... other parameters\n      });\n\n      var mainView = app.views.create('.view-main');\n      \n      if (Framework7.device.standalone) {\n        $(\"html, body\").css({ height: \"100vh\", width: \"100vw\" });\n        if ($(\".appbar\").length > 0) {\n          $(\".toolbar\").css(\"margin-bottom\", \"20px\");\n        }\n      }\n    <\/script>\n  <\/body>\n<\/html>"},{"path":"mobile-pwa.html","id":"disable-pwa-for-the-end-user","chapter":"25 {shinyMobile} and PWA","heading":"25.2.4 Disable PWA for the end user","text":"approach, shinyMobile always look service worker register.\nParticularly, raise error case service worker found server.\nuser doesn’t want create PWA, let’s say less important applications?\nmay add parameter f7_page, instance allowPWA, either TRUE FALSE,\nstore value body data-pwa attribute recover JS side within init.js:creates config.serviceWorker user specified allowPWA = TRUE.","code":"// check if the app is intended to be a PWA\nlet isPWA = $('body').attr('data-pwa') === \"true\";\n\nif (isPWA) {\n  config.serviceWorker = {\n    path: window.location.pathname + \"service-worker.js\",\n    scope: window.location.pathname\n  };\n}"},{"path":"mobile-pwa.html","id":"handle-the-installation","chapter":"25 {shinyMobile} and PWA","heading":"25.3 Handle the installation","text":"great opportunity propose custom installation experience.able install app, make sure replace start_url url\napp deployed like https://dgranjon.shinyapps.io/installable-pwa-app/ instance.\nMissing step cause issue service worker registration.installation criteria met, web browser raises beforeinstallprompt event, (except\niOS platform compatible yet. edit init.js script write:code adds event listener window, prevents showing start e.preventDefault \ncaptures external variable called deferredPrompt. next step comprises design custom piece UI trigger prompt install. can benefit rich Framework7 interface display\ntoast containing install button. initialization\nfairly simple, following pattern app.<COMPONENT>.create(parameters):give id call later edit beforeinstallprompt event listener show\ntoast:jQuery like $(window).('beforeinstallprompt', ...), capture event e.originalEvent!register second event listener, fires toast button click. first close \ntoast, call prompt method deferred event log result:run build_js() deploy app shinyapps.io (remember: must serve app HTTPS!). Figure 25.8\nillustrates install prompt window appears install app. installed, beforeinstallprompt\nevent fire anymore app may launched standalone app, instance macOSX (Figure 25.9).\nFIGURE 25.8: Install prompt window.\n\nFIGURE 25.9: Installed PWA macOSX.\nFigure 25.9, blue window color corresponds tags$meta(name = \"theme-color\", content = \"#2196f3\"), passed f7_page layout element. Whenever connection lost, redirection occurs \noffline.html page, shown Figure 25.10.\nFIGURE 25.10: Offline HTML template.\nfinal product may run :","code":"let deferredPrompt;\nwindow.addEventListener('beforeinstallprompt', (e) => {\n  // Prevent the mini-infobar from appearing on mobile\n  e.preventDefault();\n  // Stash the event so it can be triggered later.\n  deferredPrompt = e;\n});// Create custom install UI\nlet installToast = app.toast.create({\n  position: 'center',\n  text: `<button \n    id=\"install-button\" \n    class=\"toast-button button color-green\">\n    Install\n  <\/button>`\n});let deferredPrompt;\nwindow.addEventListener('beforeinstallprompt', (e) => {\n  // Prevent the mini-infobar from appearing on mobile\n  e.preventDefault();\n  // Stash the event so it can be triggered later.\n  deferredPrompt = e;\n  // Show install trigger\n  installToast.open();\n});app.utils.nextTick(function() {\n  $('#install-button').on('click', function() {\n    // close install toast\n    installToast.close();\n    if (!deferredPrompt) {\n      // The deferred prompt isn't available.\n      return;\n    }\n    // Show the install prompt.\n    deferredPrompt.prompt();\n    // Log the result\n    deferredPrompt.userChoice.then((result) => {\n      console.log('OK', 'userChoice', result);\n      // Reset the deferred prompt variable, since\n      // prompt() can only be called once.\n      deferredPrompt = null;\n    });\n  });\n}, 500);\nshinyAppDir(system.file(\"shinyMobile/pwa\", package = \"OSUICode\"))"},{"path":"mobile-pwa.html","id":"workbox","chapter":"25 {shinyMobile} and PWA","heading":"25.4 Workbox","text":"Workbox robust alternative\napproach described boilerplate code enable:pre-caching dependencies like CSS JS also images Google fonts\nimprove performances.Improve offline experience.…part work yet time review submission.\n’ll probably remove …","code":""},{"path":"mobile-pwa.html","id":"other-resources","chapter":"25 {shinyMobile} and PWA","heading":"25.5 Other resources","text":"process described works perfectly Shiny template. reader may also consider packages like {shiny.pwa}, creates PWA compatible structure run time, within app /www folder.","code":""},{"path":"mobile-widgets.html","id":"mobile-widgets","chapter":"26 Design widgets","heading":"26 Design widgets","text":"Framework7 brings dozen different widgets like photo browser, virtual lists (high performance lists), messages, notifications, toasts. Figure 26.1 shows left right chat widget, floating action buttons gauges.\nFIGURE 26.1: Framework7 widgets. left right: chat, floating action button gauges.\nLooking documentation, API time\nalways , create widget:update, open close later:must admit, deviations like navbar (app.navbar.show()) modal dialog enough common points design main wrapper creates widget update/open/close .significantly simplifies R/JS API providing general method \ninitialize update widgets.reminder, code examples shown throughout chapter gathered {OSUICode} package accessible , specifically widgets.","code":"app.widget.create(parameters);app.widget.update(newParameters);\napp.widget.open();\napp.widget.close();"},{"path":"mobile-widgets.html","id":"build-the-ui","chapter":"26 Design widgets","heading":"26.1 Build the UI","text":"know JavaScript must receive configuration object create widget instance.\nshown earlier book, simple way achieve . Let’s consider gauge example:UI side, expect :Upon widget instantiation, Framework7 populates container relevant tags.\nf7_gauge() function creates div tag gauge class well configuration\ntag:provide default valueText option display current\nvalue followed % symbol. Note class crucial target relevant tag JS side. widgets less follow scheme. careful partial matching\n$ operator. reason used [[ instead: $, valueText \nmatched valueTextColor, leading unexpected behavior.","code":"<div class=\"gauge\"><\/div>\nf7_gauge <- function(id, value, options = NULL) {\n\n  if (is.null(options[[\"valueText\"]])) {\n    options[[\"valueText\"]] <- paste(value * 100, \"%\")\n  }\n\n  gaugeProps <- c(list(value = value), options)\n\n  gaugeConfig <- shiny::tags$script(\n    type = \"application/json\",\n    `data-for` = id,\n    jsonlite::toJSON(\n      x = gaugeProps,\n      auto_unbox = TRUE,\n      json_verbatim = TRUE\n    )\n  )\n\n  shiny::tags$div(\n    class = \"gauge\",\n    id = id,\n    gaugeConfig\n  )\n}"},{"path":"mobile-widgets.html","id":"widgets-without-preexisting-ui","chapter":"26 Design widgets","heading":"26.2 Widgets without preexisting UI","text":"widgets like toasts notifications don’t predefined UI\nelement app starts. case, simply send configuration JS, \nsession:Pay attention options$icon element. can’t convert shiny tags JSON, \nmust converted character first. multiple parameters contain tags,\nmust treat accordingly!","code":"\nsendCustomMessage <- function(type, message, session) {\n  session$sendCustomMessage(\n    type,\n    jsonlite::toJSON(\n      message,\n      auto_unbox = TRUE,\n      json_verbatim = TRUE\n    )\n  )\n}\n\nf7_notif <- function(\n  id = NULL, \n  text, \n  options = NULL, \n  session = shiny::getDefaultReactiveDomain()\n) {\n\n  if (!is.null(options$icon)) {\n    options$icon <- as.character(options$icon)\n  }\n\n  message <- c(dropNulls(list(id = id, text = text)), options)\n  # see my-app.js function\n  sendCustomMessage(\"notification\", message, session)\n\n}"},{"path":"mobile-widgets.html","id":"initialize-the-widget","chapter":"26 Design widgets","heading":"26.3 Initialize the widget","text":"JS side, create new script, widgets.js:set array containing compatible widget names two categories concatenate\nwidgets element:Notice going use app object, import init.js script, located\n/srcjs folder.define activateWidget function, considering UI widgets.\nSince two widgets categories, function first checks whether widget part uiWidgets array indexOf:may multiple widgets type, must loop \npossible elements. class important must match widget generic name.\ninstance, gauge gauge class methods always app.gauge..\nloop multiple widgets? use jQuery method:see $(\".\" + widget) gives $(\".gauge\") widget gauge, \ntargets gauges one one. gauge, extract configuration containing\noptions passed end user. Remember element unique id.\nextract current element $() $el variable search \nscript tag pointing unique tag $el.attr(\"id\") id. configuration parsed\nconverted object. Note time, Framework7 expects el\nattributes simply contains CSS selector current element,\nwords unique id '#' + $el.attr(\"id\"):final step consists initializing widget, quite straightforward notice \napp.gauge app[\"gauge\"]. obtain general code:server widgets, even simpler. recover message Shiny.addCustomMessageHandler(\"type\", callback) \ninitialize . possible source problem custom message type must \none specified R function session$sendCustomMessage(\"type\", message). create\nelse statement following condition put code inside:shown code, can chain methods immediately open widget, right creation. Moreover, always good practice let Shiny know widget state, whether currently opened. reason added property message. widgets trigger events,\ninstance notifications notification:opened notification:closed. event,\nset input value fly, Shiny.setInputValue explained Chapter 12.3. way, future users can know exactly widget closed opened, thereby able trigger subsequent action. obviously requires widget pass optional id attribute ensure uniqueness!full JavaScript code may found :final step aims activating widgets. proceed forEach loop:Let’s try notification example, capture state notification\ninput element:Alternatively may run R console:","code":"\nlibrary(charpente)\ncreate_js(\"widgets\")const uiWidgets = [\"gauge\", \"swiper\", \"searchbar\"];\nconst serverWidgets = [\"toast\", \"photoBrowser\", \"notification\"];\nconst widgets = uiWidgets.concat(serverWidgets);if (uiWidgets.indexOf(widget) > -1) {\n  // Init widget\n}if (uiWidgets.indexOf(widget) > -1) {\n  $(\".\" + widget).each(function() {\n    // Init widget\n  }\n}if (uiWidgets.indexOf(widget) > -1) {\n  $(\".\" + widget).each(function() {\n    let $el = $(this);\n    let config = $(document).find(\n      \"script[data-for='\" + $el.attr(\"id\") + \"']\"\n    );\n    config = JSON.parse(config.html());\n    // add the id\n    config.el = '#' + $el.attr(\"id\");\n  }\n}app[widget].create(config);Shiny.addCustomMessageHandler(widget, function(message) {\n  if (message.id !== undefined) {\n    message.on = {\n      opened: function() {\n        Shiny.setInputValue(message.id, true);\n      },\n      closed: function() {\n        Shiny.setInputValue(message.id, false);\n        app.data[widget][message.id].destroy();\n      }\n    }; \n  }\n\n  app[widget].create(message).open();\n});// Instantiate a widget\nactivateWidget = function(widget) {\n  // Handle ui side widgets\n  if (uiWidgets.indexOf(widget) > -1) {\n    $(\".\" + widget).each(function() {\n      let $el = $(this);\n      let config = $(document).find(\n        \"script[data-for='\" + $el.attr(\"id\") + \"']\"\n      );\n      config = JSON.parse(config.html());\n      // add the id\n      config.el = '#' + $el.attr(\"id\");\n\n      // feed the create method\n      app[widget].create(config);\n    });\n  } else {\n    // This concerns toasts, notifications, photoBrowser, ...\n    // that don't have any UI element in the DOM before creating\n    // the widget instance.\n    Shiny.addCustomMessageHandler(widget, function(message) {\n      if (message.id !== undefined) {\n        message.on = {\n          opened: function() {\n            Shiny.setInputValue(message.id, true);\n          },\n          closed: function() {\n            Shiny.setInputValue(message.id, false);\n            app.data[widget][message.id].destroy();\n          }\n        }; \n      }\n      app[widget].create(message).open();\n    });\n  }\n};// Loop over all widgets to activate them\nwidgets.forEach(function(w) {\n  activateWidget(w);\n});\nlibrary(shiny)\nui <- f7_page(\n  navbar = f7_navbar(\"Title\"),\n  toolbar = f7_toolbar(),\n  title = \"shinyMobile\",\n  options = list(\n    theme = \"ios\",\n    version = \"1.0.0\",\n    taphold = TRUE,\n    color = \"#42f5a1\",\n    filled = TRUE,\n    dark = TRUE\n  )\n)\n\nserver <- function(input, output, session) {\n  observe({\n    f7_notif(\n      id = \"welcome\", \n      \"Helloooooo\", \n      options = list(closeTimeout = 2000)\n    )\n  })\n  \n  observeEvent(input$welcome, {\n    shiny::showNotification(\n      sprintf(\"Notification is %s\", input$welcome)\n    )\n  })\n}\n\nshinyApp(ui, server)\nshinyAppDir(system.file(\n  \"shinyMobile/notification\", \n  package = \"OSUICode\"\n))"},{"path":"mobile-widgets.html","id":"update-widgets","chapter":"26 Design widgets","heading":"26.4 Update widgets","text":"like develop similar generalized interface update element DOM.\nInstead update_f7_gauge() update_f7_swiper(), want update_f7_instance() function.leverage app.data element stores instances widget type. Chapter 24.5.6,\nalready created cache tooltips, let’s gauges:array name must app method. instance,\napp.gauge, means create config.data.gauge config.data.gauges,\nlead errors later.cache available, modify JavaScript creates widget instance,\nstore new instance cache, shown Figure 26.2. add following code, w refers widget instance:manipulation make sense server widgets\nalready generated server.activateWidget function :done, time design update_f7_instance(). R code sends message \ncurrent session containing:id element update.new configuration.Since send JSON, hardest part correctly process shiny tags. \ntrack shiny tags? reminder, let’s run code :configuration element, must check whether class contains shiny.tag shiny.tag.list convert character. Moreover, may contain nested list, like :case, function must recursive handle item list class. element simple text numeric, return .finally get:JS side, receive message, still widget.js script:widgets stored type app data, instance, element unique id\nmygauge located app.data[\"gauge\"][\"mygauge\"]. easy way recover widget type given id, first step message handler find instance located. design nested loop. outer loop scans app.data properties (ie widget categories), inner loop scans existing instances category. Whenever, message.id matches instance name, store corresponding widget category variable:access old instance using newly defined variable message.id.\ncapture parameters located oldInstance.params. , multiple options available:extend old configuration new one.entirely overwrite existing options.follows, decided merge old new configurations using app.utils.extend:next steps consist destroying old instance, initializing new instance, refreshing\napp.data cache:whole code can found :update concept illustrated Figure 26.2.\nFIGURE 26.2: Initializing updating widgets app.data store\ncode example showing update gauge server. may notice, \napproach perfect user explicitly update valueText field \nreflects new value. Similarly, may ask gauge value 0 1,\ninstead 0 100. reason comes Framework7 API. One might tempted convert value inside f7_gauge (user provides number 0 100), \nalso mean manually convert value update_f7_instance function later. stated previous chapters, always compromise simple API easy developer maintain user’s experience. issue may/solved comprehensive documentation.missing Install button, copy www folder PWA app.Alternatively may run R console:","code":"config.data = function() {\n  return {\n    // any other widget type to cache ...\n    gauge: []\n  };\n};// ui widgets\napp.data[widget][$el.attr(\"id\")] = w;// Instantiate a widget\nactivateWidget = function(widget) {\n  // Handle ui side widgets\n  if (uiWidgets.indexOf(widget) > -1) {\n    $(\".\" + widget).each(function() {\n      let $el = $(this);\n      let config = $(document).find(\n        \"script[data-for='\" + $el.attr(\"id\") + \"']\"\n      );\n      config = JSON.parse(config.html());\n      // add the id\n      config.el = '#' + $el.attr(\"id\");\n\n      // feed the create method\n      let w = app[widget].create(config);\n      // Store the widget instance in the app data cache\n      app.data[widget][$el.attr(\"id\")] = w;\n    });\n  } else {\n    // This concerns toasts, notifications, photoBrowser, ...\n    // that don't have any UI element in the DOM before creating\n    // the widget instance.\n    Shiny.addCustomMessageHandler(widget, function(message) {\n      if (message.id !== undefined) {\n        message.on = {\n          opened: function() {\n            Shiny.setInputValue(message.id, true);\n          },\n          closed: function() {\n            Shiny.setInputValue(message.id, false);\n            app.data[widget][message.id].destroy();\n          }\n        }; \n      }\n      app[widget].create(message).open();\n    });\n  }\n};\nclass(shiny::div())#> [1] \"shiny.tag\"\nclass(shiny::tagList(shiny::div(), shiny::h1()))#> [1] \"shiny.tag.list\" \"list\"\noptions = list(\n  buttons = list(\n   list(\n     text = \"Some text\",\n     icon = f7Icon(\"info\"),\n     color = \"pink\"\n   )\n  )\n)\nupdate_f7_instance <- function(\n  id, \n  options, \n  session = shiny::getDefaultReactiveDomain()\n) {\n\n  # Convert any shiny tag into character so that toJSON does not cry\n  listRenderTags <- function(l) {\n    lapply(\n      X = l,\n      function(x) {\n        if (inherits(x, c(\"shiny.tag\", \"shiny.tag.list\"))) {\n          as.character(x)\n        } else if (inherits(x, \"list\")) {\n          # Recursive part\n          listRenderTags(x)\n        } else {\n          x\n        }\n      }\n    )\n  }\n  options <- listRenderTags(options)\n\n  message <- list(id = id, options = options)\n  sendCustomMessage(\"update-instance\", message, session)\n}Shiny.addCustomMessageHandler(\n  'update-instance', \n  function(message) {\n    // Treat message ...\n  }\n);let instanceFamily;\nfor (const property in app.data) {\n  for (const e in app.data[property]) {\n    if (e === message.id) {\n      instanceFamily = property;\n    }\n  }\n}let oldInstance = app.data[instanceFamily][message.id];\nlet oldConfig = oldInstance.params;\nlet newConfig = app.utils.extend(oldConfig,  message.options);// Destroy old instance\noldInstance.destroy();\n// Create new config\nlet newInstance = app[instanceFamily].create(newConfig);\n// Update app data\napp.data[instanceFamily][message.id] = newInstance;Shiny.addCustomMessageHandler(\n  'update-instance', function(message) {\n  // Recover in which array is stored the given instance.\n  // Uniqueness is ensured since HTML id are supposed to be unique.\n  let instanceFamily;\n  for (const property in app.data) {\n    for (const e in app.data[property]) {\n      if (e === message.id) {\n        instanceFamily = property;\n      }\n    }\n  }\n\n  let oldInstance = app.data[instanceFamily][message.id];\n  let oldConfig = oldInstance.params;\n  let newConfig = app.utils.extend(oldConfig,  message.options);\n\n  // Destroy old instance\n  oldInstance.destroy();\n  // Create new config\n  let newInstance = app[instanceFamily].create(newConfig);\n  // Update app data\n  app.data[instanceFamily][message.id] = newInstance;\n});\nui <- f7_page(\n  f7_gauge(\n    \"mygauge\", \n    value = 0.1,\n    options = list(\n      type  = \"semicircle\",\n      borderColor = \"#2196f3\",\n      borderWidth = 10,\n      valueFontSize = 41,\n      valueTextColor = \"#2196f3\",\n      labelText = \"amount of something\"\n    )\n  ),\n  navbar = f7_navbar(\"Title\"),\n  toolbar = f7_toolbar(),\n  title = \"shinyMobile\",\n  options = list(\n    theme = \"ios\",\n    version = \"1.0.0\",\n    taphold = TRUE,\n    color = \"#42f5a1\",\n    filled = TRUE,\n    dark = TRUE\n  )\n)\n\nserver <- function(input, output, session) {\n  observe({\n    Sys.sleep(2)\n    update_f7_instance(\n      \"mygauge\", \n      options = list(\n        value = 0.75, \n        valueText = \"75 %\", \n        labelText = \"New label!\"\n      )\n    )\n  })\n}\n\nshinyApp(ui, server)\nshinyAppDir(system.file(\"shinyMobile/pwa\", package = \"OSUICode\"))"},{"path":"mobile-going-further.html","id":"mobile-going-further","chapter":"27 Fine tune {shinyMobile}","heading":"27 Fine tune {shinyMobile}","text":"","code":""},{"path":"mobile-going-further.html","id":"enhance-the-disconnect-screen","chapter":"27 Fine tune {shinyMobile}","heading":"27.1 Enhance the disconnect screen","text":"depicted Figure 27.1, classic Shiny disconnect\nscreen mobile device beautiful, especially knowing Framework7\ncapabilities.\nFIGURE 27.1: Vanilla Shiny disconnect screen.\nLet’s better! Upon disconnection, want display toast two buttons:reload button reloads window re-initialize app. button\ncalls location.reload() upon click.reconnect button, tries reconnect server websocket,\ndon’t lose input, output elements. button calls Shiny.shinyapp.reconnect() upon click.know shiny disconnected? described Chapter 11,\nwhenever client socket connection closed, reason, shiny:disconnected event raised:allows us listen event JS side:next step, remove default shiny reconnect elements. inserted onDisconnected method, adds disconnect overlay (gray-screen) optionally reconnect notification:remove default shiny reconnect elements, multiple alternatives. easiest way wait\nclient connected, listening shiny:connected, set Shiny.shinyapp.onDisconnected method add gray overlay.modifying vanilla shiny elements, make sure check possible\nside effects!edit previous disconnected event listener add custom Framework7 toast, closes upon click:Result shown Figure 27.2.\nFIGURE 27.2: Vanilla Shiny disconnect screen.\nJS code ignores user reconnect setup proposes\nreconnect regardless session$allowReconnect configuration. want keep original behavior, may include following condition showing toast:","code":"socket.onclose = function() {\n  // These things are needed only if we've successfully opened the\n  // websocket.\n  if (hasOpened) {\n    $(document).trigger({\n      type: 'shiny:disconnected',\n      socket: socket\n    });\n\n    self.$notifyDisconnected();\n  }\n\n  self.onDisconnected(); // Must be run before self.$removeSocket()\n  self.$removeSocket();\n}$(document).on(\"shiny:disconnected\", function(event) {\n  // Do things\n});// From within Shiny.shinyapp...\nthis.onDisconnected = function() {\n  // Add gray-out overlay, if not already present\n  var $overlay = $('#shiny-disconnected-overlay');\n  if ($overlay.length === 0) {\n    $(document.body)\n      .append('<div id=\"shiny-disconnected-overlay\"><\/div>');\n  }\n\n  // To try a reconnect, both the app (this.$allowReconnect) and the\n  // server (this.$socket.allowReconnect) must allow reconnections, or\n  // session$allowReconnect(\"force\") was called. The \"force\" option should\n  // only be used for testing.\n  if (\n    (this.$allowReconnect === true && \n    this.$socket.allowReconnect === true) ||\n      this.$allowReconnect === \"force\")\n  {\n    var delay = reconnectDelay.next();\n    exports.showReconnectDialog(delay);\n    this.$scheduleReconnect(delay);\n  }\n}// remove shiny reconnect stuff;\n$(document).on(\"shiny:connected\", function(event) {\n  Shiny.shinyapp.onDisconnected = function() {\n    // Add gray-out overlay, if not already present\n    let $overlay = $('#shiny-disconnected-overlay');\n    if ($overlay.length === 0) {\n      $(document.body)\n        .append('<div id=\"shiny-disconnected-overlay\"><\/div>');\n    }\n  };\n});$(document).on(\"shiny:disconnected\", function(event) {    \n  let reconnectToast = app.toast\n    .create({\n      position: \"center\",\n      text:\n        `Oups... disconnected <\/br> <\/br> \n        <div class=\"row\">\n          <button \n            onclick=\"Shiny.shinyapp.reconnect();\" \n            class=\"toast-button button color-green col\">\n            Reconnect\n          <\/button>\n          <button \n            onclick=\"location.reload();\" \n            class=\"toast-button button color-red col\">\n            Reload\n          <\/button>\n        <\/div>`\n    })\n    .open();\n\n  // close toast whenever a choice is made ...\n  $(\".toast-button\").on(\"click\", function() {\n    reconnectToast.close();\n  });\n});if (\n  (Shiny.shinyapp.$allowReconnect === true && \n  Shiny.shinyapp.$socket.allowReconnect === true) ||\n      Shiny.shinyapp.$allowReconnect === \"force\") {\n  // Toast logic\n}"},{"path":"going-further-reactR.html","id":"going-further-reactR","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28 R + Shiny + React: welcome {reactR}","text":"React open source library designed quickly develop user interfaces UI components, front end.\ndeveloped Facebook community (1500 contributors) made public May 29 2013. currently used worldwide around 163k stars GitHub ranking widely impacts mobile market, React Native library. React also really convenient develop attractive documentations docusaurus.\never built user interfaces pure JS, might like React!, give short introduction React ecosystem see can benefit R Shiny side.","code":""},{"path":"going-further-reactR.html","id":"quick-introduction-to-react","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.1 Quick introduction to React","text":"understand React prerequisites notably basic HTML/CSS/JS knowledge, especially JS modules (see section 10.4.6.1). However, managed reach chapter, worry much!","code":""},{"path":"going-further-reactR.html","id":"setup-1","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.1.1 Setup","text":"Node npm required. sure, run:stage also good yarn, ’ll need reactR.nothing returned, please refer section 10.3.1. initiate React project, leverage npx command:Replace <PROJECT_NAME> real name project. seems intimidating,\nkeep mind concept golem package uses initiate creation robust shiny projects, except work terminal.done (package initialization takes time),\nmove project folder launch demo app:yarn, yarn start also works.see something similar Figure 28.1.\nFIGURE 28.1: npm start opens react app\nCongrats! running first React app!","code":"node -v\nnpm -vnpx create-react-app <PROJECT_NAME>cd <PROJECT_NAME> && npm start"},{"path":"going-further-reactR.html","id":"basics-3","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.1.2 Basics","text":"now set start learning basics React. Among created files,\nnotice /src/app.js file. Inside App function, remove content inside\nreturn statement put simple <h1>Hello, world!<\/h1> HTML title. also clean imports\ndon’t need CSS logo anymore. obtain:done, run npm build (yarn build), rebuild JS code npm start \nrestart server preview app. practice, server launched, \nneed restart whenever code updated. simple save refresh interface!code see React component. definition rather simple: function returns moreless complex piece UI. components rendered React?far, didn’t look /src/index.js script. Inside find:Recent versions npx create-react-app <React.StrictMode><App /><\/React.StrictMode> instead App, thing. may also find <App />. practice, rarely modify part.short, inserts App component inside element root id main\nHTML page. HTML skeleton may found public/index.html folder. may imagine end day, app composed multiple bricks call ReactDOM.render top level component.","code":"function App() {\n  return (\n    <h1>Hello, world!<\/h1>\n  );\n}\n\n// don't remove, this is needed by index.js\nexport default App; ReactDOM.render(\n  App,\n  document.getElementById('root')\n);"},{"path":"going-further-reactR.html","id":"about-jsx","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.1.2.1 About JSX","text":"just wrote first React component. Didn’t notice something weird code?\nJS HTML mixed, called JSX, syntax extension JS. JSX makes code\nless verbose, instance:exactly thing code becomes complex, nearly\nimpossible read.Let’s see pass variables JSX. want show Hello, <Name>, store\nname variable modify app.js code accordingly:Expressions passed within curly brackets {expression} may even call functions inside.\nTag attributes also require curly brackets. Let’s modify title tag give color \nsize.Try save. fail? can’t pass multiple object properties inside single {}.\nneed either double brackets like {{object properties: values, ...}} store object \nvariable :Notice write CSS properties following camelCase syntax, font-size equivalent fontSize.","code":"React.createElement(\n  'h1',\n  'Hello, world!'\n);function App() {\n  const name = \"David\";\n  return (\n    <h1>Hello, {name}<\/h1>\n  );\n}function App() {\n  const name = \"David\";\n  return (\n    <h1 style={color: \"red\", fontSize: 40}>Hello, {name}<\/h1>\n  );\n}function App() {\n  const name = \"David\";\n  return (\n    <h1 style={{color: \"red\", fontSize: 40}}>Hello, {name}<\/h1>\n  );\n}\n\n// OR\n\nfunction App() {\n  const name = \"David\";\n  const myStyle = {\n    color: \"red\", \n    fontSize: 40\n  }\n  return (\n    <h1 style={myStyle}>Hello, {name}<\/h1>\n  );\n}"},{"path":"going-further-reactR.html","id":"react-map","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.1.2.2 Combining components","text":"whole interest combine multiple components create reusable pieces. edit code\ncreate SayHello component. Notice props parameter. way pass configuration parent component. case, want display person name, props.name. meantime, edit App parent component call SayHello three times, passing different name like <SayHello name=\"David\" /> (reason recover props.name lower level component):Notice enclosing <>...<\/>. called React fragment useful don’t want \ninsert extra <div> DOM.even efficient leveraging lists capabilities. create array\nnames apply map method return corresponding <SayHello /> sub-component:convention, elements inside map require keys.Props read-must modified withing component.\nupdate components ?","code":"function SayHello(props) {\n  return (\n    <h1>Hello, {props.name}<\/h1>\n  );\n}\n\n\nfunction App() {\n  return(\n  <>\n    <SayHello name=\"David\" />\n    <SayHello name=\"Lisa\" />\n    <SayHello name=\"Simon\" />\n  <\/>\n  );\n}const names = [\"David\", \"Lisa\", \"Simon\"];\nfunction App() {\n  const sayHelloToAll = names.map(\n    (name) => <SayHello key={name} name={name} />\n  ); \n  return(sayHelloToAll);\n}"},{"path":"going-further-reactR.html","id":"react-hooks","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.1.2.3 Component state","text":"component state private controlled component. Since React 16.8 introduction hooks, necessary convert component function class.\neasiest example illustrate hooks capabilities button. time, click button,\nwant keep current number clicks state, like actionButton(). start \nimporting useState function react create new ActionButton component.\nInside, set state useState create state variable count well function update , namely setCount. way create two variables called array destructuring. set initial number counts 0:Next step create button skeleton. provide onClick property updates\nbutton state. Inside, write anonymous function calls setCount increments\ncount value 1. point, may replace app.js content :may improve previous app add reset button within ActionButton component \nsets count back 0:make sense show reset button button clicked,\nleast . define isResetVisible variable true whenever \ncount higher 0 false count 0, leveraging JS ternary operator. store reset button variable return something isResetVisible true:’s folks! Now get better understanding React works,\nlet’s see use Shiny.","code":"import {useState} from 'react';\n\nfunction ActionButton() {\n  const [count, setCount] = useState(0);\n}import {useState} from 'react';\n\nfunction ActionButton() {\n  const [count, setCount] = useState(0);\n  return(\n    <button onClick={() => setCount(count + 1)}>\n      Number of clicks: {count}\n    <\/button >\n  );\n}\n\nfunction App() {\n  return (\n    <ActionButton />\n  );\n}\n\nexport default App;function ActionButton() {\n  const [count, setCount] = useState(0);\n  return(\n    <>\n    <button onClick={() => setCount(count + 1)}>\n      Number of clicks: {count}\n    <\/button >\n    <button onClick={() => setCount(0)}>\n      Reset\n    <\/button >\n    <\/>\n  );\n}function ActionButton() {\n  const [count, setCount] = useState(0);\n  const isResetVisible = count > 0 ? true : false;\n  let resetButton;\n  if (isResetVisible) {\n    resetButton = <button onClick={() => setCount(0)}>\n      Reset\n    <\/button >\n  }\n  return (\n    <>\n      <button onClick={() => setCount(count + 1)}>\n        Number of clicks: {count}\n      <\/button >\n      {resetButton}\n    <\/>\n  );\n}"},{"path":"going-further-reactR.html","id":"introduction-to-reactr","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.2 Introduction to {reactR}","text":"section written tested reactR 0.4.4.\nfeature may change future releases.React ecosystem rich provides many plug play boilerplate. instance,\nreactable HTML widget developed top react-table library. modern React Argon design system, shown Figure 28.2?\nFIGURE 28.2: Argon design template React\npart, see leverage reactR (Inc et al. 2021) bring component reactstrap library Shiny.install reactR:following, going propose implementation reactstrap button, Bootstrap 4 React powered action button.","code":"\n# stable from CRAN\ninstall.packages(\"reactR\")\n\n# lastest from GitHub\nremotes::install_github(\"react-R/reactR\")"},{"path":"going-further-reactR.html","id":"setup-2","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.2.1 Setup","text":"reactR exposes scaffoldReactShinyInput() sets necessary pieces code\nget started input development (see Figure 28.3):<input_name>.R file containing input skeleton well related update function, located ./R folder.\nalso creates custom HTML dependency pointing input JS logic.jsx file boilerplate start developing input JS logic, located ./srcjs folder.package.json file containing dependencies.app.R file host input demonstration code.webpack.config.js file (discussed later).Classic R package files like DESCRIPTION, .Rbuildignore…\nInterestingly, .Rbuildignorecontains lines ignore non standard files \nfolders like srcjs package.json.Besides, providing optional dependency name version taken npm installs necessary dependencies package.json file:\nFIGURE 28.3: Package initialization {reactR}\nNote reactR provides webpack JS manager. build JS code go RStudio terminal tab (terminal) run package root:installs dependencies listed package.json file create package-lock.json file. ever used renv, similar guarantees isolation package. dependencies stored node_modules folder.run webpack command compiles JS production ready code. need customize build pipeline, webpack configuration located webpack.config.js. R side, generated JS file referenced HTML dependencies, located <input_name>.R file.\nspecify --mode=development tag, falls back development code.following, see customize newly created component.","code":"\npath <- file.path(tempdir(), \"reactstrapTest\")\nusethis::create_package(path, rstudio = TRUE)\n\n# Wait new project to be created before running \n# the following!!!\nreactR::scaffoldReactShinyInput(\n  \"action_button\", \n  list(\n    \"reactstrap\" = \"^8.9.0\"\n  )\n)yarn install\nyarn run webpack --mode=development"},{"path":"going-further-reactR.html","id":"customize-the-r-logic","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.2.2 Customize the R logic","text":"reactR input composed R JS code exchange information. Upon initialization, obtained .R/action_button.R code:convenience, remove input suffix name action_button.\nOverall, function calls reactR::createReactShinyInput() :\n- Give widget class id. class targeted JS side (see 28.2.3) necessary make working.\n- Sets necessary dependencies (React, …) well internal JS code (see 28.2.3).\n- Creates input HTML code htmltools.\n- Sets default value, default parameter.\n- Allow pass list options inside list() container. default,\nnothing sent use soon.also corresponding update input function, renamed update_action_button() consistency:Shiny, end-user decide initial value action button. always set 0 default. Therefore, decided remove default parameter action_button() make 0 default.\norder add label change button color, introduce two extra parameters \nadd configuration list:Let’s see make interactice JSX code!","code":"\naction_buttonInput <- function(inputId, default = \"\") {\n  reactR::createReactShinyInput(\n    inputId,\n    \"action_button\",\n    htmltools::htmlDependency(\n      name = \"action_button-input\",\n      version = \"1.0.0\",\n      src = \"www/reactstrapTest/action_button\",\n      package = \"reactstrapTest\",\n      script = \"action_button.js\"\n    ),\n    default,\n    list(),\n    htmltools::tags$span\n  )\n}\nupdate_action_button <- function(session, inputId, value, configuration = NULL) {\n  message <- list(value = value)\n  if (!is.null(configuration)) message$configuration <- configuration\n  session$sendInputMessage(inputId, message);\n}\naction_button <- function(\n  inputId,\n  label,\n  status = \"primary\"\n) {\n  reactR::createReactShinyInput(\n    inputId,\n    \"action_button\",\n    htmltools::htmlDependency(\n      name = \"action_button-input\",\n      version = \"1.0.0\",\n      src = \"www/reactstrapTest\",\n      package = \"reactstrapTest\",\n      script = \"action_button.js\"\n    ),\n    default = 0,\n    configuration = list(\n      label = label,\n      status = status\n    ),\n    htmltools::tags$div\n  )\n}"},{"path":"going-further-reactR.html","id":"reactR-jsx-logic","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.2.3 Implement the JS logic","text":"’s time develop logic. now, action_button.jsx file contains placeholder generated reactR. reactstrap documentation provides boilerplate, slightly modified, according reactR documentation:can see, need import Button component reactstrap well \nreactShinyInput function reactR package. generate JS code, recompile yarn run webpack, document reload package functions:./app.R script, tell Shiny want use Bootstrap 4 instead Bootstrap 3, bslib::bs_theme function. Erase existing code replace following:can see Figure 28.4, button label displayed value.\nmissed leverage component arguments configuration, value, setValue, making link R JS.\nFIGURE 28.4: Work progress action button React\n","code":"import { reactShinyInput } from 'reactR';\nimport { Button } from 'reactstrap';\n\nfunction ActionButton() {\n  return (\n    <Button\n      color=\"primary\">\n    <\/Button>\n  );\n}\n\nreactShinyInput(\n  '.action_button',\n  'reactstrapTest.action_button',\n  ActionButton\n);\ndevtools::document()\ndevtools::load_all()\nlibrary(reactstrapTest)\n\nui <- fluidPage(\n  theme = bslib::bs_theme(version = \"4\"),\n  action_button(\"plop\", \"Click me!\")\n)\n\nserver <- function(input, output, session) {\n  observe(print(input$plop))\n}\n\nshinyApp(ui, server)"},{"path":"going-further-reactR.html","id":"improve-the-js-logic","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.2.4 Improve the JS logic","text":"modify action_button.jsx code add three parameters ActionButton component:Remember configuration R list sent JS JSON object reactR::createReactShinyInput(). JS side, access properties configuration.<PROPERTY>. value current button value, 0 app started.set handle value change upon click? Well, pretty straightforward. Button element onClick property inside can pass setValue function increment 1 (setValue internal hook, see 28.1.2.3).example, update button server side update_action_button():Clicking first button increment value R console. may play around\nchanging default color. clicking second button, get result shown Figure 28.5.\nFIGURE 28.5: Fully working React powered action button\n","code":"function ActionButton({ configuration, value, setValue }) {\n  return (\n    <Button\n      color={configuration.status}\n      onClick={() => setValue(value + 1)}>\n      {configuration.label}\n    <\/Button>\n  );\n}\nui <- fluidPage(\n  theme = bslib::bs_theme(version = \"4\"),\n  fluidRow(\n    action_button(\"plop\", \"Click me!\"),\n    action_button(\"update\", \"Update button 1\")\n  )\n)\n\nserver <- function(input, output, session) {\n  observe(print(input$plop))\n  observeEvent(input$update, {\n    update_action_button(\n      session, \"plop\", \n      configuration = list(\n        label = \"New text\", \n        status = \"success\"\n      )\n    )\n  }, ignoreInit = TRUE)\n}\n\nshinyApp(ui, server)"},{"path":"going-further-reactR.html","id":"exercise-1-1","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.2.5 Exercise 1","text":"Based previous example reactstrap documentation, improve action button component.\n1. Add size style parameter.\n2. Add disabled parameter.\n3. Add outline style parameter.","code":""},{"path":"going-further-reactR.html","id":"technical-considerations","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.2.6 Technical considerations","text":"reactShinyInput provides wrapper automatically bind input element. extremely convenient allows solely focus component logic rather binding shiny system. takes three parameters:element class obtained R side createReactShinyInput().input binding name useful store reference Shiny.InputBindings registry. Recent version reactR use <PACKAGE_NAME>.<INPUT_NAME> convention, avoids conflicts inputs belonging two different packages.React component function.optional fourth parameter allowing pass custom options like\nrate policies.Overall, reactShinyInput extends Shiny.InputBinding class providing extra methods like:getInputConfiguration setInputConfiguration, respectively get set user provided configuration, passed createReactShinyInput() R side function. hood (addition ship reactR, React, ReactTools HTML dependencies user defined custom dependencies), createReactShinyInput() generates three tag elements:first tag element placeholder containing unique id. React insert\ncomponent inside target ReactDOM.render.second tag script containing value passed JSON.second tag script containing configuration, also passed JSON.configuration values processed initialize method since called input bound:configuration values stored corresponding data attributes. important part render method creates React element based upon configuration value renders DOM:render method called inside subscribe also time element updated\nreceiveMessage.","code":"getInputConfiguration(el) {\n  return $(el).data('configuration');\n}\nsetInputConfiguration(el, configuration) {\n  $(el).data('configuration', configuration);\n}\nlibrary(shiny)\nreactR::createReactShinyInput(\n  inputId = \"plop\", \n  class = \"myinput\", \n  dependencies = htmltools::findDependencies(icon(\"bicycle\")), \n  default = 0, \n  configuration = list(a = 1, b = \"test\"), \n  container = div\n)#> <div id=\"plop\" class=\"myinput\"><\/div>\n#> <script id=\"plop_value\" type=\"application/json\">0<\/script>\n#> <script id=\"plop_configuration\" type=\"application/json\">{\"a\":1,\"b\":\"test\"}<\/script>// Within reactR's initialize method...\n$(el).data('value', JSON.parse($(el).next().text()));\n$(el).data(\n  'configuration', \n  JSON.parse($(el).next().next().text())\n);// reactR's render method\nrender(el) {\n  const element = React.createElement(component, {\n    configuration: this.getInputConfiguration(el),\n    value: this.getValue(el),\n    setValue: this.setValue.bind(this, el),\n    el: el\n  });\n  ReactDOM.render(element, el);\n}"},{"path":"going-further-reactR.html","id":"exercise-2","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.2.7 Exercise 2","text":"Add anicon (fontawesome) parameter ActionButton component.\nHint: might find helpful capture HTML dependency htmltools::findDependencies(iconTag) properly render . HTML icon(\"bicycle\") produces <class=\"fa fa-bicycle\" role=\"presentation\" aria-label=\"bicycle icon\"><\/>. However, React want <className=\"fa fa-bicycle />. Therefore, extract icon class send JS configuration list.Implement logic JS side. Hint: may use code:Try code :","code":"import { reactShinyInput } from 'reactR';\n// reactstrap components\nimport { Button } from \"reactstrap\";\n\nfunction ActionButton({configuration, value, setValue}) {\n  let iconTag, btnCl, innerTag;\n  if (...) {\n    btnCl = \"btn-icon\";\n    innerTag = <>\n      <span className=\"btn-inner--icon\">\n        <i className=... />\n      <\/span>\n      <span className=\"btn-inner--text\">...<\/span>\n    <\/>;\n  } else {\n    innerTag = configuration.label;\n  }\n\n  let outlined;\n  if (...) {\n    outlined = true;\n  }\n\n  return (\n    <Button\n      color={configuration.status}\n      className=...\n      outline=...\n      size=...\n      onClick={() => setValue(value + 1)}>\n      {innerTag}\n    <\/Button>\n  );\n}\n\nreactShinyInput(\n  '.action_button', \n  'reactstrapTest.action_button', \n  ActionButton\n);\nlibrary(shiny)\nlibrary(mypkg)\n\nui <- fluidPage(\n  theme = bslib::bs_theme(version = \"4\"),\n  fluidRow(\n    action_button(\n      \"plop\", \n      \"Click me!\", \n      size = \"lg\", \n      outline = TRUE\n    ),\n    action_button(\n      \"update\", \n      \"Update button 1\", \n      icon = icon(\"bicycle\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  observe(print(input$plop))\n  observeEvent(input$update, {\n    update_action_button(\n      session, \"plop\", \n      configuration = list(\n        label = \"New text\", \n        status = \"success\"\n      )\n    )\n  }, ignoreInit = TRUE)\n}\n\nshinyApp(ui, server)"},{"path":"going-further-reactR.html","id":"add-another-input","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.2.8 Add another input","text":"","code":""},{"path":"going-further-reactR.html","id":"button-group-input","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.2.8.1 Button group input","text":"section, design radio input consisting multiple buttons displayed side side. corresponding widget label must show currently selected value.initialized input elements :shown previously, creates ./srcjs/button_group.jsx .R/button_group.R.\nbutton_group() function four parameters, critical choices.\nexpect user pass vector like names(mtcars), selected first choice default. might add selected parameter leave reader simple exercise. function defined :expected reactstrap button HTML structure rather simple including title, list button tags selected item paragraph:Inside ./srcjs/button_group.jsx, first import required function components:design ButtonGroupUI JS function return component. critical step recover user choices (configuration.choices) store variable. , leverage map feature (see 28.1.2.2) iterate choice programmatically create buttons:finally return whole component fragment <> prevent creating extra div. whole code shown :Now, may test newly created element Shiny app:According Figure 28.6, rooms improvements good start!\nFIGURE 28.6: Fully working React powered button group (similar radio)\n","code":"\nreactR::scaffoldReactShinyInput(\"button_group\")\nbutton_group <- function(\n  inputId,\n  label,\n  choices,\n  status = \"primary\"\n) {\n  reactR::createReactShinyInput(\n    inputId,\n    \"button_group\",\n    htmltools::htmlDependency(\n      name = \"button_group-input\",\n      version = \"1.0.0\",\n      src = \"www/reactstrapTest\",\n      package = \"reactstrapTest\",\n      script = \"button_group.js\"\n    ),\n    default = choices[1],\n    configuration = list(\n      label = label,\n      choices = choices,\n      status = status\n    ),\n    htmltools::tags$div\n  )\n}<div>\n  <h5>Radio Buttons<\/h5>\n  <ButtonGroup>\n    <Button color=\"primary\" onClick={() => setRSelected(1)} active={rSelected === 1}>One<\/Button>\n    <Button color=\"primary\" onClick={() => setRSelected(2)} active={rSelected === 2}>Two<\/Button>\n    <Button color=\"primary\" onClick={() => setRSelected(3)} active={rSelected === 3}>Three<\/Button>\n  <\/ButtonGroup>\n  <p>Selected: {rSelected}<\/p>\n<\/div>import { reactShinyInput } from 'reactR';\nimport { Button, ButtonGroup } from 'reactstrap';function ButtonGroupUI({ configuration, value, setValue }) {\n  const choices = configuration.choices\n  // programmatically create buttons\n  const buttons = choices.map(\n    (choice) => <Button\n      key={choice}\n      color={configuration.status}\n      onClick={() => setValue(choice)}\n      active={value === choice}>\n        {choice}\n      <\/Button>\n  )\n  // ... other codeimport { reactShinyInput } from 'reactR';\nimport { Button, ButtonGroup } from 'reactstrap';\n\nfunction ButtonGroupUI({ configuration, value, setValue }) {\n  const choices = configuration.choices\n  const buttons = choices.map(\n    (choice) => <Button\n      key={choice}\n      color={configuration.status}\n      onClick={() => setValue(choice)}\n      active={value === choice}>\n        {choice}\n      <\/Button>\n  )\n\n  return (\n    <>\n      <h5>{configuration.label}<\/h5>\n      <ButtonGroup>\n       {buttons}\n      <\/ButtonGroup>\n      <p>Selected: {value}<\/p>\n    <\/>\n  );\n}\nui <- fluidPage(\n  theme = bslib::bs_theme(version = \"4\"),\n  button_group(\"plop\", \"A group of buttons\", choices = names(mtcars))\n)\n\nserver <- function(input, output, session) {\n  observe(print(input$plop))\n}\n\nshinyApp(ui, server)"},{"path":"going-further-reactR.html","id":"modularize-js-code-1","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.2.8.2 Modularize JS code","text":"Imagine repeat ten different elements. start accumulate components, good practice start modularizing code. Inside ./srcjs/action_button.jsx, wrap reactShinyInput call export statement:apply strategy ./srcjs/button_group.jsx script:create main.jsx file containing necessary code import initialize two components:modify webpack.config.js change entry point main.jsx, whose output main.js:means update HTML dependency R side, instance button_group.R, replace existing dependency following:proceed similarly action_button.R script.","code":"// To add in ./srcjs/action_button.jsx\nexport default function initActionButton(){\n  reactShinyInput(\n    '.action_button',\n    'reactstrapTest.action_button',\n    ActionButton\n  );\n}// To add in `./srcjs/button_group.jsx`\nexport default function initButtonGroup(){\n  reactShinyInput(\n    '.button_group',\n    'reactstrapTest.button_group',\n    ButtonGroupUI\n  );\n}import initActionButton from './action_button.jsx';\nimport initButtonGroup from './button_group.jsx';\n\ninitActionButton();\ninitButtonGroup();entry: [\n  path.join(__dirname, 'srcjs', 'main.jsx')\n],\noutput: {\n  path: path.join(__dirname, 'inst/www/reactstrapTest'),\n  filename: 'main.js'\n}\n# ... button_group.R start\n# ... \n  htmltools::htmlDependency(\n    name = \"button_group-input\",\n    version = \"1.0.0\",\n    src = \"www/reactstrapTest\",\n    package = \"reactstrapTest\",\n    script = \"main.js\"\n  )\n# ...\n# button_group.R end"},{"path":"going-further-reactR.html","id":"further-resources-1","chapter":"28 R + Shiny + React: welcome {reactR}","heading":"28.3 Further resources","text":"shiny.fluent (Rogala Zyla 2021a) leverages {shiny.react} (Rogala Zyla 2021b), another alternative bring React Shiny.","code":""},{"path":"going-further-where-to-go.html","id":"going-further-where-to-go","chapter":"29 What to do next?","heading":"29 What to do next?","text":"’re still alive reaching part, well congrats!\nHopefully, now get better understanding may quickly without much pain\ndeeply customize shiny apps. book quite lot content, yet just\nscratched surface may bit technique. \nmany topics covered. give \nreferences probably want explore, like go even .","code":""},{"path":"going-further-where-to-go.html","id":"multi-pages-shiny-apps","chapter":"29 What to do next?","heading":"29.1 Multi pages Shiny apps","text":"shown along book, shiny natively designed \nend multi-pages website. Packages like {shiny.router} (Stachura, Krzemiński, Igras 2021) {blaze} (c)) 2021)\nprovide sorts workaround playing url mimick multi-pages layout.\nYet authentic multi-pages experience! recent development package,\nnamely brochure (Fay 2021) aims filling gap, offering real multi-page solution.may try:run example, app opens first page. Typing\n/page2 search bar goes second page. page corresponds \nnew shiny session, requires use cookies want exchange\ninformation page page. Everything still experimental promising sure!","code":"\nremotes::install_github(\"ColinFay/brochure\")\nlibrary(brochure)\nlibrary(shiny)\n\nbrochureApp(\n  # First page\n  page(\n    href = \"/\",\n    ui = fluidPage(\n      h1(\"This is my first page\"), \n      plotOutput(\"plot\")\n    ),\n    server = function(input, output, session){\n      output$plot <- renderPlot({\n        plot(cars)\n      })\n    }\n  ), \n  # Second page, without any server-side function\n  page(\n    href = \"/page2\", \n    ui =  fluidPage(\n      h1(\"This is my second page\"), \n      tags$p(\"There is no server function in this one\")\n    )\n  )\n)"},{"path":"going-further-where-to-go.html","id":"web-design-best-practices-for-shiny","chapter":"29 What to do next?","heading":"29.2 Web design best practices for Shiny","text":"may wonder even one chapter UI conception best practices.\nbook, chose opinionated approach focused building tools customize interfaces rather \nbuilding interface . Yet, custom design, probably want \norganize better well polished interface. better recommend go two chapters:\nUX Matters Don’t rush coding (Fay et al. 2020), well read\nlayout basics Mastering Shiny (Hadley 2021).\nKeep mind, design follow two golden rules: simplicity usability!","code":""},{"path":"going-further-where-to-go.html","id":"conclusion","chapter":"29 What to do next?","heading":"29.3 Conclusion","text":"journey don’t stop ! Web development hides tons opportunities. great\nadvise regularly check recent innovation field experiment . Don’t afraid \nfailing, usual price learn new things!","code":""},{"path":"code-outputs.html","id":"code-outputs","chapter":"A Code outputs","heading":"A Code outputs","text":"","code":""},{"path":"code-outputs.html","id":"mastering-htmltools-appendix","chapter":"A Code outputs","heading":"A.1 Mastering {htmltools}","text":"","code":""},{"path":"code-outputs.html","id":"mastering-htmltools-appendix-1","chapter":"A Code outputs","heading":"A.1.1 Shiny RPG","text":"Final code expected section 2.5.2:","code":"\nrpgSelect <- function(inputId, label, choices, selected = NULL,\n                      multiple = FALSE, size = NULL) {\n  selectTag <- shiny::selectInput(\n    inputId,\n    label,\n    choices,\n    selected,\n    multiple,\n    selectize = FALSE,\n    width = NULL,\n    size\n  )\n\n  # Modify tag\n  selectTag$attribs$class <- NULL\n  # Clean extra label class\n  selectTag$children[[1]]$attribs$class <- NULL\n  # Remove extra outer div\n  selectTag$children[[2]] <- selectTag$children[[2]]$children[[1]]\n\n  # Add good class for rppgui binding\n  selectTag$children[[2]]$attribs$class <- if (is.null(size)) {\n    \"rpgui-dropdown\"\n  } else {\n    \"rpgui-list\"\n  }\n\n  selectTag\n}"},{"path":"code-outputs.html","id":"mastering-htmltools-appendix-2","chapter":"A Code outputs","heading":"A.1.2 Shiny RPG rework","text":"Final code expected section 2.6.6:","code":"\nrpgSelect <- function(inputId, label, choices, selected = NULL,\n                      multiple = FALSE, size = NULL) {\n  selectTag <- shiny::selectInput(\n    inputId,\n    label,\n    choices,\n    selected,\n    multiple,\n    selectize = FALSE,\n    width = NULL,\n    size\n  )\n  \n  selectClass <- if (is.null(size)) { # add class\n    \"rpgui-dropdown\"\n  } else {\n    \"rpgui-list\"\n  }\n  \n  tagQuery(selectTag)$\n    removeAttrs(\"class\")$ # remove outer div class\n    find(\".control-label\")$\n    removeAttrs(\"class\")$ # remove class from child label\n    siblings()$ # go down to the div \n    children()$ # go down to the select tag\n    addClass(selectClass)$ # add class to child select\n    resetSelected()$# go back to div parent\n    each(function(x, i) {\n      x$children[[2]] <- x$children[[2]]$children\n    })$ # replace div parent \n    allTags()\n}"},{"path":"code-outputs.html","id":"beautify-with-bslib","chapter":"A Code outputs","heading":"A.2 Beautify with {bslib}","text":"","code":""},{"path":"code-outputs.html","id":"bslib-bootstrap-accordion-appendix","chapter":"A Code outputs","heading":"A.2.1 Guided exercise: Bootstrap accordions","text":"part provide solution section 9.3.3.3.Code bs_accordion() function :Code bs_accordion_item() function :","code":"\nbs_accordion <- function(id, items) {\n\n  accordion_tag <- tags$div(\n    class = \"accordion\",\n    id = id,\n    items\n  )\n\n  tagAddRenderHook(accordion_tag, function(x) {\n    # get theme and version\n    theme <- bslib::bs_current_theme()\n    version <- if (bslib::is_bs_theme(theme)) {\n      bslib::theme_version(theme)\n    }\n\n    if (version == \"3\") {\n      stop(\n        sprintf(\n          \"accordion is not available for Bootstrap %s\",\n          version\n        )\n      )\n    }\n\n    # process accordion items to add\n    # missing attributes\n    new_items <- lapply(seq_along(items), function(i) {\n\n      # temp ids based on the parent id\n      heading_id <- paste(id, \"heading\", i, sep = \"_\")\n      controls_id <- paste0(id, \"_collapse_\", i)\n      target_id <- paste0(\"#\", controls_id)\n\n      # resolve bs_according_item\n      items[[i]] <- as.tags(items[[i]])\n\n      # BS4 and BS5 have minor differences\n      switch(\n        version,\n        \"4\" = tagQuery(items[[i]])$\n          find(\".card-header\")$\n          addAttrs(\"id\" = heading_id)$\n          find(\".btn\")$\n          addAttrs(\n            \"data-target\" = target_id,\n            \"aria-controls\" = controls_id\n          )$\n          resetSelected()$\n          find(\".collapse\")$\n          addAttrs(\n            \"id\" = controls_id,\n            \"aria-labelledby\" = heading_id,\n            \"data-parent\" = paste0(\"#\", id)\n          )$\n          allTags(),\n        \"5\" = tagQuery(items[[i]])$\n          find(\".accordion-header\")$\n          addAttrs(\"id\" = heading_id)$\n          children()$\n          addAttrs(\n            \"data-bs-target\" = target_id,\n            \"aria-controls\" = controls_id\n          )$\n          resetSelected()$\n          find(\".accordion-collapse\")$\n          addAttrs(\n            \"id\" = controls_id,\n            \"aria-labelledby\" = heading_id,\n            \"data-bs-parent\" = paste0(\"#\", id)\n          )$\n          allTags()\n      )\n    })\n\n    # alter main tag structure\n    tagQuery(x)$\n      # replace accordion items processed above\n      empty()$\n      append(new_items)$\n      allTags()\n  })\n}\nbs_accordion_item <- function(title, content, active = FALSE) {\n\n  item_body <- tags$div(\n    # id will be added from bs_accordion\n    # aria-labelledby also added from bs_accordion\n    # class differs between BS4 and BS5\n    # data parent differs between BS4 and BS5\n    class = paste(\"collapse\", if (active) \"show\"),\n    tags$div(\n      # class differs between BS4 and BS5\n      content\n    )\n  )\n\n  # accordion item wrapper\n  accordion_item_tag <- tags$div(\n    # class differs between BS4 and BS5\n    item_body\n  )\n\n  tagAddRenderHook(accordion_item_tag, function(x) {\n    # get theme and version\n    theme <- bslib::bs_current_theme()\n    version <- if (bslib::is_bs_theme(theme)) {\n      bslib::theme_version(theme)\n    }\n\n    # create accordion item header\n    item_header <- if (version == \"4\") {\n      tags$div(\n        class = \"card-header\",\n        # id will be added from bs_accordion\n        tags$h2(\n          class = \"mb-0\",\n          tags$button(\n            class = \"btn btn-link btn-block text-left\",\n            type = \"button\",\n            `data-toggle` = \"collapse\",\n            # data-target will be added from bs_accordion\n            `aria-expanded` = tolower(active),\n            # aria-controls will be added from bs_accordion\n            title\n          )\n        )\n      )\n    } else if (version == \"5\") {\n      tags$h2(\n        class = \"accordion-header\",\n        tags$button(\n          class = \"accordion-button\",\n          type = \"button\",\n          `data-bs-toggle` = \"collapse\",\n          `aria-expanded` = tolower(active),\n          title\n        )\n      )\n    }\n\n    # alter tag structure\n    switch(\n      version,\n      # don't need to handle BS3\n      \"4\" =  tagQuery(x)$\n        addClass(\"card\")$\n        # prepend header tag\n        prepend(item_header)$\n        find(\".collapse\")$\n        children()$\n        # add class to item body\n        addClass(\"card-body\")$\n        allTags(),\n      \"5\" = tagQuery(x)$\n        addClass(\"accordion-item\")$\n        prepend(item_header)$\n        find(\".collapse\")$\n        addClass(\"accordion-collapse\")$\n        children()$\n        addClass(\"accordion-body\")$\n        allTags()\n    )\n  })\n}"},{"path":"code-outputs.html","id":"from-R-to-JS-appendix","chapter":"A Code outputs","heading":"A.3 R and JS","text":"whole websocket code obtained following 11.2.1.","code":"\nws_handler <- function(ws) {\n  # The ws object is a WebSocket object\n  cat(\"New connection opened.\\n\")\n  # Capture client messages\n  ws$onMessage(function(binary, message) {\n    # create plot\n    input_message <- jsonlite::fromJSON(message)\n    print(input_message)\n    cat(\"Number of bins:\", input_message$value, \"\\n\")\n    hist(rnorm(input_message$value))\n    \n    # update gauge widget\n    output_message <- jsonlite::toJSON(\n      list(\n        val = sample(0:100, 1),\n        message = \"Thanks client! I updated the plot...\"\n      ),\n      pretty = TRUE,\n      auto_unbox = TRUE\n    )\n    ws$send(output_message)\n    cat(output_message)\n  })\n  ws$onClose(function() {\n    cat(\"Server connection closed.\\n\")\n  })\n}"},{"path":"code-outputs.html","id":"shinys-input-system","chapter":"A Code outputs","heading":"A.4 Shiny’s input system","text":"","code":""},{"path":"code-outputs.html","id":"update-binding-client-appendix","chapter":"A Code outputs","heading":"A.4.1 Update a binding from the client","text":"JS code section 12.1.4.","code":"$(function() {\n  $(document).on('shiny:connected', function(event) {\n    Shiny.unbindAll();\n    $.extend(Shiny\n      .inputBindings\n      .bindingNames['shiny.actionButtonInput']\n      .binding, {\n        reset: function(el) {\n         $(el).data('val', 0);\n        },\n        subscribe: function(el, callback) {\n          $(el).on(\n            'click.actionButtonInputBinding', function(e) {\n              let $el = $(this);\n              let val = $el.data('val') || 0;\n              $el.data('val', val + 1);\n\n              callback();\n          });\n                \n          $(el).on(\n            'change.actionButtonInputBinding', function(e) {\n              callback();\n          });\n              \n        }\n      });\n    Shiny.bindAll();\n  });\n      \n  $('#button1').on('click', function() {\n    let $obj = $('#button2');\n    let inputBinding = $obj.data('shiny-input-binding');\n    let val = $obj.data('val') || 0;\n    inputBinding.setValue($obj, val + 10);\n    $obj.trigger('change'); \n  });\n  \n  $('#reset').on('click', function() {\n    let $obj = $('#button2');\n    let inputBinding = $obj.data('shiny-input-binding');\n    inputBinding.reset($obj);\n    $obj.trigger('change');\n  });\n});"},{"path":"code-outputs.html","id":"boxes-on-steroids-appendix","chapter":"A Code outputs","heading":"A.4.2 Boxes on steroids","text":"box input binding defined 12.2.1 may found .","code":"let boxBinding = new Shiny.InputBinding();\n$.extend(boxBinding, {\n  find: function(scope) {\n    return $(scope).find('.box');\n  },\n  getValue: function(el) {\n    let isCollapsed = $(el).hasClass('collapsed-box')\n    return {collapsed: isCollapsed}; // this will be a list in R\n  },\n  setValue: function(el, value) {\n    $(el).toggleBox();\n  }, \n  receiveMessage: function(el, data) {\n    this.setValue(el, data);\n    $(el).trigger('change');\n  },\n  subscribe: function(el, callback) {\n    $(el).on(\n      'click', \n      '[data-widget=\"collapse\"]', \n      function(event) {\n        setTimeout(function() {\n          callback();\n        }, 50);\n    }); \n    \n    $(el).on('change', function(event) {\n      setTimeout(function() {\n        callback();\n      }, 50);\n    });\n  },\n  unsubscribe: function(el) {\n    $(el).off('.boxBinding');\n  }\n});\n\nShiny.inputBindings.register(boxBinding, 'box-input');\n\n$(function() {\n  // overwrite box animation speed. \n  // Putting 500 ms add unnecessary delay for Shiny.\n  $.AdminLTE.boxWidget.animationSpeed = 10;\n});"},{"path":"code-outputs.html","id":"boxes-on-steroids-more-appendix","chapter":"A Code outputs","heading":"A.4.3 Going further","text":"Final code section 12.2.1 given .","code":"let boxBindingEnchanced = new Shiny.InputBinding();\n$.extend(boxBindingEnchanced, {\n  // Other methods from boxBinding.js: find, getValue, ...\n  //...\n  \n  // user defined binding: extract config script\n  _getConfigScript: function(el) {\n    return(\n      $(el)\n        .parent()\n        .find(\"script[data-for='\" + el.id + \"']\")\n    )\n  },\n  // user defined binding: process config script\n  _processConfig: function(el) {\n    return(\n      JSON.parse(\n        this\n        ._getConfigScript(el)\n        .html()\n      )\n    )\n  },\n  // user defined binding: update box width\n  _updateWidth: function(el, o, n) {\n    // removes old class\n    $(el).parent().toggleClass(\"col-sm-\" + o);\n    $(el).parent().addClass(\"col-sm-\" + n); \n    // trigger resize so that output resize\n    $(el).trigger('resize');\n  },\n  // Input binding default method \n  setValue: function(el, value) {\n    let config = this._processConfig(el);\n    \n    // JS logic\n    if (value.action === \"update\") {\n      if (value.options.hasOwnProperty(\"width\")) {\n        if (value.options.width !== config.width) {\n          this._updateWidth(\n            el, \n            config.width, \n            value.options.width\n          )\n          config.width = value.options.width;\n        }\n      }\n      // other items to update\n      \n      // replace the old JSON config by the new one \n      // to update the input value \n      this\n        ._getConfigScript(el)\n        .replaceWith(\n          '<script type=\"application/json\" data-for=\"' + \n          el.id + \n          '\">' + \n          JSON.stringify(config) + \n          '<\/script>'\n        );\n      \n    } else if (action === \"toggle\") {\n      $(el).toggleBox();\n    }\n    \n  }\n});\n\nShiny.inputBindings.register(boxBindingEnchanced, 'box-input-enhanced');\n\n$(function() {\n  // overwrite box animation speed. \n  // Putting 500 ms add unnecessary delay for Shiny.\n  $.AdminLTE.boxWidget.animationSpeed = 10;\n});"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"Allaire, JJ, Yihui Xie, Jonathan McPherson, Javier Luraschi, Kevin Ushey, Aron Atkins, Hadley Wickham, Joe Cheng, Winston Chang, Richard Iannone. 2021. Rmarkdown: Dynamic Documents R. https://CRAN.R-project.org/package=rmarkdown.Attali, Dean. 2020. Shinyjs: Easily Improve User Experience Shiny Apps Seconds. https://deanattali.com/shinyjs/.Bache, Stefan Milton, Hadley Wickham. 2020. Magrittr: Forward-Pipe Operator R. https://CRAN.R-project.org/package=magrittr.c)). 2021. Blaze: Observe Url Paths Shiny.Chang, Winston, Barbara Borges Ribeiro. 2018. Shinydashboard: Create Dashboards Shiny. http://rstudio.github.io/shinydashboard/.Chang, Winston, Joe Cheng, JJ Allaire, Carson Sievert, Barret Schloerke, Yihui Xie, Jeff Allen, Jonathan McPherson, Alan Dipert, Barbara Borges. 2021. Shiny: Web Application Framework R. https://shiny.rstudio.com/.Chang, Winston, Joe Cheng, Alan Dipert, Barbara Borges. 2020. Websocket: WebSocket Client Library. https://CRAN.R-project.org/package=websocket.Cheng, Joe, Winston Chang. 2021. Httpuv: HTTP Websocket Server Library. https://github.com/rstudio/httpuv.Cheng, Joe, Timothy Mastny, Richard Iannone, Barret Schloerke, Carson Sievert. 2021. Sass: Syntactically Awesome Style Sheets (Sass).Cheng, Joe, Carson Sievert, Barret Schloerke, Winston Chang, Yihui Xie, Jeff Allen. 2021. Htmltools: Tools Html. https://github.com/rstudio/htmltools.Coene, John. 2021. Waiter: Loading Screen Shiny.Coene, John, David Granjon. 2021. Shinybulma: Bulma Shiny. https://github.com/JohnCoene/shinybulma.Devaux, Gabrielle, David Granjon. 2020. DeminR: DeminR.Fay, Colin. 2021. Brochure: Multipage Shiny Apps. https://github.com/colinfay/brochure.Fay, Colin, Vincent Guyader, Sébastien Rochette, Cervan Girard. 2021. Golem: Framework Robust Shiny Applications. https://github.com/ThinkR-open/golem.Fay, Colin, Sebastien Rochette, Vincent Guyader, Cervan Girard. 2020. Engineering Production-Grade Shiny Apps. Chapman; Hall/CRC.Granjon, David. 2020. TablerDash: Tabler Api Shiny.———. 2021a. Bs4Dash: Bootstrap 4 Version Shinydashboard.———. 2021b. CaPO4Sim: Virtual Patient Simulator Context Calcium Phosphate Homeostasis.———. 2021c. OSUICode: Standalone Code \"Outstanding Shiny User Interfaces\".———. 2021d. ShinydashboardPlus: Add Adminlte2 Components Shinydashboard.Granjon, David, John Coene. 2021. Charpente: Seamlessly Design Robust Shiny Extensions. https://github.com/RinteRface/charpente.Granjon, David, Victor Perrier, Isabelle Rudolf. 2021. ShinyMobile: Mobile Ready Shiny Apps Standalone Capabilities.Hadley, Wickham. 2019. Advanced R. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. https://adv-r.hadley.nz/.———. 2021. Mastering Shiny: Build Interactive Apps, Reports, Dashboards Powered R. O’Reilly Media, Incorporated. https://books.google.ch/books?id=nrvAzQEACAAJ.Henry, Lionel, Hadley Wickham. 2020. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.Inc, Facebook, Michel Weststrate, Kent Russell, Alan Dipert. 2021. ReactR: React Helpers. https://github.com/react-R/reactR.Meyer, Fanny, Victor Perrier. 2019. Shinylogs: Record Everything Happens Shiny Application. https://github.com/dreamRs/shinylogs.Ooms, Jeroen. 2014. “Jsonlite Package: Practical Consistent Mapping Json Data R Objects.” arXiv:1403.2805 [stat.CO]. https://arxiv.org/abs/1403.2805.———. 2020. Jsonlite: Simple Robust Json Parser Generator R. https://CRAN.R-project.org/package=jsonlite.Perrier, Victor, Fanny Meyer. 2020a. Apexcharter: Create Interactive Chart Javascript Apexcharts Library. https://CRAN.R-project.org/package=apexcharter.———. 2020b. Fresh: Create Custom Bootstrap Themes Use Shiny. https://github.com/dreamRs/fresh.———. 2020c. Jstools: Tools Work Javascript Css. https://github.com/dreamRs/jstools.Perrier, Victor, Fanny Meyer, David Granjon. 2021. ShinyWidgets: Custom Inputs Widgets Shiny. https://github.com/dreamRs/shinyWidgets.R Core Team. 2019. R: Language Environment Statistical Computing. Vienna, Austria: R Foundation Statistical Computing. https://www.R-project.org/.Rogala, Marek, Kamil Zyla. 2021a. Shiny.fluent: Microsoft Fluent Ui Shiny Apps.———. 2021b. Shiny.react: Tools Using React Shiny.Sievert, Carson, Joe Cheng. 2021. Bslib: Custom Bootstrap ’Sass’ Themes Shiny Rmarkdown.Sievert, Carson, Barret Schloerke, Joe Cheng. 2021. Thematic: Unified Automatic Theming Ggplot2, Lattice, Base R Graphics. https://CRAN.R-project.org/package=thematic.Stachura, Filip, Dominik Krzemiński, Krystian Igras. 2021. Shiny.router: Basic Routing Shiny Web Applications. https://CRAN.R-project.org/package=shiny.router.Wickham, Hadley. 2011. “Testthat: Get Started Testing.” R Journal 3: 5–10. https://journal.r-project.org/archive/2011-1/RJournal_2011-1_Wickham.pdf.———. 2016. Ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.———. 2020. Httr: Tools Working Urls Http. https://CRAN.R-project.org/package=httr.———. 2021. Testthat: Unit Testing R. https://CRAN.R-project.org/package=testthat.Wickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, Dewey Dunnington. 2020. Ggplot2: Create Elegant Data Visualisations Using Grammar Graphics. https://CRAN.R-project.org/package=ggplot2.Wickham, Hadley, Romain François, Lionel Henry, Kirill Müller. 2021. Dplyr: Grammar Data Manipulation. https://CRAN.R-project.org/package=dplyr.Wickham, Hadley, Garrett Grolemund. 2017. R Data Science: Import, Tidy, Transform, Visualize, Model Data. 1st ed. O’Reilly Media, Inc.Wickham, Hadley, Dana Seidel. 2020. Scales: Scale Functions Visualization. https://CRAN.R-project.org/package=scales.Xie, Yihui. 2014. “Knitr: Comprehensive Tool Reproducible Research R.” Implementing Reproducible Computational Research, edited Victoria Stodden, Friedrich Leisch, Roger D. Peng. Chapman; Hall/CRC. http://www.crcpress.com/product/isbn/9781466561595.———. 2015a. Dynamic Documents R Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. http://yihui.name/knitr/.———. 2015b. Dynamic Documents R Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. https://yihui.org/knitr/.———. 2016. Bookdown: Authoring Books Technical Documents R Markdown. Boca Raton, Florida: Chapman; Hall/CRC. https://github.com/rstudio/bookdown.———. 2021a. Bookdown: Authoring Books Technical Documents R Markdown. https://github.com/rstudio/bookdown.———. 2021b. Knitr: General-Purpose Package Dynamic Report Generation R. https://yihui.org/knitr/.Xie, Yihui, J. J. Allaire, Garrett Grolemund. 2018. R Markdown: Definitive Guide. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/rmarkdown.Xie, Yihui, Christophe Dervieux, Alison Presmanes Hill. 2021. Blogdown: Create Blogs Websites R Markdown. https://github.com/rstudio/blogdown.Xie, Yihui, Christophe Dervieux, Emily Riederer. 2020. R Markdown Cookbook. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/rmarkdown-cookbook.Xie, Yihui, Alison Presmanes Hill, Amber Thomas. 2017. Blogdown: Creating Websites R Markdown. Boca Raton, Florida: Chapman; Hall/CRC. https://github.com/rstudio/blogdown.","code":""}]
